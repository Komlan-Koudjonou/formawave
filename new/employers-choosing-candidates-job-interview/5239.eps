%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Employers choosing candidates for job interview.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 4/3/2020
%%BoundingBox: 0 0 2848 1780
%%HiResBoundingBox: 0 0 2848 1780
%%CropBox: 0 0 2848 1780
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Employers choosing candidates for job interview</rdf:li>
               <rdf:li xml:lang="x-repair">Employers choosing candidates for job interview</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Employers choosing candidates for job interview. HR professionals analyzing applicant or employee profiles. Vector illustration for recruit agency, career, business, employment concept</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>career</rdf:li>
               <rdf:li>job</rdf:li>
               <rdf:li>customer</rdf:li>
               <rdf:li>business</rdf:li>
               <rdf:li>hr</rdf:li>
               <rdf:li>audience</rdf:li>
               <rdf:li>choice</rdf:li>
               <rdf:li>client</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>looking</rdf:li>
               <rdf:li>recruit</rdf:li>
               <rdf:li>success</rdf:li>
               <rdf:li>agency</rdf:li>
               <rdf:li>communication</rdf:li>
               <rdf:li>company</rdf:li>
               <rdf:li>employer</rdf:li>
               <rdf:li>fair</rdf:li>
               <rdf:li>interview</rdf:li>
               <rdf:li>office</rdf:li>
               <rdf:li>people</rdf:li>
               <rdf:li>talent</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>character</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>candidate</rdf:li>
               <rdf:li>applicant</rdf:li>
               <rdf:li>employee</rdf:li>
               <rdf:li>human</rdf:li>
               <rdf:li>resource</rdf:li>
               <rdf:li>manager</rdf:li>
               <rdf:li>personnel</rdf:li>
               <rdf:li>management</rdf:li>
               <rdf:li>selection</rdf:li>
               <rdf:li>choosing</rdf:li>
               <rdf:li>analysis</rdf:li>
               <rdf:li>hiring</rdf:li>
               <rdf:li>professional</rdf:li>
               <rdf:li>recruiter</rdf:li>
               <rdf:li>online</rdf:li>
               <rdf:li>internet</rdf:li>
               <rdf:li>research</rdf:li>
               <rdf:li>recruitment</rdf:li>
               <rdf:li>finding</rdf:li>
               <rdf:li>search</rdf:li>
               <rdf:li>employment</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2020-04-03T15:55:22+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-04-03T15:55:22+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-04-03T15:55:21+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAtAC0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAtAAAAAEA&#xA;AQC0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVskiRryY0GEC0E0pC9gPcj6Ml4ZY8Yb+twfzY8BTxh&#xA;cLiI/tYOErxBeHU9DgpNt4EuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpZdXbhiSxCg0C&#xA;jMmGNolNCvqQRC7sVRRVmZqAAdyTlvhMONbBq8VxEJreUTRNXjJG4ZTQ0NCCRsRTHwl40Vb3jk8g&#xA;xNOqnK54wyjMpjPIUhZx1pt9OY8RZbpGglEt0Vam7HvvmXGFuOZIa41m1tuH1mVIPUbjH6kgTkx7&#xA;DlSpyXho4lb64f5T9+PhrxI+xmYsBWqMK79sx8sW2EkU83ZfvyoRZmSDu3OxJrQE5dANcikGs67a&#xA;6Ppl1ql/N6NnaIZZnpWgHYAdSTsBmUIDk1GTANL/AOcivJt5eQW86XNlHcPwS5uFh9NdyA0nCRmU&#xA;fRt323x8PeqZHaIlY3893qEN3zK9CrU4svevQ5AwQCmMBJTfscx5NgVVdl6H6MgQyBVVmB2bY+OR&#xA;MWYkqZFk7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkd71/2RzOxuLNhn5k6Tban5Vmiu3mWygk&#xA;juLpLdS7vFE1WXiK1Hf6Mc8pRgTD6mzTxiZgS+lLPyj07Q7fRrq60T1/qF1KOP1lQpLxghitAoK7&#xA;jcd65XpZZSD4lXfRs1ccYkPDuq6vQ7T9v6P45bkcaKc3P+8zfR+sZhw+pyZckiuP75vo/VmdDk4p&#xA;fIGqrrev6xfT6ncyJOlxIpiujIxjYtvHQBuAWlD4UyOo1YxUKv5fpcnBpjkHOnsP/OPWo6xNpOr2&#xA;F65ktrC4RbZmJZlZw3qpv+yOCkfM5aZCQBHVx5RIJB6ParLonyOY2RlFG5SzQl4dm/1aZbjYyeQf&#xA;85Aa1p1t5DuNMkukS+v5IfQta/vHWOVXZuI34jh1O1czcY3ceZ2YJ+VPkby7NoZ8xanMLg3MM0Dw&#xA;ShUihQFo3PInclB9ragOaDtbX5Rk8KAqiD5nr97v+ytDjOPxZb2CPIdHvHlFYx5e0ZYq+kLO39Pl&#xA;u3ERLSp8aZuTdb83S7XtyZTAP3fzOYsubYF+RSwpPzf8mvrraP6swcS+gt5wVrd3Jp8LqzNSu1eN&#xA;PozH/Mw4qdkey83Bx7e7qzhJCvuPDLyHXg0iAQRUdMrbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;qkGpzRwxtLI3GNCSx9hmV4kYRMpGgA0RxynIRjuSwPUPMN9cyMI29K3/AGYxTcf5Rzi9b2zlzEgH&#xA;hh3frex0fZOLEASOKff+pSttc1G3YGOT93WpiIHHKNN2pnwn0nbu6N+o7Nw5vqG/f1Zxod/FfWpn&#xA;j2rQOvdWHUZ2um1cdRjE4/HyLxuq0ssGQwl/aGRXP+8zfR+sYIfUiXJjGt6nY6ZbzXt7KIbeIAsx&#xA;77bADuT2GZZyCEbPJqxYZZJ8MRZLwrzLrXl3UNXn1HTLKWzlujzvJHevquAAren8SoadaHfOf7Q1&#xA;Az1Q5PVaHsyeEGzds4/L3zd5Oggh0SytTpckjVHqEOJpn6lpftM7H+b5DwzbafXwnUfpLp9Z2Rlx&#xA;gzviH2vU7LonyOX5HVxRuUs2HfmhruraF5M1bVdKg9e+to1MYpyCAsqtKV7iNSW+jfbMjCASGvId&#xA;nybo9zPrGo3t/qsjXt7JxZpp/jYlq16/IAZT2rklCMRE1zd37NafHklMzAkRVXvztkiXNylk1ikz&#xA;rZMCrWqsREQ3UFAeO9c0PEeLi/i7+r2B0+Ph4eEcPdT2v8n/ADPd6vY3FnfSCS40/j6b0C/uWFFH&#xA;wgfZKn8M3Ok1BnEiR3DyHbeghhnGUBUZfe9QgKmJSpBUioI3BrlhNunql+BXkXmy9/L2Hzra2+sX&#xA;cUDWd0jhIQDQkBgk3AHgnMgtXMHD2bmlnMhH93zt3J7UhDTiPF6zs9d65nOmVIn4mh6HAQyiVfK2&#xA;x2KuxV2KuxV2KuxV2KuxV2KsXl/M7yLD5hufL1zq8NtqlqUWWOesSFnAIVZXAjZviFQG/jlnhSq6&#xA;2Y8QumUZWydirHte0n9IWz2ryGI8uSuBUbdKjuMGr0w1GLgumek1JwZOOrY0/kST1SUuwI6LQMhJ&#xA;5U+Lvmln7Pb+me3udzD2g23jv710XkT4x69yHiNQyqpU7jsa9sli9nwJeqVx91Mcnb5MfTGpfNPN&#xA;A0FNMjeJJGmllILORTYdNhXxzaaHQR00SAbt1eu10tTIEiqZJPGXhZB1pt9GXxNFx5DZhHnPyLD5&#xA;nW3Se7ntVtyT6cYBRiRTkykfaHY1w58IyAAnk5Gi1p05JEQSWL/8qL0z/q5z/wDItMx/5Pj3uw/l&#xA;6f8ANDcf5G6UrqzancFQQSFRFP0HemI7Pj3lB7en/ND02yg9JEQFmWNQoZzVjQUqT3OZ0js6PmbR&#xA;eVpUZYA9elD1B6ZMSQQx67/Lrydc8jJolmrP9t4Ylhdvm8YRj9+M+Gf1btuHNkxXwExvuS24/KLy&#xA;PKtBphjPTlHNMD+LkfhlB02I9HOh2xqo/wAV/AJn5b8k6F5ejlj022KtcbTSyEu7AdFJPb2GWY8U&#xA;IDZx9VrsucgzPJJfMvknznBO1/5L1+SxagJ0i4pJakjr6fMOE5eBXr3GX6TwcceAx9LiaieTJLiv&#xA;dgPmFP8AnIjUoJYrqKS0tYELTm0ltrdSqj4mLpJzbbsD9GbHH+Wjy3+biS8UvFknExZwSxJqzHuT&#xA;882MZA8nGIfS35H/AJkxeYtJ/QN+4GtaTGqqSd57ZaKkg78k2V/oPfbRazBwSJHIufhyWKeo5hty&#xA;vE1V9xtlcg2RK/AydirsVdirsVdirsVdirsVeEfmx+UE2t+fRrLXENppl6kImMa1laSKiuCB3ZaU&#xA;ah/VVzdoeBACrJbtNovGkd6AeveWNPl0fQLPTJZ3untUKLLISW4ciUQk1J4IQlfbJAEizzaJyAJ4&#xA;eSZfW19vvyXAx43fWYT9qn68HAV4wu9W28V/DGpJsLwsZFQAR4imRsp2b+BQTso7nHmqj9cg8T92&#xA;S8MseMON7DTapPyw+GV4wotcqxqScmIMDJoTRk0rjwlFqmRS7FWiQBU7DFVvqx/zYaK271Y/5seE&#xA;rbvUj/mGNFbX4FU7iCO4gkglFY5UZHHSqsKHCDSvh94Pq7tAQAY2KEDxBoc6mNVs6ovR/I+iXFk3&#xA;lDzro0bu0OpNpWvRxBmbjNIeMpAr/uibie2y/PNXrJgGUZGtrDlYYE0Yi307mpctUgPxEeORkzir&#xA;ZBm7FXYq7FXYq7FXYq7FVGaU8WWM0ahAbwOHh2Y8W7yu4uLmBhKJGl57l3JLcvGtc4jJOUN7v3vc&#xA;44RkKqmY+V7+5utFDXEhklRypZt249RU986nsbPLJi9RsgvLdsYI48vpFAhFS3Dhyq9Bm8jB0xLF&#xA;NU/NDy9pupPYTySNLE3CZ44+SIe9TUE070BzFyavFCXCXZYeys+SHGKosnivTIiSIQ0bgMp8QRUZ&#xA;liIIdabBoppZS0J/lIrTMbJFthJVu5Q0VBXc75HHHdlOWyVTTOHKqaAZlRiKaCUh1vz15a0OZYNW&#xA;1aC0ncclhdhz4+PEVYDJjHfRHEi9G8yabrdkL3Sb2O8tSSvqRGtGHVWHVTv0OJgAtprbysxKtvtU&#xA;HK5xpkCmERrGuY8ubYF+BVC5NKeFK5OCCk+oatHY2VzfXL+na2sTzzvSvGONSzGg3NAMyRANVvN9&#xA;K/5yH8tahrEOn/VLuCO4kWKK5dYyA7txXmqsSBv1FckcKbL1GO4cuA24JpkDAKCmMBPA+xzGk2BV&#xA;yKXxT5tSO08469YQjjFaahdRQipJ9NJmVak9TQZ0OnymURfc4E4AF7p/zjhc2t35Q1TTZQHkgvvW&#xA;dD/JLEgQ7f5ULZrO1MYlIcW4IcvSZDDeOxexZgti6L+8GCXJlHmiMrbHYq7FXYq7FXYq7FVKWT9k&#xA;fScnEMJFA6lepZWE921CIULAHYE9h9JyGfJ4cJSq6Fs8GLxJxjysvL4LgSRyRXTE8mLK/fc1ofpz&#xA;hY5RIETe7OMxIMWVeXvUs1RWVxa3CKUkKtRmpVSpG1DXOi7KJxEA3wyHcXnu1AMosEcUT3jkmsv9&#xA;43zzqo8nmSw/UfLuknUZka2ieW8kMpleMOQ8h61I2oc5btDEfzPCD9Vfa9ZoNSfy3Ef4AfsZXFGk&#xA;UaRoKIgCqPAAUGdSBTyZNmym1p0H+qMxsjZFUuPsD55GPNJSuf8AvWzKjyai8I/Mz8uk1DWNTuY5&#xA;f9yNxcLcRyvvWIxIvpdafDx+HNVn7Ulh1HDIeivwf0O2wdnjLgsfXf4CG/5x8uLyx85a7oTyB4hA&#xA;8kpBJUy206xclr4+qc3EZicIyHUX83VTgYyMT0L6Ctf7w/L+IyufJYppF/djMWXNtC/AqHuv4HLI&#xA;MZJDqdjFqGm3dhL/AHV3DJBJ/qyKUP4HMktYO7C9O8n6d9ftoQkH+iSRkKIIgyrAwIXkByFeO+cv&#xA;osmSWoESTzN7vVa4YhpzIRG4FfFn8f8AeL8x+vOoPJ5UJtb/AGT88xZtoVcgl8d/nJaCy/M7XGVe&#xA;KvOsjilP76NJK/Tyrm50+0IycWfMhNfyb83TeWPO0EM4K2epMtjeo1QUZnAR6eKP19ics1eLjh5j&#xA;djilRfV+aJzF8I+PBLkyjzV8rbHYq7FXYq7FXYqtkfiu3U9MICJGkPljUxP81lZvy618KCT9VY0G&#xA;+wIJy/Tf3g97DJ9JfH1xdTrbsBI1KcQOR6HbN1lhEAmg4sZy731/+Wd3Jdflt5clkXiy2MMVPaFf&#xA;SB6nqErmlmKmXKHJ5v8Am/8AmZfWN/N5e0WRreeOhvrxCQ6lhyEcZ7bEEsPkM2WlwAjiLjZZ70Hn&#xA;thr/AJhby5qzm/mYI8FXZ2L/AL1mDUY79h3zA1mkwnWYrjvIS/2IFWHYaXUZRpcgB2HD9t3SZ+Rv&#xA;zU1vRtSjj1W7mvtJlIWdJmaV4wf242Ylvh7r0Pzzb5dOJDbm6uGQh9NWDpJGjoeSOgZWHcEAjNHk&#xA;c6KtcfYHzyEeaSlc/wDetmVHk1Hm8+8yz2N/OZLOALKTWSZvhLkAKCQPADOJ7W7UjnkPDHLqeZ/Y&#xA;9n2X2bLCD4h59AjPLmq2enwpBJaxrK5pLdRKqs1T1egBNPHMrs7t7gjHHkF1txfs8nF7Q7E45SyY&#xA;zXXh/Heze1/vD8v4jOrnyeXimkX92MxZc20PMvNf5+eXvK/m+fy7qmm3arbmP1L2Pgy0kRXDKnIE&#xA;r8Xz9suhgMo2C1yyUaL0W4kRohKDVCnIH2pXIQZSfOHnD869cv8AU2tfL8psdLR+CzhR60wrTkSw&#xA;PAHsBQ+Phm6xaYDnzcSU+5PfMHmnW7bRLme1nMN1ChdbhB8ZIPetR+GV4+xMGLJLKAbPToHIydqZ&#xA;cmMYzVD7Wvyt/OLUdQ1eDRfMTCeW6kVLO+RAreoTskioAtD2YD5+IGo04AJi0wnvu95t/sn55qZu&#xA;UFXIJfL351aUbr825rULvqP1NRv1LxpF70+zm60h/c7+biZR61/56+Sn8v8Amr9MWalNO1dmmVl2&#xA;EdyDWVdunInmvzPhjos3HGjzC5o0bfSGhah+ktD07Uf+W22huP8AkbGH/wCNs1E41IjucoGwmcA6&#xA;n6Mqk2RVcgzdirsVdirsVdiqHkarnwGwywBrkVuFix38xYmk8heYVWgI065bfwSJmP6su05/eR97&#xA;Gf0l8ZTRO6r8J9Pl8TU22HSub6Yug4QfYv5aWrxfl3oETfaNlFIPlIOY/Bs0eeX7w+9zID0hdrn5&#xA;feVdcuxd6rpcVzdBQpmqyMQOnIoy8qdq5KGolEUCxljB5hCR/lX5IjtpbZNIVYJypmjEs1GKmq1+&#xA;Pscrnk4pxyH643R7r5tkSYwMB9Mufwatfyn8iW1xHcQ6JEJYmDoWaRxUdKq7sp+kZcdXM9WoYh3M&#xA;pmurOwhNxfXEVtDUL6kzrGoJ7cmIGYxN8m0K0+8YI3Fa4I81KX3Fs0nLiQCwpv8ALLifSQxGxtiH&#xA;+B9W/wB+wf8ABP8A80Zxv+h/P3w+Z/U9b/L2Hul8h+toeR9Y5Gstvx7fE9f+IY/6H8/fD5n9Sf5e&#xA;wd0/kP1ss0u0uLe0jS5ZXnRQrMtSNum5A7Z1emE44oxnvIB5fUyhLJKUNokptGKRjE82AePedPKf&#xA;lPzB+YNlq2o8ntbGQC6EaqVuAgBVXPUorih8RWmaSPbkcOWUOcCefdtvTvT2NLLhjLlMDl379Xrz&#xA;cZo0liYOjAMrA1BU7gg5u4TBFjkXRSiQaPNhl7+T35f3l697PoqfWJG5uY5Zol5VrXhHIiD7sy46&#xA;uY6tRxDuR1z+XflW5gkt5tP5xSqVdfWmFQeu4cHLD2hl/nfYP1MfAj3KWg/lh5M0G+F9pWkpBdqC&#xA;EmeSWZlrsePqu/E07jKZ6mUhRLMYwGWxJxWh698xibbAtnurW3ANxMkINaGRgoNOvUjK55Ix5kBn&#xA;HHKXIEvDtVOkeZPz40q9speenWUUc1zeOjxxetal3VVdwobfhuNsz46qEMBBIv3hq/LzlPYH5M8/&#xA;No+XNR8g6rFeTJM0UfrWawFZJfrK7RcFFTux4t/kk5iabVwExUo/NtyaadbxPyRn5VfXYvIejWmo&#xA;mNNQgtgJIEYMyR8j6QcdVYR8eQ7HGeeGSZMSD7keFKAFghmkH2T88rkyiqZFk7FXYq7FXYq5jRSf&#xA;DEKULlrS7FWCfnbq9zpn5c6k1uxSW69O05jskzgSf8EnJfpzK0cBLILa8pqLxbzL5Nk0z8nvL2qo&#xA;p53l29zemm9LhKW5/wBURxfe3vmxx5uLNIeTRKNRBfRPki4S48maFMn2X0+1NPA+itR9BzU5hUz7&#xA;y5MOQTvKmTsVdir5+/PBLvzn5rtNE0I/WP0NBK15y5RwrNIyjiHI4s1AOn39cl+bx4Y3I8z8W/Ho&#xA;8uQ7D9T1L8q7PzJZeTbaw8w1e7tGaGGVmLGSAUKGpoaLUoK9gMHiCfqG1tc8fAeE70yz0Y/DDxFh&#xA;TvRj8PxOPEVp3ox+H4nHiK04RRg1AwcRWko83Xl1a6NIbdTykIjeRf2EatT/AA+nNX2vmnDAeHrt&#xA;7h+NnZ9k4YTzji6b+8/jd5lHMHZ1AI4GhrnEvbU9D8hLeroZ+sGsJmc2gPUR7bfLnypnZdicfger&#xA;lZr3f228d23weP6edC/f/ZTJM27p3Yq7FXYqkvmPy4NaFv8A6R6Bg50PDnXnT3X+XNfr9B+Yrfh4&#xA;b6Xzc/Q67wL2u2N6d5Dku7VZ5Lv0GYsPT9PnsrFa15L1pXNVj7E443x18P2u0yds8Mq4b+P7FW6/&#xA;L54baWZL71GjUsEMXGtBWleZp92Sn2Hwgnj5eX7WMO2uIgcHPz/Ym3lby1+jG+uG4MjXESj0ynHj&#xA;yo3Xk1czuz+zvBPFxXY7nC1+v8YcNVR72UQHcj6c2cnXRVcgzdirsVdirsVak+wflhHNB5IbLGpr&#xA;FXmv5/zWp/Li5Beshubf0UT4izc9xQeCcjmRo8sY5Ltjlxkx5Mgl0ry15m8gDRba7jn0ue0jt7e4&#xA;Qg8DEq+m1OzIyg0PyyuOfhnxXvbI4yRVMf8AyR81adceVofL086x6xo7y20sEhCtIiyMUkiBPxKF&#xA;YLUdx8snqpRM+IHYsccTVU9Lyhkk3mnzXpflyw+tXzVkeot7ZaepKw6hR4Cu57ZXlyiAsuVpNJPP&#xA;Phi8Q8z/AJjeY9baQPObSx3pZwEqvHwdhu/07e2anLqZz8g9dpezMWEXXFLvP42Q3+EdYl02G502&#xA;7USX6cbZ0LIyGWMkFiPs+HXrmPhyxGQcQ5SH3s9VPixTA58JfRMVbe3ihZ2meNFVpX+0xUU5N7nO&#xA;kAt4Ml31qnh9+S4EcTvrXy+/HgXicLmvQA48C8SsjhxUfSMgRTIFTvADaTgqHBjb4WFQdjsRlWYe&#xA;g+5swn1j3vIVUCrU4s1CwBqKgAd/lnnZL6IHovlS4ih8tQSTuI40Mg5NsP7w52vY1nTR+P3vE9tS&#xA;EdRIny+5NI9V02RDIlzHwBCliwABO4G/jm0oupGaBF2EUGDAFTUHoRgbFsrlUJHXtXCBa2k2qanr&#xA;1vIgsrSO6RhVmrxoa9KFsw9XPPAjw48YczS48MweOXCUPbax5qlnSOXTo4Y2IDylq8R3NOW+UYs2&#xA;qlIA4xEd9/tbsmHTRiSJknu/ATGOeS0+qWygSCWT0hsQacWdm6noFzP4fDAAcInjJKPnXnDIv8yk&#xA;feMMxYIYQNEFTsG5WUB/yFH3CmRwn0D3M8w9Z96JUkEEdssLWCiQQQCO+VNrsVdirsVdirmFVI8R&#xA;iFKFy1pUrm3S4tpbeSoSZGjcjY0YUNPvyGSAnExPIimeOZjISHMG2J/4E006j6Amm+riLm268+Za&#xA;g340pT2zS/yNi4+G5VXl+p3P8r5eDiqN35/rRX/KvdF/39c/8FH/AM0ZZ/IeHvl9n6mv+WsvdH7f&#xA;1oe18jab9fnR5pikJjaGhUEgip5fCa7jtTIQ7HxcZFy2ru/Uzn2tl4Aajvf45svzeOkfMv5+6zeH&#xA;8xWijmZVsbWGONew5j1W26b8xXNrptNDJhqYsEtQ1OTFk4oGiEr/ACi1i31f8wtO0vV4YprSUycQ&#xA;RQNLHGzoHBJVgSvSm+a3N2XigTKN7dHbfy7nnDhNb9Rze9+a9HWAK9pEsUDKoRYwFVXToABsKgZz&#xA;vaeDhlxDkfvdl2XqeOPDI+ofcnlpqIv9PS7UcGdfiX+Vl+Fh94zfaPKMkBLvdBq8JxTMe5A6lqFp&#xA;p1hc6heP6draxtNPJQmiIOTGg3PTM9xHjehfnxqWp+brLTnht4NJurn0vWdHWXg7uIwaNIASGQHa&#xA;lQegO1hhsl7apIYEdcqKptb/ALX0ZizbQrZBL4nv/MnmOzurq3XUbmNIZJE9MStReLEUG+1Kds3B&#xA;7L0svUccL/qhxR2jqI+kZJ17y+kPINjcXv5Q6BWflL6RuZZZmNWLvIzVY+79TmskBGRAFBGpjLJj&#xA;snfnuoyrcWrPEsiSKwo4VgwIBqKMNu2SdQQY7IjStcu7J/3DkpUepA3T7u3zGAxbMOeUOTOGvbad&#xA;PhcfDQSrX7LMoPE+9DkYh3QmCFJlg2HJQOtD7/Tlm6NmljiLCjKT4D/bxtaDUY9XWYx2toWkP+tK&#xA;wVfwVsxZ7zA7g5MdoHzKa5JrQunbWaL/ACll+5iMqwfQG7P9RRWWtKpC1Dx7HpkZBnEq2QZuxV2K&#xA;uxV2KoeRaOfvGWAtRG63ChC245Xl0/YcEH0LU/8AEsph9cj7m6f0RHvRWXNKFA46kfCSL8Ub/m7K&#xA;eWT3hu54/cUVlzS+X/OekS+afzzu9LjBIubyGGUgbrFDCiytt/KkZObvDPgwA+TiSFzpKvNnla5/&#xA;Lb8yIbm3BayiuI7/AEtv5oRJyMbHxWhQ+I375HT1kgfkmfpL6wZbe6t6MBJBKoPsQdwc0k4CQMTy&#xA;c2EzEgjmlkFqbW2lgpRUduFaVKk1B2x0WMwjw9xPyZ6zIJy4u8C/elmuaXHq2jX2mSHil7BJAW8P&#xA;UUrX6K1zYFwxzeMeV/J+n3/mSz097eNPqMwll4qvJRbMGK16/EwCn55zegy5jqKJPW3o9dDEMFgD&#xA;pT3YdRnSPNptb/tfRmJNuCtkEviX8wbM2Xm7zBa0oIr65Cjp8BlYrt/q50UJXiB8nVyFTPvfSn5F&#xA;6rDe/lLphoZWs0ntp4upJjkchfpjZc0mcVMufA+hj8PmixlnkaSH6rHyJjQlpRQ9BUAHbLDjLo5V&#xA;dgJ35bubLUtWW5Cepa2zKLluJVB6tVj2/wBemQkCA3aeHFKyNgzOzsItPE0alpPWmkmZqEmrmu/X&#xA;oNq4AbdpDGIWO8qrFKn7f0A0/VhZrowtajlt/MCMBUNaSOc99cfzyiJP9WFQP+JlsxY7yJ8/ucie&#xA;0QPL70yybWh7MUEy+Er/AInl/HKsXX3lty9PcERlrU5TQg4lIRWVNrsVdirsVdiqyZKrUdRkoljI&#xA;KGTa0PZj4JH/AJ5XP0A8R/xHKsXInvJbcvMDyCIy1qQ84pc2z+7J/wAEtf8AjXKp/VEtsPpIUdc1&#xA;JdL0XUNTYclsbaa5K+IhjL02/wBXL4R4pAd7STQeU/kD5cmuk1DzxqtZtR1KaSO2mfc8OVZpB/ry&#xA;fD7cffM/XZKqA5Bpwx6lH/8AORulG68j299HEHk0+8jd5afEkMqtGwB8GkMdch2fKp13hOcbM88m&#xA;30V/5T0a8i+xNZQNTwPpjkPoO2YuWNTI822JsBG3nR/lksbGTzjWPOF5LO0ent6MC7CSgLt779Bm&#xA;TTr8mc3sxmwElhfvf20jJcPX4tj9rr1G9ffMPDoMePIZjmXJz9qZcmMQNbfazjyz5nkvZ1sryhuG&#xA;P7qUCgbvRgNgcyy1Yc1mizu3/a+jMSbnBWyCXyh+avl+XUPza8wabajlK8T3SKBQs0eni6K/Txpm&#xA;7wzrAD+OdOvyRvIR+OT0f/nFi5Z/JOp25NRDqTMoruA8EXbwqua7Vj1D3OVg5Mu8++VbOYx6ijSL&#xA;KzCMJyBhRiCeXplT147gEAn6c1+p1xwRB4eIXXOm/D2ZHUTI4uE13WkGmXMOm2k1jZQyLcXQeK5k&#xA;aQFZOalF/dhF48CarQ5qj7QmUq8P/ZfsdmPZsRgaycxv6f2vS2kNSSp8Sain4nOhAdQSpcov99/i&#xA;v9ckxXepFHC8pHFFBZunRRXscjI0LLKIvkqaNE0el24cUkdfUkH+XIS7fi2Y2IekN+U+oo3JtahA&#xA;KT3A8XDfegH8MrhzPv8A0Nk+Q/HVXyxrbQVYDEpCJyptdirsVdiqG1G6ntbR54LOa/lWnG1tzCsj&#xA;VIB4meSCPbqauMIVJ/8AE+t/9Sjq3/I3Sf8Asvw8I7/vRai3mHXK/D5R1an/ABl0n/svyYrvYGKl&#xA;b67r8cKIfKWq8gPiIl0qle//AB/ZGAAAFsp7klU/xDr3/Uo6r/yN0r/suyW3ex4Spza7r7hKeUtV&#xA;qrq28uldjv8A8f3hkZAHqyjslnm6+83ap5W1XTNP8p6gt5f2sttE1xNpixD1kKEsUvWbYMegy3HI&#xA;RkDfJrlAkLPJdx5n0Xyrpmk3Xk6/juLKBYZRb3GmSRM6j4nVnvI2+M/Efh74csxKRN81jAgUmOp3&#xA;2o6pp1xp195N1Wa0uo2injMulbqwod/r+x8DkYy4TYKTC2NflePzD8ueV4tE1zypdytaO4tJrS50&#xA;6SsTsX4v6l1FurMRt2yzPkjOXECxhAgUyqXW9eY1HlLVa9/3ulf9l2QEgOqTAoN57+Ry7+SL5nY1&#xA;ZmbSCSfcm9yXiDvYnD5Led5/1I179+j/APZbj4g70eCO4KkN5qkDFoPJWoRMRQsj6Qpp9F7j4g70&#xA;jFXIIuPXdeQf8olqtT1/e6V/2XZAyB6sxErn8w+YQjFPKGqM4B4q02lKCewJF8afdg2708JeXWeg&#xA;fml/ysLVPO195MaS4mt/R03TUv7H01JjWE+tKZa09NT9lNyewzLOoj4YgC0DDLi4kd+S/lfzl5G0&#xA;fUbbU/LN9Nc3tyJUW1n0141jVAqjlJdxNyrWu3hlWfLGZ2LLHiMQzvUtX166s3tz5N1OUSbFWuNK&#xA;SneoYXr7g9NswtRjE4GOxv3j9BcrBIwmJcq+P6Qxa20rzWmpQXMnlTUPSicOwE+mFjxNRt9cAzTY&#xA;eyZRyxkTGgb6/wDEu4y9qRljMQDZHl+tkOoa15z9Jf0f5Qvml5fF9Yn0wLxp24XpNa50sJQvc/Z/&#xA;Y8+YFCR61+YvH955Nn5f5Nzp9Pxu8xs+TIJfu+Ex/pWD9gLkYseLh9fEJeVH9S261P8AMG4tpLc+&#xA;T7pVlUoxFzp1aHY/8ffhmNOWokCP3e/nL/iW+EdPEg+vbyj+tH2vmPz36yi58mXYt6bmK507kPkG&#xA;u6H7xmTgvhPiECXSrI+2nHzRjY4Lrz/Yj/8AEOvf9Sjqv/I3Sv8Asuye3e18JWLruviZ3/wlqvFg&#xA;op62ldRWv/H98siALJtkeQC//EOvf9Sjqv8AyN0r/suyW3ex4Svj8x64pqfKOre373Sf+y/Aa70g&#xA;Uqf4n1v/AKlHVv8AkbpP/ZfkeEd7K010u+ur22Mtzp1xpkgYqLe6a3ZyAAeYNtLcJQ1p9qvtgISj&#xA;MCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:3E628861AA75EA118DD8FCA61EEE42A0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3E628861AA75EA118DD8FCA61EEE42A0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:8944f40b-7c8b-5441-b522-4cfbe90cb19e</stRef:instanceID>
            <stRef:documentID>xmp.did:F87F117407206811822AB2A6B75D99AD</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8944f40b-7c8b-5441-b522-4cfbe90cb19e</stEvt:instanceID>
                  <stEvt:when>2020-03-21T16:53:22+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3E628861AA75EA118DD8FCA61EEE42A0</stEvt:instanceID>
                  <stEvt:when>2020-04-03T15:55:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2848.000000</stDim:w>
            <stDim:h>1780.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1780 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1780 li
2848 1780 li
2848 0 li
cp
clp
0 0 mo
0 1780 li
2848 1780 li
2848 0 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
311.873 1574.59 mo
311.873 1574.59 15.4702 1256.35 261.746 911.807 cv
480.259 606.105 735.021 627.003 921.938 751.059 cv
1001.55 803.896 1231.07 757.57 1426.43 446.509 cv
1692.84 22.3047 2616.31 279.585 2447.93 932.233 cv
2366.45 1248.07 2695.92 1259.55 2528.04 1575.26 cv
311.873 1574.59 li
cp
.941176 .976471 1 rgb
f
1818.64 1424.14 mo
1818.64 1424.14 1842.55 1396.24 1820.11 1378.51 cv
1820.11 1378.51 1803.72 1368.59 1790.35 1369.4 cv
1790.35 1369.4 1809.29 1401.16 1803.17 1404.31 cv
1797.04 1407.47 1784.61 1367.4 1784.61 1367.4 cv
1784.61 1367.4 1747.31 1363.79 1735.31 1369.55 cv
1735.31 1369.55 1767.2 1395.65 1760.48 1397.21 cv
1753.76 1398.76 1719.32 1373.14 1719.32 1373.14 cv
1719.32 1373.14 1684.6 1379.05 1686.45 1400.23 cv
1688.3 1421.41 1700.26 1427.95 1705.52 1427.39 cv
1710.78 1426.83 1741.54 1415.09 1742.21 1419.39 cv
1742.88 1423.7 1724.36 1437.78 1711.4 1438.44 cv
1711.4 1438.44 1735.88 1465.44 1752.15 1457.65 cv
1768.41 1449.85 1769.8 1437.5 1779.94 1432.87 cv
1790.09 1428.24 1798.74 1428.25 1794.55 1432.98 cv
1790.37 1437.7 1772.02 1442.29 1766.22 1452.55 cv
1760.42 1462.81 1755.21 1469.73 1772.04 1467.19 cv
1788.88 1464.66 1816.24 1452.35 1817.44 1438.24 cv
1818.64 1424.14 1818.64 1424.14 1818.64 1424.14 cv
cp
.34902 .615686 .678431 rgb
f
1703.51 1400.8 mo
1703.51 1400.8 1797.81 1397.17 1818.64 1424.14 cv
1818.64 1424.14 1823.24 1437.93 1837.42 1450.5 cv
1839.63 1456.51 li
1839.63 1456.51 1823.28 1439.29 1817.44 1438.24 cv
1817.44 1438.24 1826.58 1404.83 1703.51 1400.8 cv
cp
f
1837.42 1450.5 mo
1837.42 1450.5 1857.66 1465.46 1859.06 1492.21 cv
1855.39 1492.54 li
1855.39 1492.54 1848.92 1464.88 1837.24 1454.07 cv
1825.55 1443.25 1837.42 1450.5 1837.42 1450.5 cv
cp
f
1902.26 1389.05 mo
1902.26 1389.05 1864.21 1367.74 1881.97 1338.83 cv
1881.97 1338.83 1896.17 1321.07 1911.39 1316.51 cv
1911.39 1316.51 1903.27 1359.63 1911.39 1360.64 cv
1919.51 1361.66 1916.97 1311.94 1916.97 1311.94 cv
1916.97 1311.94 1957.05 1292.67 1972.77 1294.19 cv
1972.77 1294.19 1947.92 1336.29 1956.03 1335.28 cv
1964.15 1334.26 1992.05 1291.65 1992.05 1291.65 cv
1992.05 1291.65 2033.14 1284.04 2039.73 1308.39 cv
2046.33 1332.74 2035.67 1344.92 2029.59 1346.44 cv
2023.5 1347.96 1984.44 1347.45 1985.45 1352.52 cv
1986.47 1357.6 2012.85 1365.71 2027.56 1361.15 cv
2027.56 1361.15 2011.33 1401.22 1990.02 1399.19 cv
1968.71 1397.17 1962.12 1383.98 1948.93 1382.96 cv
1935.74 1381.95 1926.1 1385.5 1932.7 1389.05 cv
1939.29 1392.6 1961.61 1390.21 1972.27 1399.27 cv
1982.92 1408.33 1991.54 1413.91 1971.76 1417.96 cv
1951.97 1422.02 1916.46 1419.49 1909.36 1404.27 cv
1902.26 1389.05 1902.26 1389.05 1902.26 1389.05 cv
cp
.419608 .717647 .74902 rgb
f
2020.96 1316 mo
2020.96 1316 1914.44 1350.5 1902.26 1389.05 cv
1902.26 1389.05 1902.77 1406.3 1892.12 1426.08 cv
1892.12 1433.69 li
1892.12 1433.69 1903.27 1407.82 1909.36 1404.27 cv
1909.36 1404.27 1885.52 1370.79 2020.96 1316 cv
cp
f
1892.12 1426.08 mo
1892.12 1426.08 1875.69 1451.03 1885.05 1481.4 cv
1889.28 1480.26 li
1889.28 1480.26 1885.18 1446.81 1893.77 1429.99 cv
1902.37 1413.17 1892.12 1426.08 1892.12 1426.08 cv
cp
f
1841.73 1359.67 mo
1841.73 1359.67 1891.88 1331.58 1868.48 1293.46 cv
1868.48 1293.46 1849.76 1270.06 1829.7 1264.04 cv
1829.7 1264.04 1840.39 1320.88 1829.7 1322.22 cv
1819 1323.56 1822.34 1258.02 1822.34 1258.02 cv
1822.34 1258.02 1769.51 1232.61 1748.78 1234.62 cv
1748.78 1234.62 1781.55 1290.12 1770.85 1288.78 cv
1760.15 1287.45 1723.37 1231.28 1723.37 1231.28 cv
1723.37 1231.28 1669.21 1221.25 1660.52 1253.34 cv
1651.82 1285.44 1665.87 1301.49 1673.89 1303.5 cv
1681.91 1305.5 1733.4 1304.83 1732.07 1311.52 cv
1730.73 1318.21 1695.96 1328.91 1676.56 1322.89 cv
1676.56 1322.89 1697.96 1375.71 1726.05 1373.04 cv
1754.13 1370.36 1762.83 1352.98 1780.21 1351.64 cv
1797.6 1350.3 1810.3 1354.99 1801.61 1359.67 cv
1792.92 1364.35 1763.5 1361.2 1749.45 1373.14 cv
1735.41 1385.08 1724.04 1392.43 1750.12 1397.78 cv
1776.2 1403.13 1823.01 1399.79 1832.37 1379.73 cv
1841.73 1359.67 1841.73 1359.67 1841.73 1359.67 cv
cp
.52549 .819608 .803922 rgb
f
1685.26 1263.37 mo
1685.26 1263.37 1825.68 1308.84 1841.73 1359.67 cv
1841.73 1359.67 1841.06 1382.4 1855.11 1408.48 cv
1855.11 1418.51 li
1855.11 1418.51 1840.39 1384.41 1832.37 1379.73 cv
1832.37 1379.73 1863.8 1335.59 1685.26 1263.37 cv
cp
.419608 .717647 .74902 rgb
f
1855.11 1408.48 mo
1855.11 1408.48 1876.76 1441.37 1864.42 1481.4 cv
1858.84 1479.9 li
1858.84 1479.9 1864.25 1435.81 1852.92 1413.63 cv
1841.59 1391.46 1855.11 1408.48 1855.11 1408.48 cv
cp
f
1844.42 1568.21 mo
1898.67 1568.21 1942.66 1524.22 1942.66 1469.96 cv
1746.18 1469.96 li
1746.18 1524.22 1790.16 1568.21 1844.42 1568.21 cv
cp
.933333 .596078 .286275 rgb
f
1868.59 1567.45 mo
1864.6 1567.95 1860.52 1568.21 1856.39 1568.21 cv
1802.13 1568.21 1758.15 1524.22 1758.15 1469.96 cv
1782.56 1469.96 li
1782.56 1520.09 1820.09 1561.44 1868.59 1567.45 cv
cp
.952941 .694118 .458824 rgb
f
1944.01 1573.2 mo
1744.82 1573.2 li
1744.82 1573.2 li
1744.82 1566.51 1750.25 1561.08 1756.94 1561.08 cv
1931.89 1561.08 li
1938.59 1561.08 1944.01 1566.51 1944.01 1573.2 cv
1944.01 1573.2 li
cp
.933333 .596078 .286275 rgb
f
1944.89 1472.98 mo
1742.95 1472.98 li
1742.95 1469.96 li
1944.89 1469.96 li
1944.89 1472.98 li
cp
f
500.125 613.649 mo
499.846 612.116 496.244 595.693 470.838 598.495 cv
470.838 598.495 483.484 598.173 486.426 603.326 cv
486.426 603.326 476.98 597.802 470.402 600.975 cv
463.824 604.146 461.528 616.812 462.064 620.791 cv
462.6 624.768 468.289 637.018 472.822 637.472 cv
474.539 637.644 476.432 637.257 478.121 636.71 cv
477.222 638.695 476.371 640.866 475.605 643.263 cv
468.524 665.436 481.864 684.163 490.08 680.688 cv
495.35 678.459 498.256 687.581 498.256 687.581 cv
545.216 636.777 li
545.216 636.777 519.8 599.172 500.125 613.649 cv
cp
.172549 .227451 .392157 rgb
f
561.303 1225.52 mo
549.881 1229.77 li
549.881 1229.77 500.273 1160.97 494.166 1100.43 cv
493.074 1089.63 493.438 1079.15 495.798 1069.48 cv
495.798 1069.48 495.313 1066.71 494.464 1061.82 cv
494.071 1059.53 493.588 1056.78 493.037 1053.63 cv
491.424 1044.39 489.204 1031.75 486.668 1017.35 cv
480.831 984.22 473.27 941.868 467.395 910.733 cv
470.472 909.745 li
503.77 899.004 li
510.651 877.147 li
535.445 870.62 li
535.445 870.62 540.984 881.455 545.936 932.637 cv
546.85 939.351 547.679 946.754 548.305 954.782 cv
550.233 979.287 550.374 1009.69 545.944 1044.44 cv
544.807 1053.33 543.371 1062.52 541.59 1071.96 cv
540.285 1078.87 540.089 1088.3 540.639 1099.13 cv
543.138 1148.61 561.303 1225.52 561.303 1225.52 cv
cp
.168627 .278431 .545098 rgb
f
548.305 954.782 mo
494.464 1061.82 li
494.071 1059.53 493.588 1056.78 493.037 1053.63 cv
491.424 1044.39 489.204 1031.75 486.668 1017.35 cv
480.831 984.22 473.27 941.868 467.395 910.733 cv
470.472 909.745 li
503.77 899.004 li
510.651 877.147 li
535.445 870.62 li
535.445 870.62 540.984 881.455 545.936 932.637 cv
546.85 939.351 547.679 946.754 548.305 954.782 cv
cp
.137255 .219608 .384314 rgb
f
524.618 884.355 mo
523.372 873.667 li
502.491 879.214 446.699 858.169 446.699 858.169 cv
446.699 858.169 426.471 875.951 429.127 918.574 cv
430.423 939.379 432.791 1027.78 435.264 1053.94 cv
436.158 1063.42 436.94 1070.17 437.26 1072.87 cv
437.268 1072.88 437.268 1072.89 437.268 1072.89 cv
437.365 1073.71 437.078 1074.49 436.66 1075.21 cv
433.019 1081.39 430.004 1087.82 427.531 1094.41 cv
403.257 1159.09 431.271 1238.75 431.271 1238.75 cv
438.539 1235.82 li
438.539 1235.82 454.48 1147.17 467.435 1108.01 cv
469.633 1101.36 471.74 1096.14 473.672 1093.02 cv
479.303 1083.93 484.53 1069.08 489.274 1051.42 cv
498.24 1018.02 505.457 974.576 510.26 941.043 cv
510.922 941.073 524.618 884.355 524.618 884.355 cv
cp
.168627 .278431 .545098 rgb
f
531.427 796.584 mo
531.594 797.145 531.754 797.699 532.001 798.268 cv
540.157 821.257 554.69 845.396 564.603 854.206 cv
571.108 860.03 588.988 866.068 604.197 870.391 cv
614.289 873.349 623.3 875.499 626.994 876.428 cv
628.17 876.729 628.852 876.849 628.852 876.849 cv
632.237 866.837 li
632.237 866.837 624.342 861.9 614.71 855.422 cv
601.332 846.331 584.606 834.362 581.401 829.219 cv
573.987 817.257 569.071 780.707 562.713 756.027 cv
562.398 754.698 562.071 753.409 561.744 752.141 cv
561.503 751.211 561.256 750.296 561.01 749.395 cv
560.955 749.215 560.916 748.94 560.781 748.74 cv
560.435 747.711 560.168 746.783 559.881 745.941 cv
559.894 745.861 559.82 745.761 559.754 745.655 cv
558.472 741.56 555.465 735.835 555.465 735.835 cv
553.608 732.957 551.584 731.535 549.388 732.021 cv
549.388 732.021 546.408 732.924 542.574 735.563 cv
541.767 736.11 540.925 736.737 540.063 737.452 cv
539.481 737.785 539.048 738.234 538.613 738.688 cv
535.581 741.387 532.448 745.126 530.051 750.143 cv
528.228 753.936 526.798 758.425 526.09 763.828 cv
524.854 772.652 527.212 784.408 531.427 796.584 cv
cp
1 .698039 .490196 rgb
f
542.747 754.636 mo
536.696 758.585 529.159 761.771 519.757 763.663 cv
484.512 770.766 471.927 740.793 467.459 720.336 cv
472.312 717.738 476.822 717.262 479.426 717.025 cv
481.966 716.798 484.633 716.675 486.841 716.627 cv
490.856 713.727 497.063 701.566 498.898 682.465 cv
500.533 682.953 li
527.918 691.284 li
527.918 691.284 526.405 700.021 525.553 708.296 cv
524.891 714.771 524.641 720.969 525.826 722.521 cv
527.967 723.049 529.251 723.39 529.251 723.39 cv
529.251 723.39 529.253 723.399 529.265 723.417 cv
529.618 724.034 537.252 737.427 542.747 754.636 cv
cp
f
527.919 691.289 mo
527.919 691.289 526.402 700.019 525.555 708.3 cv
509.963 706.294 503.127 691.204 500.533 682.959 cv
527.919 691.289 li
cp
.929412 .596078 .372549 rgb
f
532.354 699.655 mo
532.354 699.655 495.302 696.563 497.583 673.517 cv
499.865 650.472 496.619 634.552 520.374 635.552 cv
544.127 636.554 547.847 645.801 548.956 653.679 cv
550.065 661.556 542.052 699.867 532.354 699.655 cv
cp
1 .698039 .490196 rgb
f
561.744 752.141 mo
561.503 751.211 561.256 750.296 561.01 749.395 cv
560.955 749.215 560.916 748.94 560.781 748.74 cv
560.435 747.711 560.168 746.783 559.881 745.941 cv
559.894 745.861 559.82 745.761 559.754 745.655 cv
558.472 741.56 555.465 735.835 555.465 735.835 cv
554.121 733.751 552.767 731.917 551.288 731.246 cv
550.124 730.517 543.687 726.771 529.251 723.39 cv
529.251 723.39 529.253 723.399 529.265 723.417 cv
529.634 724.267 539.502 746.759 537.866 752.103 cv
536.204 757.535 488.412 747.709 485.386 744.323 cv
482.965 741.603 480.602 725.712 479.759 719.511 cv
479.544 717.969 479.426 717.025 479.426 717.025 cv
479.426 717.025 462.142 717.188 453.168 722.429 cv
453.168 722.429 458.119 730.059 460.813 738.873 cv
461.066 739.712 461.302 740.555 461.51 741.4 cv
461.958 743.191 462.276 745.001 462.433 746.788 cv
462.635 749.152 461.727 751.403 460.094 753.714 cv
458.609 755.832 456.495 758.014 454.086 760.371 cv
452.51 761.9 450.811 763.512 449.065 765.245 cv
449.064 765.245 449.064 765.246 449.064 765.247 cv
450.439 775.886 453.723 793.235 454.46 812.148 cv
454.646 816.945 453.734 821.694 451.843 826.059 cv
451.096 827.797 450.19 829.474 449.141 831.068 cv
440.758 843.751 426.253 868.715 432.178 882.082 cv
434.372 895.182 547.713 896.36 543.248 882.271 cv
543.248 882.271 548.252 799.582 554.437 778.896 cv
554.657 778.14 554.853 777.404 555.016 776.655 cv
556.744 768.793 555.24 761.193 553.315 754.426 cv
556.293 753.193 559.497 752.505 561.744 752.141 cv
cp
1 .596078 .262745 rgb
f
549.139 640.757 mo
544.114 633.252 539.641 634.342 537.011 636.184 cv
517.904 623.042 503.23 638.173 503.23 638.173 cv
499.101 654.459 486.229 662.736 486.229 662.736 cv
486.229 662.736 492.555 667.576 508.499 665.136 cv
513.369 664.391 517.946 661.439 521.959 657.707 cv
514.613 667.622 505.291 674.362 505.291 674.362 cv
524.717 667.638 534.758 642.561 535.773 639.904 cv
537.829 642.159 541.84 647.01 542.765 651.464 cv
544.021 657.517 543.641 669.678 547.202 669.621 cv
547.202 669.621 556.673 652.01 549.139 640.757 cv
cp
.172549 .227451 .392157 rgb
f
509.488 859.631 mo
487.595 862.572 465.789 842.559 451.843 826.059 cv
453.734 821.694 454.646 816.945 454.46 812.148 cv
453.723 793.235 450.439 775.886 449.064 765.247 cv
449.064 765.246 449.064 765.245 449.065 765.245 cv
450.811 763.512 452.51 761.9 454.086 760.371 cv
456.495 758.014 458.609 755.832 460.094 753.714 cv
482.387 781.373 539.175 855.642 509.488 859.631 cv
cp
.929412 .490196 .168627 rgb
f
663.313 881.452 mo
658.395 882.874 650.996 888.977 640.949 883.56 cv
633.757 879.742 626.021 876.751 622.256 875.341 cv
620.753 874.866 619.9 874.544 619.9 874.544 cv
625.508 862.888 li
625.508 862.888 625.646 862.979 626.002 863.095 cv
628.641 864 642.054 868.552 648.668 867.849 cv
656.111 867.021 667.232 877.165 667.232 877.165 cv
667.232 877.165 668.222 880.103 663.313 881.452 cv
cp
1 .698039 .490196 rgb
f
473.533 1244.69 mo
416.009 1244.69 li
416.009 1244.69 414.63 1235.92 417.635 1229.27 cv
420.514 1222.89 425.023 1219.99 423.943 1212.27 cv
427.599 1216.03 433.556 1220.25 441.872 1219.13 cv
442.892 1220.78 448.45 1229.62 451.854 1232.07 cv
455.613 1234.77 472.375 1233.8 473.533 1244.69 cv
cp
.137255 .219608 .384314 rgb
f
597.046 1244.69 mo
539.521 1244.69 li
539.521 1244.69 537.37 1235.52 541.146 1229.27 cv
544.49 1223.75 543.209 1220.6 540.733 1216.03 cv
543.339 1217.1 546.71 1218.07 550.422 1217.86 cv
553.288 1217.69 556.318 1216.39 558.976 1214.85 cv
561.453 1217.67 572.054 1229.69 575.366 1232.07 cv
579.125 1234.77 595.888 1233.8 597.046 1244.69 cv
cp
f
523.519 686.328 mo
523.519 686.328 524.036 689.379 531.544 689.386 cv
531.544 689.386 537.847 689.393 537.863 686.077 cv
537.863 686.077 531.923 683.343 523.519 686.328 cv
cp
1 1 1 rgb
f
585.398 867.173 mo
585.398 867.173 590.332 866.99 593.901 865.083 cv
597.469 863.176 609.126 866.239 607.999 867.788 cv
606.872 869.337 600.342 867.432 599.731 868.31 cv
599.121 869.189 596.736 870.307 596.736 870.307 cv
585.398 867.173 li
cp
1 .698039 .490196 rgb
f
881.842 1046.28 mo
654.199 1046.28 li
621.529 1046.28 595.045 1019.8 595.045 987.127 cv
595.045 759.485 li
595.045 726.815 621.529 700.331 654.199 700.331 cv
881.842 700.331 li
914.512 700.331 940.996 726.815 940.996 759.485 cv
940.996 987.127 li
940.996 1019.8 914.512 1046.28 881.842 1046.28 cv
cp
.890196 .941176 1 rgb
f
896.192 785.484 mo
896.192 954.413 li
896.192 959.43 895.35 964.253 893.801 968.748 cv
888.479 984.151 874.834 995.661 858.242 997.909 cv
856.3 998.174 854.31 998.311 852.295 998.311 cv
683.365 998.311 li
664.327 998.311 648.129 986.198 642.045 969.262 cv
640.375 964.623 639.469 959.621 639.469 954.413 cv
639.469 785.484 li
639.469 761.244 659.117 741.586 683.365 741.586 cv
852.295 741.586 li
876.535 741.586 896.192 761.244 896.192 785.484 cv
cp
.823529 .894118 1 rgb
f
745.77 858.033 mo
745.77 858.033 744.914 884.477 741.53 896.324 cv
714.741 915.012 li
815.582 930.102 li
791.533 896.874 li
791.533 896.874 784.272 861.417 788.08 848.301 cv
791.888 835.185 745.77 858.033 745.77 858.033 cv
cp
1 .698039 .490196 rgb
f
745.623 861.685 mo
745.623 861.677 753.597 880.88 768.617 880.457 cv
783.638 880.034 787.056 863.05 787.056 863.05 cv
745.623 861.685 li
cp
.929412 .596078 .372549 rgb
f
736.657 846.143 mo
736.657 846.143 731.806 821.927 728.422 814.594 cv
725.037 807.26 722.216 774.539 759.731 772.847 cv
759.731 772.847 774.117 774.539 782.016 769.744 cv
782.016 769.744 782.016 774.539 780.041 776.231 cv
780.041 776.231 793.016 773.128 803.171 784.411 cv
813.326 795.694 796.403 835.185 797.249 844.493 cv
736.657 846.143 li
cp
.713726 .298039 .254902 rgb
f
766.896 873.039 mo
756.013 872.848 735.98 858.356 735.98 840.409 cv
735.98 812.405 li
735.98 805.852 740.55 800.489 746.135 800.489 cv
787.657 800.489 li
793.242 800.489 797.812 805.852 797.812 812.405 cv
797.812 838.825 li
797.812 857.643 779.378 873.26 766.896 873.039 cv
cp
1 .698039 .490196 rgb
f
735.98 827.357 mo
735.98 827.357 736.038 810.531 749.366 807.942 cv
762.693 805.355 792.522 816.145 796.753 803.874 cv
800.984 791.604 739.097 791.815 735.98 799.644 cv
732.864 807.471 735.98 827.357 735.98 827.357 cv
cp
.713726 .298039 .254902 rgb
f
830.149 904.327 mo
830.134 904.318 830.125 904.311 830.109 904.311 cv
827.291 903.267 825.814 903.146 825.814 903.146 cv
825.814 903.194 li
814.851 900.434 804.48 898.523 794.8 897.279 cv
793.7 897.135 792.608 897.006 791.533 896.878 cv
784.919 905.667 779.621 909.68 774.059 912.474 cv
772.822 913.092 771.579 913.653 770.302 914.191 cv
769.194 914.656 768.063 915.115 766.899 915.572 cv
765.438 915.371 764.01 915.002 762.613 914.496 cv
761.811 914.207 761.023 913.878 760.245 913.509 cv
749.586 908.477 741.526 896.646 741.526 896.324 cv
740.034 896.477 738.581 896.646 737.185 896.822 cv
724.59 898.395 716.025 900.73 712.318 901.887 cv
712.318 901.887 712.31 901.887 712.303 901.887 cv
711.523 901.982 684.064 905.764 642.045 969.262 cv
648.129 986.198 664.327 998.311 683.365 998.311 cv
852.295 998.311 li
854.31 998.311 856.3 998.174 858.242 997.909 cv
874.834 995.661 888.479 984.151 893.801 968.748 cv
861.967 920.452 839.203 907.674 830.149 904.327 cv
cp
.184314 .317647 .588235 rgb
f
742.935 889.877 mo
742.935 889.877 738.457 891.742 737.187 896.818 cv
737.187 896.818 755.147 915.294 766.899 915.575 cv
742.935 889.877 li
cp
.933333 .596078 .286275 rgb
f
766.899 915.575 mo
790.081 888.942 li
790.081 888.942 794.867 892.092 794.798 897.275 cv
794.798 897.275 776.866 916.28 766.899 915.575 cv
cp
f
777.27 998.311 mo
754.104 998.311 li
756.834 967.207 760.164 936.441 761.762 922.05 cv
762.091 919.127 762.341 916.88 762.509 915.443 cv
762.533 915.202 762.557 914.986 762.58 914.793 cv
762.597 914.688 762.604 914.584 762.613 914.496 cv
762.685 913.919 762.718 913.613 762.718 913.613 cv
765.037 913.573 li
768.688 913.509 li
768.697 913.509 li
770.246 913.485 li
770.246 913.485 770.271 913.726 770.302 914.191 cv
770.326 914.44 770.351 914.761 770.391 915.154 cv
770.415 915.451 770.439 915.796 770.471 916.174 cv
770.615 917.875 770.824 920.34 771.081 923.438 cv
772.341 938.464 774.837 968.387 777.27 998.311 cv
cp
f
758.089 906.128 mo
758.089 906.128 768.782 905.056 775.293 905.716 cv
776.584 905.847 777.304 907.26 776.674 908.395 cv
774.85 911.679 771.126 917.373 767.232 917.373 cv
761.762 917.373 753.238 906.505 758.089 906.128 cv
cp
.898039 .52549 .219608 rgb
f
619.216 879.537 mo
616.177 883.655 608.149 889.94 597.797 885.137 cv
590.388 881.757 582.487 879.234 578.644 878.055 cv
577.116 877.67 576.245 877.399 576.245 877.399 cv
581.143 865.428 li
581.143 865.428 581.285 865.51 581.648 865.604 cv
584.337 866.35 597.633 866.396 604.943 870.307 cv
613.406 874.834 622.79 874.694 619.216 879.537 cv
cp
1 .698039 .490196 rgb
f
585.877 867.131 mo
583.823 878.411 li
583.823 878.411 579.976 878.053 573.849 877.455 cv
572.01 877.269 570.956 877.102 570.956 877.102 cv
566.05 876.572 560.167 875.782 553.766 874.95 cv
553.678 874.955 li
542.688 873.308 530.364 871.254 519.904 868.69 cv
512.541 866.818 506.111 864.686 501.659 862.382 cv
501.204 862.161 500.841 861.931 500.38 861.623 cv
489.67 855.181 475.832 834.691 464.528 812.422 cv
462.96 809.349 461.475 806.266 460.004 803.271 cv
454.696 792.105 450.265 781.037 447.348 771.399 cv
445.544 765.659 444.221 760.396 443.666 756.018 cv
443.446 754.474 443.235 753.019 443.201 751.631 cv
443.137 750.837 443.088 750.058 443.054 749.302 cv
447.382 745.514 457.367 738.436 470.983 739.17 cv
471.269 739.656 471.548 740.146 471.832 740.646 cv
477.704 751.327 484.116 765.258 490.18 779.134 cv
493.533 786.737 496.792 794.35 500.003 801.359 cv
501.851 805.624 503.674 809.629 505.38 813.3 cv
508.679 820.3 511.596 825.947 514.07 829.461 cv
515.659 831.756 519.909 834.77 525.492 838.104 cv
535.192 843.94 549.236 850.789 561.427 856.323 cv
566.49 858.661 571.271 860.764 575.24 862.5 cv
581.647 865.328 585.877 867.131 585.877 867.131 cv
cp
f
471.804 740.685 mo
454.83 737.553 443.166 751.606 443.166 751.606 cv
441.21 726.657 453.324 722.167 453.324 722.167 cv
458.137 719.667 464.673 727.811 471.804 740.685 cv
cp
1 .596078 .262745 rgb
f
2358.2 1111.34 mo
2101.57 1111.34 li
2097.27 1111.34 2093.75 1107.83 2093.75 1103.53 cv
2093.75 1068.5 li
2093.75 1064.2 2097.27 1060.69 2101.57 1060.69 cv
2358.2 1060.69 li
2362.5 1060.69 2366.01 1064.2 2366.01 1068.5 cv
2366.01 1103.53 li
2366.01 1107.83 2362.5 1111.34 2358.2 1111.34 cv
cp
.933333 .596078 .286275 rgb
f
2159.73 1111.34 mo
2156.5 1140.98 li
2109.68 1570.04 li
2109.55 1571.54 2108.49 1572.67 2107.23 1572.67 cv
2104.83 1572.67 2102.96 1570.18 2103.21 1567.32 cv
2140.34 1127.94 li
2141.75 1111.34 li
2159.73 1111.34 li
cp
.937255 .796078 .670588 rgb
f
2159.73 1111.34 mo
2156.5 1140.98 li
2154.28 1129.17 2140.34 1127.94 2140.34 1127.94 cv
2141.75 1111.34 li
2159.73 1111.34 li
cp
.8 .627451 .498039 rgb
f
2352.54 1572.67 mo
2351.28 1572.67 2350.22 1571.54 2350.09 1570.04 cv
2303.27 1140.98 li
2301.25 1122.49 li
2300.04 1111.34 li
2318.02 1111.34 li
2319.42 1127.94 li
2320.53 1140.96 li
2356.56 1567.32 li
2356.81 1570.18 2354.94 1572.67 2352.54 1572.67 cv
cp
.937255 .796078 .670588 rgb
f
2320.53 1140.96 mo
2315.95 1126.84 2301.26 1122.5 2301.26 1122.5 cv
2301.26 1122.5 2301.26 1122.5 2301.25 1122.49 cv
2300.04 1111.34 li
2318.02 1111.34 li
2319.42 1127.94 li
2320.53 1140.96 li
cp
.8 .627451 .498039 rgb
f
613.354 1277.14 mo
353.602 1277.14 li
350.161 1277.14 347.348 1274.33 347.348 1270.89 cv
347.348 1250.95 li
347.348 1247.51 350.161 1244.69 353.602 1244.69 cv
613.354 1244.69 li
616.794 1244.69 619.608 1247.51 619.608 1250.95 cv
619.608 1270.89 li
619.608 1274.33 616.794 1277.14 613.354 1277.14 cv
cp
.933333 .596078 .286275 rgb
f
413.326 1277.14 mo
410.092 1296.13 li
363.272 1570.99 li
363.141 1571.94 362.085 1572.67 360.824 1572.67 cv
358.421 1572.67 356.549 1571.08 356.804 1569.24 cv
393.937 1287.77 li
395.343 1277.14 li
413.326 1277.14 li
cp
.937255 .796078 .670588 rgb
f
413.326 1277.14 mo
410.092 1296.13 li
407.871 1288.56 393.937 1287.77 393.937 1287.77 cv
395.343 1277.14 li
413.326 1277.14 li
cp
.8 .627451 .498039 rgb
f
606.132 1572.67 mo
604.871 1572.67 603.815 1571.94 603.685 1570.99 cv
556.863 1296.13 li
554.847 1284.28 li
553.631 1277.14 li
571.613 1277.14 li
573.02 1287.77 li
574.119 1296.12 li
610.152 1569.24 li
610.407 1571.08 608.535 1572.67 606.132 1572.67 cv
cp
.937255 .796078 .670588 rgb
f
574.119 1296.12 mo
569.544 1287.07 554.854 1284.29 554.854 1284.29 cv
554.854 1284.29 554.854 1284.29 554.847 1284.28 cv
553.631 1277.14 li
571.613 1277.14 li
573.02 1287.77 li
574.119 1296.12 li
cp
.8 .627451 .498039 rgb
f
1008.58 627.28 mo
778.541 627.28 li
745.528 627.28 718.766 600.518 718.766 567.504 cv
718.766 337.469 li
718.766 304.455 745.528 277.692 778.541 277.692 cv
1008.58 277.692 li
1041.59 277.692 1068.35 304.455 1068.35 337.469 cv
1068.35 567.504 li
1068.35 600.518 1041.59 627.28 1008.58 627.28 cv
cp
.890196 .941176 1 rgb
f
1023.08 363.74 mo
1023.08 534.45 li
1023.08 538.311 1022.58 542.06 1021.66 545.632 cv
1018.05 559.502 1007.91 570.73 994.711 575.828 cv
994.207 576.028 993.701 576.213 993.195 576.382 cv
988.65 577.955 983.787 578.806 978.715 578.806 cv
808.012 578.806 li
805.765 578.806 803.548 578.638 801.39 578.308 cv
787.568 576.245 775.833 567.801 769.274 556.065 cv
765.695 549.669 763.656 542.301 763.656 534.45 cv
763.656 363.74 li
763.656 339.243 783.515 319.384 808.012 319.384 cv
978.715 319.384 li
1003.22 319.384 1023.08 339.243 1023.08 363.74 cv
cp
.823529 .894118 1 rgb
f
878.849 427.729 mo
878.849 427.729 878.098 450.968 875.124 461.378 cv
851.582 477.801 li
940.198 491.062 li
919.064 461.862 li
919.064 461.862 912.685 430.704 916.031 419.178 cv
919.377 407.651 878.849 427.729 878.849 427.729 cv
cp
1 .698039 .490196 rgb
f
878.721 430.938 mo
878.721 430.932 885.728 447.808 898.927 447.436 cv
912.127 447.063 915.131 432.138 915.131 432.138 cv
878.721 430.938 li
cp
.929412 .596078 .372549 rgb
f
870.842 417.28 mo
870.842 417.28 866.578 396.001 863.604 389.556 cv
860.63 383.111 858.151 354.357 891.119 352.87 cv
891.119 352.87 903.76 354.357 910.701 350.143 cv
910.701 350.143 910.701 354.357 908.967 355.844 cv
908.967 355.844 920.367 353.118 929.292 363.033 cv
938.216 372.948 923.345 407.651 924.088 415.831 cv
870.842 417.28 li
cp
.172549 .227451 .392157 rgb
f
924.581 387.63 mo
924.581 410.85 li
924.581 414.729 923.689 418.46 922.184 421.889 cv
922.174 421.889 li
919.568 427.811 915.136 432.84 910.287 436.234 cv
905.984 439.256 901.361 440.987 897.414 440.918 cv
893.977 440.849 889.509 439.169 885.18 436.304 cv
879.354 432.442 873.805 426.442 871.44 419.378 cv
871.405 419.273 li
871.318 418.979 li
870.636 416.814 870.246 414.564 870.246 412.244 cv
870.246 387.63 li
870.246 381.872 874.264 377.163 879.172 377.163 cv
915.655 377.163 li
920.564 377.163 924.581 381.872 924.581 387.63 cv
cp
1 .698039 .490196 rgb
f
949.191 467.428 mo
949.191 467.428 928.383 462.946 919.064 461.862 cv
910.837 472.786 904.934 475.719 897.421 478.697 cv
885.316 477.027 875.124 461.724 875.124 461.378 cv
861.96 462.735 853.074 465.541 849.453 466.673 cv
849.453 466.673 849.445 466.673 849.438 466.673 cv
848.594 466.778 816.367 471.265 769.274 556.467 cv
775.833 568.202 787.568 576.646 801.39 578.709 cv
807.458 573.468 820.493 562.15 830.711 553.273 cv
830.599 556.139 830.575 558.73 830.64 560.994 cv
830.815 567.095 831.008 573.146 831.145 579.207 cv
959.627 579.207 li
959.378 576.133 959.178 573.163 959.033 570.33 cv
958.592 561.5 958.183 553.434 957.805 546.073 cv
957.797 546.009 957.797 545.944 957.789 545.88 cv
957.785 545.801 957.781 545.727 957.777 545.646 cv
957.787 545.655 957.795 545.663 957.805 545.672 cv
959.667 547.285 961.883 549.212 964.299 551.307 cv
964.78 551.724 965.27 552.149 965.768 552.582 cv
966.192 552.952 966.627 553.33 967.067 553.714 cv
967.67 554.229 968.28 554.758 968.891 555.296 cv
969.989 556.251 971.104 557.214 972.229 558.193 cv
972.742 558.643 973.265 559.092 973.778 559.542 cv
974.051 559.782 974.324 560.016 974.604 560.257 cv
974.918 560.529 975.238 560.803 975.552 561.082 cv
975.784 561.284 976.025 561.484 976.259 561.692 cv
976.813 562.167 977.358 562.648 977.903 563.121 cv
978.354 563.516 978.795 563.9 979.244 564.286 cv
979.613 564.606 979.99 564.928 980.36 565.249 cv
981.708 566.429 983.033 567.576 984.317 568.692 cv
984.83 569.134 985.336 569.576 985.842 570.009 cv
986.363 570.466 986.886 570.916 987.391 571.349 cv
987.744 571.662 988.098 571.968 988.451 572.271 cv
988.611 572.409 988.764 572.545 988.917 572.673 cv
989.454 573.139 989.968 573.597 990.474 574.022 cv
990.995 574.479 991.501 574.921 991.982 575.338 cv
992.184 575.516 992.384 575.684 992.576 575.852 cv
992.785 576.037 992.994 576.213 993.195 576.382 cv
993.701 576.213 994.207 576.028 994.711 575.828 cv
1007.91 570.73 1018.05 559.502 1021.66 545.632 cv
977.551 469.699 949.191 467.428 949.191 467.428 cv
cp
.976471 .592157 .27451 rgb
f
870.246 400.772 mo
870.246 400.772 870.297 385.986 882.009 383.712 cv
893.722 381.438 919.935 390.919 923.653 380.137 cv
927.371 369.354 872.984 369.54 870.246 376.418 cv
867.508 383.297 870.246 400.772 870.246 400.772 cv
cp
.172549 .227451 .392157 rgb
f
846.371 578.806 mo
831.145 578.806 li
831.008 572.745 830.815 566.693 830.64 560.593 cv
830.575 558.33 830.599 555.737 830.711 552.872 cv
830.735 552.229 830.76 551.579 830.791 550.913 cv
830.936 551.153 831.201 551.563 831.554 552.141 cv
833.826 555.851 840.038 566.196 846.371 578.806 cv
cp
.929412 .490196 .168627 rgb
f
910.287 426.001 mo
910.287 436.234 li
905.984 439.256 901.361 440.987 897.414 440.918 cv
893.977 440.849 889.509 439.169 885.18 436.304 cv
885.18 426.001 li
885.18 420.287 889.855 415.611 895.569 415.611 cv
899.897 415.611 li
905.612 415.611 910.287 420.287 910.287 426.001 cv
cp
.172549 .227451 .392157 rgb
f
994.711 575.828 mo
994.207 576.028 993.701 576.213 993.195 576.382 cv
992.994 576.213 992.785 576.037 992.576 575.852 cv
992.384 575.684 992.184 575.516 991.982 575.338 cv
991.501 574.921 990.995 574.479 990.474 574.022 cv
989.968 573.597 989.454 573.139 988.917 572.673 cv
988.764 572.545 988.611 572.409 988.451 572.271 cv
988.098 571.968 987.744 571.662 987.391 571.349 cv
986.886 570.916 986.363 570.466 985.842 570.009 cv
985.336 569.576 984.83 569.134 984.317 568.692 cv
983.033 567.576 981.708 566.429 980.36 565.249 cv
979.99 564.928 979.613 564.606 979.244 564.286 cv
978.795 563.9 978.354 563.516 977.903 563.121 cv
977.358 562.648 976.813 562.167 976.259 561.692 cv
976.025 561.484 975.784 561.284 975.552 561.082 cv
975.238 560.803 974.918 560.529 974.604 560.257 cv
974.324 560.016 974.051 559.782 973.778 559.542 cv
973.265 559.092 972.742 558.643 972.229 558.193 cv
971.104 557.214 969.989 556.251 968.891 555.296 cv
968.28 554.758 967.67 554.229 967.067 553.714 cv
966.627 553.33 966.192 552.952 965.768 552.582 cv
965.27 552.149 964.78 551.724 964.299 551.307 cv
961.883 549.212 959.667 547.285 957.805 545.672 cv
957.757 545.632 957.717 545.6 957.677 545.56 cv
957.677 545.56 957.717 545.527 957.789 545.479 cv
959.009 544.62 970.117 537.283 977.133 549.685 cv
982.078 558.41 989.968 569.423 994.711 575.828 cv
cp
.929412 .490196 .168627 rgb
f
922.174 421.889 mo
917.266 433.065 905.812 441.065 897.414 440.918 cv
889.345 440.771 875.553 431.681 871.44 419.378 cv
871.405 419.273 li
871.318 418.979 li
871.318 418.979 879.985 426.373 885.717 422.711 cv
909.794 422.711 li
909.794 422.711 916.097 426.313 922.174 421.889 cv
cp
.172549 .227451 .392157 rgb
f
900.33 424.751 mo
895.137 424.751 li
893.945 424.751 892.431 422.803 892.431 421.612 cv
892.431 421.612 893.945 420.423 895.137 420.423 cv
900.33 420.423 li
901.521 420.423 903.261 421.411 903.541 422.117 cv
903.541 422.117 902.82 424.751 900.33 424.751 cv
cp
1 .698039 .490196 rgb
f
1426.81 620.148 mo
1196.78 620.148 li
1163.77 620.148 1137 593.386 1137 560.372 cv
1137 330.337 li
1137 297.323 1163.77 270.561 1196.78 270.561 cv
1426.81 270.561 li
1459.83 270.561 1486.59 297.323 1486.59 330.337 cv
1486.59 560.372 li
1486.59 593.386 1459.83 620.148 1426.81 620.148 cv
cp
.890196 .941176 1 rgb
f
1441.31 356.612 mo
1441.31 527.314 li
1441.31 538.23 1437.37 548.225 1430.83 555.954 cv
1422.7 565.562 1410.54 571.67 1396.96 571.67 cv
1226.25 571.67 li
1215.04 571.67 1204.81 567.521 1197.01 560.665 cv
1187.74 552.534 1181.89 540.607 1181.89 527.314 cv
1181.89 356.612 li
1181.89 332.115 1201.75 312.249 1226.25 312.249 cv
1396.96 312.249 li
1421.46 312.249 1441.31 332.115 1441.31 356.612 cv
cp
.823529 .894118 1 rgb
f
1293.48 471.09 mo
1293.48 471.09 1265.63 469.694 1264.85 453.624 cv
1264.07 437.552 1241.06 425.831 1247.73 412.93 cv
1255.9 397.106 1248.44 381.895 1258.76 371.256 cv
1270.12 359.534 1284.48 365.901 1292.06 359.071 cv
1299.63 352.241 1313.48 345.946 1327.14 354.383 cv
1340.8 362.821 1351.23 358.279 1360.21 366.405 cv
1370.13 375.383 1366.37 386.684 1374.55 392.82 cv
1382.05 398.445 1379 413.814 1372.68 426.302 cv
1368.13 435.304 1378.62 443.739 1360.6 454.082 cv
1353.11 458.389 1354.73 469.221 1331.97 471.09 cv
1321.71 471.932 1299.46 467.128 1293.48 471.09 cv
cp
.172549 .227451 .392157 rgb
f
1294.31 456.838 mo
1294.31 456.838 1293.5 481.949 1290.29 493.198 cv
1264.85 510.943 li
1360.6 525.273 li
1337.77 493.721 li
1337.77 493.721 1330.87 460.052 1334.49 447.597 cv
1338.11 435.142 1294.31 456.838 1294.31 456.838 cv
cp
.709804 .435294 .25098 rgb
f
1294.17 460.305 mo
1294.17 460.297 1301.75 478.533 1316.01 478.132 cv
1330.27 477.73 1333.52 461.601 1333.52 461.601 cv
1294.17 460.305 li
cp
.6 .34902 .180392 rgb
f
1314.37 471.088 mo
1304.04 470.905 1285.02 457.145 1285.02 440.103 cv
1285.02 413.51 li
1285.02 407.287 1289.36 402.195 1294.66 402.195 cv
1334.09 402.195 li
1339.39 402.195 1343.73 407.287 1343.73 413.51 cv
1343.73 438.598 li
1343.73 456.468 1326.23 471.297 1314.37 471.088 cv
cp
.709804 .435294 .25098 rgb
f
1370.33 500.124 mo
1370.33 500.123 1370.32 500.122 1370.32 500.121 cv
1358.73 497.207 1347.83 494.893 1337.77 493.721 cv
1328.87 505.52 1322.5 508.669 1314.37 511.88 cv
1301.3 510.073 1290.29 493.567 1290.29 493.198 cv
1276.05 494.651 1266.46 497.665 1262.54 498.885 cv
1262.54 498.885 1262.53 498.885 1262.5 498.892 cv
1261.36 499.037 1235.9 502.985 1197.01 561.066 cv
1204.81 567.922 1215.04 572.072 1226.25 572.072 cv
1243.83 572.072 li
1258.03 572.072 li
1378.97 572.072 li
1378.96 571.936 1378.96 571.805 1378.95 571.67 cv
1396.96 571.67 li
1410.54 571.67 1422.7 565.562 1430.83 555.954 cv
1403.5 509.029 1370.33 500.124 1370.33 500.124 cv
cp
.713726 .298039 .254902 rgb
f
1285.02 424.293 mo
1285.02 424.293 1292.19 402.396 1315.69 405.812 cv
1339.2 409.227 1341.23 414.248 1343.73 420.074 cv
1346.23 425.9 1351.05 398.78 1351.05 398.78 cv
1323.33 390.543 li
1323.33 390.543 1289.78 394.36 1287.37 399.985 cv
1284.96 405.61 1284.96 405.61 1284.96 405.61 cv
1285.02 424.293 li
cp
.172549 .227451 .392157 rgb
f
1341.56 432.512 mo
1340.83 436.132 1338.11 438.443 1333.48 439.383 cv
1329.95 440.105 1326.59 439.712 1326.56 439.704 cv
1326.51 439.704 li
1323.07 439.704 1320.63 437.697 1318.84 433.396 cv
1318.59 432.833 1318.09 431.477 1317.97 430.056 cv
1317.97 430.054 1317.97 430.051 1317.97 430.048 cv
1318.21 430.145 1318.44 430.252 1318.68 430.376 cv
1318.92 430.503 1319.22 430.412 1319.34 430.172 cv
1319.47 429.932 1319.38 429.636 1319.14 429.509 cv
1318.75 429.304 1318.36 429.146 1317.97 429.007 cv
1317.97 429.004 1317.97 429 1317.97 428.996 cv
1318.02 428.33 1318.19 427.688 1318.55 427.15 cv
1319.28 426.043 1320.71 425.488 1322.79 425.488 cv
1335.26 425.488 li
1337.47 425.488 1339.41 426.3 1340.56 427.712 cv
1341.59 428.965 1341.94 430.626 1341.56 432.512 cv
cp
1310.79 430.137 mo
1310.65 431.532 1310.15 432.841 1309.93 433.396 cv
1308.13 437.697 1305.69 439.704 1302.25 439.704 cv
1302.2 439.704 li
1302.16 439.712 1298.81 440.105 1295.28 439.383 cv
1290.65 438.443 1287.93 436.132 1287.2 432.512 cv
1286.83 430.626 1287.16 428.965 1288.2 427.712 cv
1289.35 426.3 1291.29 425.488 1293.5 425.488 cv
1305.98 425.488 li
1308.06 425.488 1309.48 426.043 1310.22 427.15 cv
1310.59 427.712 1310.76 428.387 1310.8 429.085 cv
1310.8 429.091 li
1310.17 429.292 1309.76 429.471 1309.71 429.496 cv
1309.46 429.608 1309.35 429.9 1309.46 430.146 cv
1309.55 430.327 1309.73 430.434 1309.91 430.434 cv
1309.98 430.434 1310.05 430.419 1310.12 430.389 cv
1310.13 430.384 1310.38 430.274 1310.79 430.134 cv
1310.79 430.135 1310.79 430.136 1310.79 430.137 cv
cp
1341.2 427.19 mo
1339.88 425.585 1337.72 424.67 1335.26 424.67 cv
1322.79 424.67 li
1320.41 424.67 1318.76 425.345 1317.86 426.693 cv
1317.44 427.311 1317.23 428.025 1317.16 428.756 cv
1317.16 428.758 1317.16 428.76 1317.16 428.763 cv
1315.07 428.241 1313.03 428.506 1311.61 428.86 cv
1311.61 428.86 li
1311.61 428.852 li
1311.55 428.09 1311.33 427.343 1310.9 426.693 cv
1310.01 425.345 1308.35 424.67 1305.98 424.67 cv
1293.5 424.67 li
1291.04 424.67 1288.87 425.585 1287.56 427.19 cv
1286.37 428.644 1285.97 430.545 1286.4 432.673 cv
1287.82 439.728 1295.94 440.627 1300 440.627 cv
1301.25 440.627 1302.11 440.539 1302.27 440.522 cv
1306.07 440.515 1308.74 438.348 1310.68 433.708 cv
1311.01 432.913 1311.55 431.429 1311.63 429.88 cv
1311.63 429.879 li
1312.98 429.519 1315.05 429.195 1317.13 429.766 cv
1317.13 429.767 li
1317.19 431.356 1317.74 432.897 1318.07 433.708 cv
1320.02 438.348 1322.69 440.515 1326.49 440.522 cv
1326.65 440.539 1327.51 440.627 1328.76 440.627 cv
1332.82 440.627 1340.94 439.728 1342.36 432.681 cv
1342.79 430.545 1342.39 428.644 1341.2 427.19 cv
cp
f
1900.12 612.006 mo
1671.6 585.653 li
1638.81 581.87 1615.29 552.217 1619.07 519.421 cv
1645.42 290.901 li
1649.2 258.104 1678.86 234.584 1711.65 238.366 cv
1940.17 264.72 li
1972.97 268.502 1996.49 298.155 1992.71 330.951 cv
1966.36 559.471 li
1962.57 592.268 1932.92 615.788 1900.12 612.006 cv
cp
.890196 .941176 1 rgb
f
1944.72 351.869 mo
1925.16 521.448 li
1924.4 528.078 1922.21 534.186 1918.93 539.523 cv
1918.93 539.531 li
1913.88 547.783 1906.23 554.164 1897.25 557.68 cv
1892.12 559.694 1886.55 560.77 1880.78 560.722 cv
1880.77 560.722 li
1879.2 560.714 1877.62 560.617 1876.01 560.433 cv
1804.12 552.141 li
1789.9 550.503 li
1743.45 545.143 li
1737.48 544.452 li
1706.43 540.871 li
1689.73 538.945 1676.26 527.974 1670.38 513.413 cv
1669.99 512.465 1669.64 511.51 1669.33 510.539 cv
1668.06 506.671 1667.32 502.593 1667.18 498.387 cv
1667.1 496.196 1667.19 493.973 1667.45 491.725 cv
1687.01 322.146 li
1689.81 297.809 1711.82 280.351 1736.16 283.16 cv
1905.74 302.713 li
1930.07 305.522 1947.52 327.523 1944.72 351.869 cv
cp
.823529 .894118 1 rgb
f
1872.9 391.007 mo
1872.88 390.87 1872.86 390.733 1872.83 390.605 cv
1872.28 387.507 1871.66 384.432 1870.99 381.406 cv
1870.99 381.404 1870.99 381.402 1870.99 381.399 cv
1874.76 357.154 1865.45 346.791 1857.4 341.533 cv
1857.4 341.532 1857.4 341.531 1857.4 341.531 cv
1853.07 333.078 1848.45 327.123 1844.07 325.1 cv
1836.07 321.407 1826.89 321.704 1820.53 322.619 cv
1822.03 320.781 1825.21 319.89 1825.21 319.89 cv
1821.2 319.633 1812.68 324.313 1812.68 324.313 cv
1755.73 307.706 1753.9 389.658 1756.65 408.433 cv
1759.39 427.207 1740.23 435.024 1712.78 452.313 cv
1687.84 468.021 1674.41 484.958 1667.18 498.387 cv
1667.32 502.593 1668.06 506.671 1669.33 510.539 cv
1670.23 509.729 1671.13 509.118 1672.02 508.79 cv
1671.97 508.958 1671.29 510.805 1670.38 513.413 cv
1676.26 527.974 1689.73 538.945 1706.43 540.871 cv
1737.48 544.452 li
1743.45 545.143 li
1789.9 550.503 li
1794.78 543.585 1800.1 536.425 1805.62 529.321 cv
1819.06 512 1833.75 495 1846.53 482.63 cv
1850.75 478.545 1854.75 474.973 1858.44 472.051 cv
1858.57 471.947 1858.71 471.835 1858.84 471.73 cv
1860.63 468.552 1862.08 464.867 1863.24 461.055 cv
1867.17 448.203 1867.91 433.893 1867.97 432.472 cv
1867.98 445.748 1866.81 454.955 1865.29 461.336 cv
1864.69 463.872 1864.03 465.959 1863.37 467.685 cv
1865 465.91 1866.45 463.912 1867.73 461.714 cv
1877.41 445.122 1877.53 417.294 1872.9 391.007 cv
cp
.0862745 .207843 .376471 rgb
f
1849.85 476.922 mo
1850.03 477.025 1831.1 484.236 1818.1 479.015 cv
1805.87 474.113 1799.5 456.784 1799.68 456.768 cv
1805.15 456.321 1807.54 449.149 1811.07 417.548 cv
1813.43 418.304 li
1853.17 431.044 li
1853.17 431.044 1850.76 443.733 1849.35 455.784 cv
1848.15 465.902 1847.66 475.574 1849.85 476.922 cv
cp
1 .698039 .490196 rgb
f
1799.29 342.266 mo
1799.29 342.266 1817.61 319.15 1844.58 337.345 cv
1844.58 337.345 1829.66 336.042 1799.29 342.266 cv
cp
.737255 .247059 .247059 rgb
f
1853.17 431.044 mo
1853.17 431.044 1850.76 443.733 1849.35 455.784 cv
1826.67 452.52 1817.03 430.377 1813.43 418.304 cv
1853.17 431.044 li
cp
.937255 .619608 .403922 rgb
f
1859.54 438.295 mo
1859.54 438.295 1805.62 443.737 1802.74 410.104 cv
1799.87 376.472 1790.98 354.522 1825.29 349.626 cv
1859.59 344.729 1867.39 356.991 1871.08 367.984 cv
1874.77 378.977 1873.49 436.013 1859.54 438.295 cv
cp
1 .698039 .490196 rgb
f
1849.81 346.729 mo
1849.81 346.729 1838.35 387.437 1816.15 395.185 cv
1793.96 402.932 1783.6 397.682 1783.6 397.682 cv
1783.6 397.682 1799.84 382.389 1801.42 357.95 cv
1801.42 357.95 1837.07 328.887 1849.81 346.729 cv
cp
.0862745 .207843 .376471 rgb
f
1846.41 350.242 mo
1846.41 350.242 1858.2 358.121 1861.61 366.459 cv
1865.03 374.798 1867.72 392.329 1872.81 391.296 cv
1872.81 391.296 1881.69 363.535 1867.89 349.417 cv
1853.26 334.447 1846.41 350.242 1846.41 350.242 cv
cp
f
1896.01 474.274 mo
1890.41 467.252 1878.96 463.6 1867.73 461.714 cv
1866.91 461.585 1866.1 461.456 1865.29 461.336 cv
1864.6 461.239 1863.92 461.144 1863.24 461.055 cv
1858.5 460.437 1853.96 460.116 1850.09 459.947 cv
1849.51 459.129 1849.16 458.623 1849.05 458.47 cv
1849.02 458.438 1849.01 458.422 1849.01 458.422 cv
1803.41 454.73 li
1802.93 454.689 li
1802.93 454.689 1802.9 454.689 1802.84 454.683 cv
1802.81 454.683 1802.78 454.674 1802.74 454.674 cv
1799.3 454.305 1752.07 449.617 1742.93 466.28 cv
1736.96 477.172 1736.84 498.01 1739.67 521.134 cv
1738.81 528.977 1738.11 536.955 1737.48 544.452 cv
1743.45 545.143 li
1789.9 550.503 li
1804.12 552.141 li
1876.01 560.433 li
1877.62 560.617 1879.2 560.714 1880.77 560.722 cv
1880.78 560.722 li
1886.55 560.77 1892.12 559.694 1897.25 557.68 cv
1906.23 554.164 1913.88 547.783 1918.93 539.531 cv
1918.93 539.523 li
1912.02 511.222 1903.37 483.514 1896.01 474.274 cv
cp
.737255 .247059 .247059 rgb
f
1931.84 1047.45 mo
1701.93 1047.45 li
1668.94 1047.45 1642.19 1020.7 1642.19 987.707 cv
1642.19 757.802 li
1642.19 724.806 1668.94 698.059 1701.93 698.059 cv
1931.84 698.059 li
1964.83 698.059 1991.58 724.806 1991.58 757.802 cv
1991.58 987.707 li
1991.58 1020.7 1964.83 1047.45 1931.84 1047.45 cv
cp
.890196 .941176 1 rgb
f
1946.33 784.063 mo
1946.33 954.669 li
1946.33 958.932 1945.73 963.058 1944.61 966.959 cv
1939.47 984.794 1923.44 998.014 1904.17 998.945 cv
1903.45 998.985 1902.73 999.001 1902 999.001 cv
1731.39 999.001 li
1731.08 999.001 1730.78 999.001 1730.47 998.985 cv
1730.19 998.985 1729.89 998.977 1729.6 998.961 cv
1710.26 998.198 1694.11 985.042 1688.86 967.223 cv
1687.68 963.242 1687.06 959.028 1687.06 954.669 cv
1687.06 784.063 li
1687.06 759.574 1706.91 739.724 1731.39 739.724 cv
1902 739.724 li
1926.48 739.724 1946.33 759.574 1946.33 784.063 cv
cp
.823529 .894118 1 rgb
f
1791.16 863.107 mo
1791.16 863.107 1790.18 893.449 1786.3 907.041 cv
1755.56 928.482 li
1871.26 945.797 li
1843.67 907.672 li
1843.67 907.672 1835.34 866.991 1839.71 851.942 cv
1844.08 836.894 1791.16 863.107 1791.16 863.107 cv
cp
1 .698039 .490196 rgb
f
1791 867.298 mo
1791 867.288 1800.14 889.322 1817.38 888.837 cv
1834.61 888.352 1838.53 868.863 1838.53 868.863 cv
1791 867.298 li
cp
.929412 .596078 .372549 rgb
f
1780.71 849.465 mo
1780.71 849.465 1775.14 821.682 1771.26 813.267 cv
1767.38 804.854 1764.14 767.312 1807.18 765.369 cv
1807.18 765.369 1823.69 767.312 1832.75 761.81 cv
1832.75 761.81 1832.75 767.312 1830.49 769.254 cv
1830.49 769.254 1845.37 765.693 1857.02 778.639 cv
1868.67 791.584 1849.26 836.894 1850.23 847.574 cv
1780.71 849.465 li
cp
.172549 .227451 .392157 rgb
f
1815.4 880.326 mo
1802.92 880.105 1779.93 863.479 1779.93 842.888 cv
1779.93 810.757 li
1779.93 803.237 1785.18 797.085 1791.58 797.085 cv
1839.22 797.085 li
1845.63 797.085 1850.88 803.237 1850.88 810.757 cv
1850.88 841.069 li
1850.88 862.66 1829.72 880.578 1815.4 880.326 cv
cp
1 .698039 .490196 rgb
f
1779.93 827.912 mo
1779.93 827.912 1780 808.606 1795.29 805.638 cv
1810.58 802.669 1844.81 815.047 1849.66 800.97 cv
1854.52 786.892 1783.51 787.134 1779.93 796.115 cv
1776.36 805.096 1779.93 827.912 1779.93 827.912 cv
cp
.172549 .227451 .392157 rgb
f
1893.3 999.001 mo
1731.39 999.001 li
1731.08 999.001 1730.78 999.001 1730.47 998.985 cv
1734.57 961.894 1743.36 917.16 1750.39 914.215 cv
1750.39 914.215 1751.19 913.919 1752.74 913.437 cv
1752.76 913.429 1752.78 913.429 1752.78 913.429 cv
1756.45 912.281 1764.24 910.138 1775.56 908.404 cv
1775.58 908.404 1775.62 908.396 1775.64 908.396 cv
1778.91 907.891 1782.46 907.434 1786.3 907.039 cv
1786.3 907.489 1799.61 926.945 1815.4 929.129 cv
1825.22 925.244 1832.93 921.938 1843.67 907.674 cv
1847.21 908.091 1850.84 908.572 1854.55 909.15 cv
1863.57 910.539 1873.08 912.426 1883 914.93 cv
1884.18 915.219 1885.36 915.524 1886.55 915.845 cv
1886.56 915.845 li
1887.03 915.957 1887.5 916.086 1887.97 916.214 cv
1887.97 916.214 1888.09 916.703 1888.37 919.609 cv
1888.37 919.609 1888.37 919.609 1888.37 919.617 cv
1888.98 926.207 1890.43 945.206 1893.3 999.001 cv
cp
.45098 .603922 .941176 rgb
f
1751.67 913.637 mo
1751.63 913.646 1751.59 913.653 1751.55 913.669 cv
1750.94 913.806 1750.12 914.023 1749.08 914.384 cv
1749.02 914.408 1748.95 914.424 1748.9 914.44 cv
1748.85 914.465 1748.8 914.48 1748.76 914.488 cv
1748.7 914.513 1748.66 914.521 1748.66 914.521 cv
1740.12 917.482 1718.73 928.334 1688.86 967.223 cv
1694.11 985.042 1710.26 998.198 1729.6 998.961 cv
1729.89 998.977 1730.19 998.985 1730.47 998.985 cv
1730.78 999.001 1731.08 999.001 1731.39 999.001 cv
1747.49 999.001 li
1774.37 999.001 li
1774.84 971.606 1775.17 947.775 1775.38 931.44 cv
1775.46 924.225 1775.53 918.478 1775.58 914.521 cv
1775.62 910.555 1775.64 908.396 1775.64 908.396 cv
1775.62 908.396 1775.58 908.404 1775.56 908.404 cv
1767.09 909.416 1756.7 912.192 1751.67 913.637 cv
cp
.168627 .278431 .545098 rgb
f
1887.97 916.214 mo
1885.8 915.403 1884.31 915.074 1883.57 914.946 cv
1883.55 914.946 1883.54 914.946 1883.54 914.938 cv
1877.82 913.493 1864.9 910.387 1854.55 909.143 cv
1854.55 909.143 1854.55 909.143 1854.55 909.15 cv
1854.55 909.384 1854.58 914.319 1854.65 922.836 cv
1854.65 922.844 li
1854.7 928.302 1854.76 935.237 1854.83 943.345 cv
1854.98 958.442 1855.18 977.618 1855.47 999.001 cv
1886.17 999.001 li
1902 999.001 li
1902.73 999.001 1903.45 998.985 1904.17 998.945 cv
1923.44 998.014 1939.47 984.794 1944.61 966.959 cv
1916.68 930.381 1896.73 919.449 1887.97 916.214 cv
cp
f
1845.96 832.327 mo
1845.14 836.389 1842.08 838.99 1836.88 840.049 cv
1832.91 840.859 1829.14 840.418 1829.1 840.41 cv
1829.04 840.41 li
1825.18 840.41 1822.44 838.155 1820.41 833.314 cv
1820.15 832.68 1819.58 831.163 1819.44 829.559 cv
1819.44 829.557 1819.44 829.556 1819.44 829.556 cv
1819.71 829.662 1819.98 829.782 1820.24 829.922 cv
1820.51 830.064 1820.84 829.962 1820.99 829.692 cv
1821.13 829.423 1821.02 829.089 1820.76 828.946 cv
1820.32 828.713 1819.87 828.534 1819.43 828.378 cv
1819.43 828.375 1819.43 828.373 1819.43 828.37 cv
1819.49 827.623 1819.68 826.909 1820.08 826.292 cv
1820.91 825.055 1822.52 824.422 1824.85 824.422 cv
1838.88 824.422 li
1841.37 824.422 1843.54 825.336 1844.85 826.926 cv
1846 828.338 1846.39 830.208 1845.96 832.327 cv
cp
1811.36 829.654 mo
1811.21 831.22 1810.65 832.696 1810.4 833.314 cv
1808.37 838.155 1805.63 840.41 1801.77 840.41 cv
1801.71 840.41 li
1801.67 840.418 1797.89 840.859 1793.93 840.049 cv
1788.72 838.99 1785.67 836.389 1784.85 832.327 cv
1784.42 830.208 1784.81 828.338 1785.96 826.926 cv
1787.26 825.336 1789.44 824.422 1791.93 824.422 cv
1805.95 824.422 li
1808.29 824.422 1809.9 825.055 1810.72 826.292 cv
1811.15 826.926 1811.34 827.688 1811.38 828.467 cv
1811.38 828.47 1811.38 828.473 1811.38 828.477 cv
1810.67 828.703 1810.21 828.903 1810.15 828.933 cv
1809.87 829.06 1809.75 829.387 1809.88 829.664 cv
1809.97 829.867 1810.17 829.986 1810.38 829.986 cv
1810.46 829.986 1810.54 829.97 1810.61 829.937 cv
1810.62 829.93 1810.9 829.809 1811.36 829.65 cv
1811.36 829.652 1811.36 829.654 1811.36 829.654 cv
cp
1845.56 826.34 mo
1844.08 824.533 1841.65 823.498 1838.88 823.498 cv
1824.85 823.498 li
1822.19 823.498 1820.32 824.269 1819.31 825.777 cv
1818.85 826.484 1818.61 827.278 1818.52 828.098 cv
1818.52 828.1 1818.52 828.104 1818.52 828.105 cv
1816.17 827.521 1813.88 827.82 1812.29 828.218 cv
1812.29 828.218 li
1812.29 828.209 li
1812.21 827.351 1811.98 826.517 1811.49 825.777 cv
1810.48 824.269 1808.62 823.498 1805.95 823.498 cv
1791.93 823.498 li
1789.16 823.498 1786.73 824.533 1785.25 826.34 cv
1783.91 827.978 1783.46 830.112 1783.94 832.512 cv
1785.54 840.435 1794.67 841.446 1799.23 841.446 cv
1800.63 841.446 1801.61 841.349 1801.79 841.333 cv
1806.06 841.325 1809.06 838.886 1811.25 833.668 cv
1811.62 832.784 1812.22 831.107 1812.31 829.365 cv
1812.31 829.364 li
1813.82 828.959 1816.15 828.596 1818.49 829.234 cv
1818.49 829.236 li
1818.56 831.027 1819.18 832.761 1819.56 833.668 cv
1821.75 838.886 1824.75 841.325 1829.02 841.333 cv
1829.2 841.349 1830.17 841.446 1831.58 841.446 cv
1836.14 841.446 1845.27 840.435 1846.87 832.512 cv
1847.35 830.112 1846.9 827.978 1845.56 826.34 cv
cp
.713726 .298039 .254902 rgb
f
1372.22 1089.47 mo
1105.59 1089.47 li
1067.33 1089.47 1036.31 1058.45 1036.31 1020.18 cv
1036.31 753.554 li
1036.31 715.288 1067.33 684.268 1105.59 684.268 cv
1372.22 684.268 li
1410.49 684.268 1441.51 715.288 1441.51 753.554 cv
1441.51 1020.18 li
1441.51 1058.45 1410.49 1089.47 1372.22 1089.47 cv
cp
.890196 .941176 1 rgb
f
1389.03 784.007 mo
1389.03 981.863 li
1389.03 1003.43 1375.75 1021.9 1356.92 1029.53 cv
1355.81 1029.98 1354.69 1030.39 1353.54 1030.76 cv
1348.53 1032.4 1343.17 1033.28 1337.61 1033.28 cv
1139.75 1033.28 li
1111.35 1033.28 1088.33 1010.26 1088.33 981.863 cv
1088.33 784.007 li
1088.33 755.608 1111.35 732.588 1139.75 732.588 cv
1337.61 732.588 li
1366.01 732.588 1389.03 755.608 1389.03 784.007 cv
cp
.823529 .894118 1 rgb
f
1240.39 785.035 mo
1240.39 785.035 li
1234.86 783.708 1228.42 783.392 1220.93 784.466 cv
1220.93 784.466 1207.52 785.786 1194.91 794.302 cv
1184.88 801.073 1170.41 815.692 1186.59 855.791 cv
1194.26 869.581 li
1191.7 899.622 1179.41 899.625 1179.41 899.625 cv
1179.41 899.625 1184.79 902.274 1187.38 902.274 cv
1187.38 902.274 1191.17 900.827 1191.92 898.731 cv
1191.92 898.731 1191.17 902.024 1190.2 903.072 cv
1190.2 903.072 1211.06 905.048 1221.48 897.174 cv
1227.14 892.892 1233.34 882.847 1237.34 872.608 cv
1253.12 873.718 li
1253.29 880.504 1250.86 888.266 1243.27 896.373 cv
1243.27 896.373 1262.73 898.282 1269.32 892.893 cv
1269.32 892.893 1268.02 895.52 1266.82 896.701 cv
1266.82 896.701 1288.58 897.483 1297.56 890.697 cv
1306.55 883.911 1300.78 772.589 1240.39 785.035 cv
cp
.137255 .219608 .384314 rgb
f
1315.78 1033.28 mo
1161.73 1033.28 li
1159.86 1021.33 1158.71 1010.18 1159.43 999.482 cv
1160.34 986.046 1166.27 973.949 1173.27 964.125 cv
1184.68 948.104 1198.92 938.103 1198.92 938.103 cv
1198.92 938.103 1199.28 938.03 1199.89 937.926 cv
1200.99 937.733 1202.89 937.428 1204.92 937.244 cv
1204.95 937.244 li
1206.86 936.232 1207.64 929.258 1207.88 921.087 cv
1207.94 918.814 1207.96 916.455 1207.96 914.104 cv
1207.95 912.072 1207.92 910.025 1207.88 908.011 cv
1207.85 907.071 1207.83 906.141 1207.8 905.218 cv
1207.79 904.953 1207.79 904.695 1207.78 904.439 cv
1207.77 904.045 1207.75 903.66 1207.74 903.275 cv
1207.73 902.978 1207.72 902.681 1207.71 902.385 cv
1207.7 901.919 1207.67 901.469 1207.66 901.02 cv
1207.63 900.41 1207.61 899.815 1207.59 899.229 cv
1207.58 899.102 1207.57 898.98 1207.57 898.853 cv
1207.55 898.299 1207.52 897.761 1207.5 897.231 cv
1207.47 896.589 1207.43 895.962 1207.4 895.369 cv
1207.38 894.911 li
1207.33 893.956 1207.28 893.065 1207.23 892.263 cv
1207.22 892.046 1207.21 891.829 1207.2 891.62 cv
1207.19 891.371 1207.18 891.139 1207.16 890.914 cv
1207.14 890.689 1207.14 890.473 1207.12 890.272 cv
1207.08 889.598 1207.04 889.028 1207.01 888.57 cv
1207.01 888.466 1207 888.369 1206.99 888.273 cv
1206.98 888.161 1206.98 888.057 1206.97 887.968 cv
1206.94 887.543 1206.93 887.317 1206.93 887.317 cv
1232.93 882.173 li
1232.94 882.173 li
1250.75 878.642 li
1252.84 878.231 li
1253.36 878.128 li
1253.36 878.16 li
1253.34 884.837 1253.71 891.019 1254.36 896.637 cv
1254.9 901.397 1255.66 905.764 1256.54 909.696 cv
1256.54 909.704 li
1259.78 924.072 1264.83 932.726 1268.48 934.153 cv
1268.48 934.153 li
1268.61 934.21 1268.73 934.25 1268.85 934.282 cv
1286.58 937.918 1313.53 983.918 1315.78 1033.28 cv
cp
.85098 .576471 .360784 rgb
f
1206.93 887.319 mo
1206.93 887.319 1207.92 901.112 1207.95 914.105 cv
1232.48 913.415 1245.44 891.041 1250.75 878.641 cv
1206.93 887.319 li
cp
.796078 .490196 .270588 rgb
f
1198.74 899.623 mo
1198.74 899.623 1256.76 900.58 1256.8 864.436 cv
1256.84 828.291 1264.36 804.071 1227.31 801.932 cv
1190.27 799.792 1183.05 813.576 1180.11 825.638 cv
1177.16 837.698 1183.64 898.442 1198.74 899.623 cv
cp
.85098 .576471 .360784 rgb
f
1200.88 801.046 mo
1200.88 801.046 1216.77 843.45 1241.15 849.721 cv
1265.54 855.99 1276.11 849.458 1276.11 849.458 cv
1276.11 849.458 1257.41 834.601 1253.53 808.667 cv
1253.53 808.667 1212.87 780.863 1200.88 801.046 cv
cp
.137255 .219608 .384314 rgb
f
1204.82 804.488 mo
1204.82 804.488 1192.96 813.955 1190.06 823.159 cv
1187.17 832.363 1185.87 851.312 1180.35 850.668 cv
1180.35 850.668 1168.38 821.846 1181.83 805.54 cv
1196.09 788.251 1204.82 804.488 1204.82 804.488 cv
cp
f
1202.62 805.921 mo
1202.62 805.921 1213.94 850.327 1244.7 864.549 cv
1244.7 864.549 1213.94 837.267 1211.32 807.953 cv
1208.71 778.639 1202.62 805.921 1202.62 805.921 cv
cp
f
1349.38 1011.34 mo
1348.39 1008.98 1347.41 1006.65 1346.46 1004.36 cv
1345.97 1003.21 1345.49 1002.08 1345.02 1000.96 cv
1345.01 1000.9 1344.99 1000.87 1344.99 1000.87 cv
1331.58 969.029 1320.96 944.989 1319.92 943.231 cv
1316.93 938.175 1276.06 933.158 1270.07 933.19 cv
1265.72 933.19 1263.34 918.798 1262.38 910.917 cv
1262.1 908.749 1259.64 907.609 1257.83 908.846 cv
1257.41 909.134 1256.97 909.424 1256.54 909.696 cv
1256 910.041 1255.47 910.379 1254.94 910.716 cv
1254.4 911.045 1253.86 911.366 1253.32 911.679 cv
1252.96 911.888 1252.6 912.096 1252.24 912.297 cv
1251.83 912.53 1251.42 912.746 1251.01 912.963 cv
1250.64 913.164 1250.26 913.356 1249.89 913.55 cv
1249.52 913.741 1249.15 913.927 1248.77 914.111 cv
1248.39 914.296 1248.03 914.473 1247.66 914.648 cv
1247.36 914.785 1247.07 914.922 1246.77 915.059 cv
1246.23 915.307 1245.69 915.548 1245.14 915.772 cv
1244.76 915.941 1244.36 916.102 1243.98 916.262 cv
1243.71 916.375 1243.43 916.487 1243.16 916.592 cv
1241.67 917.177 1240.17 917.715 1238.7 918.196 cv
1226.24 922.29 1214.59 922.676 1207.88 921.087 cv
1207.71 921.046 1207.55 921.006 1207.39 920.966 cv
1203.97 920.083 1200.85 923.125 1201.59 926.585 cv
1202.49 930.679 1202.72 935.157 1200.41 937.42 cv
1190.03 939.732 1164.77 946.178 1160.04 955.167 cv
1156.64 961.613 1156.33 999.555 1154.49 1033.28 cv
1158.46 1033.28 li
1206.99 1033.28 li
1337.61 1033.28 li
1343.17 1033.28 1348.53 1032.4 1353.54 1030.76 cv
1354.69 1030.39 1355.81 1029.98 1356.92 1029.53 cv
1354.37 1023.32 1351.84 1017.23 1349.38 1011.34 cv
cp
.976471 .592157 .27451 rgb
f
1293.84 1033.28 mo
1269.28 1033.28 li
1275.49 1023 1281.42 1015.53 1284.84 1015.11 cv
1287.78 1014.76 1290.91 1022.48 1293.84 1033.28 cv
cp
.929412 .490196 .168627 rgb
f
1270.07 933.193 mo
1270.07 933.193 1239.47 952.571 1216.32 947.984 cv
1216.32 947.984 1210.77 944.475 1218.43 940.942 cv
1225.63 937.637 1242.37 927.852 1238.7 918.199 cv
1245.05 916.127 1251.62 913.085 1257.83 908.846 cv
1259.64 907.611 1262.1 908.749 1262.37 910.918 cv
1263.34 918.798 1265.73 933.193 1270.07 933.193 cv
cp
f
1587.58 1039.83 mo
1587.58 1039.83 1634.17 1087.49 1636.44 1105.87 cv
1638.7 1124.24 1613.97 1153 1613.97 1153 cv
1587.58 1039.83 li
cp
f
1566.77 1544.97 mo
1566.77 1544.97 1565.17 1570.88 1560.15 1571.25 cv
1559.49 1571.3 1534.73 1571.3 1534.73 1571.3 cv
1503.13 1571.12 li
1503.13 1571.12 1503.33 1563.5 1512.57 1561.89 cv
1521.81 1560.28 1537.27 1553.79 1542.87 1541.58 cv
1548.75 1528.73 1566.77 1544.97 1566.77 1544.97 cv
cp
.0862745 .207843 .376471 rgb
f
1637.17 1544.97 mo
1637.17 1544.97 1635.56 1570.88 1630.55 1571.25 cv
1629.88 1571.3 1605.12 1571.3 1605.12 1571.3 cv
1573.52 1571.12 li
1573.52 1571.12 1573.73 1563.5 1582.96 1561.89 cv
1592.2 1560.28 1607.67 1553.79 1613.26 1541.58 cv
1619.15 1528.73 1637.17 1544.97 1637.17 1544.97 cv
cp
f
1531.77 1266.5 mo
1531.77 1266.5 1540.04 1319.37 1570.87 1413.21 cv
1601.71 1507.06 1605.91 1547.7 1605.91 1547.7 cv
1638.99 1546.77 li
1638.99 1546.77 1639.27 1444.21 1625.06 1397.02 cv
1610.85 1349.83 1621.99 1226.89 1621.99 1226.89 cv
1531.77 1266.5 li
cp
f
1515.67 1229.78 mo
1515.67 1229.78 1514.5 1309.45 1528.29 1407.26 cv
1542.07 1505.08 1537.4 1546.6 1537.4 1546.6 cv
1570.41 1547.7 li
1570.41 1547.7 1590.14 1449.85 1584.48 1400.89 cv
1578.83 1351.93 1611.5 1232.89 1611.5 1232.89 cv
1515.67 1229.78 li
cp
.109804 .27451 .541176 rgb
f
1579.58 1043.36 mo
1561.99 1054.89 li
1536.57 1050.15 li
1536.92 1048.1 1538.6 1039.59 1540.13 1031.89 cv
1540.22 1031.44 1540.32 1030.98 1540.4 1030.54 cv
1541.71 1023.98 1542.84 1018.35 1542.84 1018.35 cv
1566.58 1007.88 li
1575.44 1003.97 li
1575.41 1004.11 1574.75 1011.25 1574.66 1012.29 cv
1573 1030.79 1579.58 1043.36 1579.58 1043.36 cv
cp
1 .698039 .490196 rgb
f
1543.08 1037.54 mo
1543.58 1037.33 1573.7 1028.44 1576.97 1029.52 cv
1580.24 1030.6 1582.18 1036.93 1582.18 1036.93 cv
1532.91 1048.07 li
1532.91 1048.07 1536.79 1040.19 1543.08 1037.54 cv
cp
.929412 .490196 .168627 rgb
f
1624.18 1239.62 mo
1619.08 1262.91 1534.12 1265.67 1512.22 1244.53 cv
1509.72 1242.12 1509.6 1230.91 1510.54 1215.79 cv
1512.38 1186.26 1518.28 1141.84 1518.51 1119.14 cv
1518.62 1108.18 1520.13 1096.97 1522.14 1086.79 cv
1526.4 1065.09 1532.91 1048.07 1532.91 1048.07 cv
1532.91 1048.07 1574.41 1034.65 1582.18 1036.93 cv
1619.58 1047.92 1629.29 1216.33 1624.18 1239.62 cv
cp
1 .596078 .262745 rgb
f
1510.54 1215.79 mo
1512.38 1186.26 1518.28 1141.84 1518.51 1119.14 cv
1518.62 1108.18 1520.13 1096.97 1522.14 1086.79 cv
1547.1 1082.38 li
1547.1 1082.38 1571.51 1182.07 1510.54 1215.79 cv
cp
.929412 .490196 .168627 rgb
f
1524.06 1174.63 mo
1524.06 1174.63 1525.76 1178.7 1522.19 1181.43 cv
1518.61 1184.16 1516.3 1188.58 1517.12 1191.82 cv
1517.93 1195.05 1525.77 1200.32 1528.49 1199.47 cv
1531.21 1198.62 1536.74 1194.36 1536.14 1192.66 cv
1535.55 1190.95 1539.86 1177.69 1533.24 1172.59 cv
1526.61 1167.48 1524.06 1174.63 1524.06 1174.63 cv
cp
1 .698039 .490196 rgb
f
1551.97 1042.09 mo
1551.97 1042.09 1527.63 1046.65 1508.23 1075.24 cv
1488.83 1103.82 1476.07 1125.08 1479.64 1135.38 cv
1483.21 1145.69 1515.79 1181.42 1521.4 1181.42 cv
1527.02 1181.42 1536.08 1177.34 1536.59 1168.15 cv
1536.59 1168.15 1513.66 1133.78 1518.18 1128.63 cv
1520.11 1126.43 1547.95 1103.82 1551.93 1114.04 cv
1558.5 1130.93 1551.97 1042.09 1551.97 1042.09 cv
cp
1 .596078 .262745 rgb
f
1572.88 1012.61 mo
1567.66 1021.45 1548.23 1029.08 1540.13 1031.89 cv
1540.22 1031.44 1540.32 1030.98 1540.4 1030.54 cv
1541.71 1023.98 1542.84 1018.35 1542.84 1018.35 cv
1566.58 1007.88 li
1571.83 1007.8 1575.03 1008.98 1572.88 1012.61 cv
cp
.988235 .647059 .419608 rgb
f
1533.89 1016.91 mo
1533.89 1016.91 1572.14 1028.84 1579.2 1004.91 cv
1586.26 980.977 1595.96 966.398 1571.84 957.77 cv
1547.72 949.141 1540.26 956.865 1535.96 964.28 cv
1531.66 971.695 1524.13 1013.19 1533.89 1016.91 cv
cp
1 .698039 .490196 rgb
f
1537.46 961.976 mo
1537.46 961.976 1539.9 989.822 1545.66 988.613 cv
1551.41 987.404 1556.64 986.509 1555.79 994.902 cv
1554.95 1003.3 1551.04 1016.64 1568.79 1018.12 cv
1586.53 1019.61 1607.98 970.188 1603.1 961.521 cv
1589.03 936.517 1517.12 931.471 1537.46 961.976 cv
cp
.0862745 .207843 .376471 rgb
f
2205.78 518.019 mo
2205.78 518.019 2188.32 538.729 2166.09 530.064 cv
2166.09 530.064 2161.31 518.498 2161.24 509.973 cv
2161.23 508.924 2161.22 507.906 2161.2 506.939 cv
2161.08 497.338 2160.76 491.951 2160.76 491.951 cv
2160.76 491.951 2160.77 491.949 2160.78 491.945 cv
2161.79 491.525 2194.77 477.987 2194.74 479.112 cv
2194.17 505.079 2205.78 518.019 2205.78 518.019 cv
cp
1 .698039 .490196 rgb
f
2191.43 485.304 mo
2188.25 491.197 2177.34 502.728 2161.2 506.939 cv
2161.08 497.338 2160.76 491.951 2160.76 491.951 cv
2160.76 491.951 2160.77 491.949 2160.78 491.945 cv
2161.7 491.701 2192.37 483.567 2191.43 485.304 cv
cp
.929412 .592157 .364706 rgb
f
2153.86 490.953 mo
2153.86 490.953 2190.93 499.671 2196.01 476.496 cv
2201.08 453.321 2209.28 438.839 2185.82 432.293 cv
2162.36 425.747 2155.81 433.58 2152.24 440.903 cv
2148.66 448.227 2144.34 488.089 2153.86 490.953 cv
cp
1 .698039 .490196 rgb
f
2194.74 482.811 mo
2195.25 483.135 2203.22 485.585 2218.33 455.485 cv
2220.71 450.76 2222.32 440.538 2216.79 431.506 cv
2211.26 422.475 2191.66 415.373 2175.37 412.283 cv
2159.08 409.192 2155.17 418.357 2151.34 427.568 cv
2147.31 437.238 2135.68 445.199 2135.68 445.199 cv
2149.73 453.045 2166.64 441.823 2172.51 443.668 cv
2178.37 445.514 2180.44 454.75 2180.88 457.711 cv
2181.32 460.672 2181.99 463.132 2189.36 460.488 cv
2196.73 457.844 2192.69 470.932 2191.51 473.435 cv
2191.51 473.435 2190.51 480.102 2194.74 482.811 cv
cp
.662745 .270588 .239216 rgb
f
2290.26 1060.74 mo
2312.71 1060.74 li
2317.42 1060.74 2322.65 1056.03 2323.96 1047.4 cv
2325.26 1038.77 2334.94 1034.06 2337.04 1027 cv
2339.13 1019.93 2328.4 1009.99 2328.4 1009.99 cv
2326.61 1007.69 li
2324.74 1005.28 li
2306.96 1009.47 li
2306.96 1009.47 2306.52 1013.7 2306.24 1019.1 cv
2306.05 1022.99 2305.95 1027.49 2306.17 1031.44 cv
2306.7 1040.86 2303.53 1051 2295.17 1052.83 cv
2286.79 1054.67 2290.26 1060.74 2290.26 1060.74 cv
cp
.172549 .227451 .392157 rgb
f
2133.96 1060.74 mo
2193.47 1060.74 li
2194.04 1060.63 2194.47 1060.5 2194.73 1060.37 cv
2198.71 1058.38 2197.46 1043.17 2196.99 1038.47 cv
2196.89 1037.6 2196.83 1037.09 2196.83 1037.09 cv
2196.83 1037.09 2175.9 1020.35 2173.02 1033.17 cv
2172.93 1033.57 2172.82 1033.96 2172.71 1034.35 cv
2172.71 1034.35 li
2169.08 1046.35 2152.84 1051.79 2143.46 1053.31 cv
2136.29 1054.48 2134.43 1058.65 2133.96 1060.74 cv
cp
f
2145.95 717.536 mo
2145.95 717.536 2149.13 757.19 2152.87 804.856 cv
2157.94 869.606 2164.05 949.143 2164.65 964.21 cv
2165.7 990.373 2169.89 1032.22 2169.89 1032.22 cv
2169.89 1032.22 2179.82 1042.17 2199.71 1037.98 cv
2199.71 1037.98 2217.43 978.233 2222.49 915.021 cv
2222.57 913.984 2222.65 912.941 2222.72 911.897 cv
2227.43 847.548 2234.75 712.043 2234.75 712.043 cv
2145.95 717.536 li
cp
.168627 .278431 .545098 rgb
f
2145.95 717.536 mo
2145.95 717.536 2149.13 757.19 2152.87 804.856 cv
2222.49 915.021 li
2222.57 913.984 2222.65 912.941 2222.72 911.897 cv
2227.43 847.548 2234.75 712.043 2234.75 712.043 cv
2145.95 717.536 li
cp
.137255 .219608 .384314 rgb
f
2160.46 722.245 mo
2160.46 722.245 2217.75 865.856 2255.42 933.346 cv
2293.09 1000.83 2304.86 1019.67 2304.86 1019.67 cv
2304.86 1019.67 2326.44 1011.04 2328.4 1005.15 cv
2328.4 1005.15 2314 874.859 2288.77 843.098 cv
2274.52 825.151 2257.78 771.293 2256.99 752.459 cv
2256.21 733.624 2251.89 696.349 2251.89 696.349 cv
2160.46 722.245 li
cp
.168627 .278431 .545098 rgb
f
2291.11 696.153 mo
2291.72 705.39 li
2291.72 705.39 2285.63 721.797 2302.69 730.214 cv
2302.69 730.214 2310 733.16 2310.29 727.473 cv
2310.59 721.785 2309.66 723.925 2310.25 715.915 cv
2310.84 707.906 2307.69 700.338 2302.4 697.789 cv
2298.05 692.772 li
2291.11 696.153 li
cp
1 .698039 .490196 rgb
f
2297.78 702.878 mo
2291.44 704.913 2290.42 704.452 2290.42 704.452 cv
2290.42 704.452 2259.56 648.264 2256.43 643.121 cv
2253.31 637.977 2190.91 580.111 2190.91 580.111 cv
2206.94 520.313 li
2206.94 520.313 2277.91 612.219 2285.58 625.407 cv
2298.24 647.2 2305.66 697.813 2305.66 697.813 cv
2305.66 697.813 2302.76 701.278 2297.78 702.878 cv
cp
.117647 .239216 .439216 rgb
f
2133.86 603.589 mo
2134.08 615.869 2134.79 629.674 2135.75 643.696 cv
2135.81 644.527 2135.87 645.357 2135.93 646.189 cv
2136.55 654.876 2137.21 663.582 2137.98 672.071 cv
2138.29 675.477 2138.62 678.841 2138.96 682.146 cv
2139.01 682.592 li
2139.04 683.828 2139.19 685.171 2139.32 686.396 cv
2142.45 718.194 2145.73 743.316 2146.34 743.703 cv
2147.07 744.188 2147.88 744.431 2148.78 744.325 cv
2157.12 743.278 2182 745.17 2202.37 740.738 cv
2219.56 737.112 2234.36 730.239 2250.05 720.97 cv
2252.13 719.739 2256.87 716.479 2256.49 714.044 cv
2256.11 711.367 2255.41 707.498 2254.52 702.634 cv
2251.43 685.721 2246.09 656.623 2244.27 622.572 cv
2243.92 616.229 2243.4 609.965 2242.73 603.805 cv
2240.99 587.762 2238.19 572.522 2234.43 558.985 cv
2227.44 533.837 2217.18 514.578 2204.3 507.044 cv
2202.62 506.102 2193.57 511.861 2185.26 517.196 cv
2177.58 522.119 2169.49 523.479 2161.63 522.793 cv
2154.71 530.445 li
2146.33 540.186 2137.41 553.152 2134.98 571.586 cv
2134.79 572.948 2134.64 574.395 2134.5 575.933 cv
2133.83 583.44 2133.67 592.945 2133.86 603.589 cv
cp
.164706 .305882 .588235 rgb
f
2133.86 603.589 mo
2134.08 615.869 2134.79 629.674 2135.75 643.696 cv
2135.81 644.527 2135.87 645.357 2135.93 646.189 cv
2183.57 616.374 2190.9 561.813 2190.9 561.813 cv
2167.47 562.841 2148.85 568.229 2134.5 575.933 cv
2133.83 583.44 2133.67 592.945 2133.86 603.589 cv
cp
.117647 .239216 .439216 rgb
f
1993.11 551.084 mo
1984.44 546.634 li
1984.44 546.634 1978.84 528.184 1957.93 530.824 cv
1957.93 530.824 1949.42 532.546 1952.98 537.854 cv
1956.55 543.161 1955.94 540.671 1960.8 548.25 cv
1965.66 555.83 1973.56 560.769 1980.01 559.893 cv
1987.26 561.81 li
1993.11 551.084 li
cp
.929412 .592157 .364706 rgb
f
1984.62 553.493 mo
1987.07 546.852 1990.89 547.282 1990.89 547.282 cv
1990.89 547.282 2061.72 564.932 2068.07 565.689 cv
2074.43 566.447 2144.34 538.392 2144.34 538.392 cv
2144.34 538.392 2171.86 526.041 2184.75 537.318 cv
2195.95 547.117 2196.46 559.53 2193.84 569.955 cv
2190.71 582.377 2180.2 591.555 2167.5 593.173 cv
2138.97 596.806 2082.07 603.645 2070.14 601.984 cv
2043.59 598.289 1983.44 563.566 1983.44 563.566 cv
1983.44 563.566 1982.69 558.711 1984.62 553.493 cv
cp
.164706 .305882 .588235 rgb
f
985.59 1082.64 mo
985.59 1082.64 987.603 1060.69 963.079 1060.69 cv
963.079 1060.69 970.51 1062.7 974.354 1066.74 cv
974.354 1066.74 958.713 1057.55 941.689 1071.66 cv
924.668 1085.77 935.245 1121.16 930.068 1127.88 cv
924.892 1134.6 904.733 1135.95 907.197 1157.67 cv
909.662 1179.4 971.174 1206.61 967.223 1224.58 cv
967.223 1224.58 991.33 1189.15 974.093 1172.98 cv
974.093 1172.98 982.494 1180.89 983.35 1190.3 cv
983.35 1190.3 985.63 1171.93 973.943 1166.06 cv
963.601 1160.86 955.129 1141.84 956.025 1138.45 cv
956.92 1135.05 985.59 1082.64 985.59 1082.64 cv
cp
.172549 .227451 .392157 rgb
f
963.32 1185.9 mo
959.54 1167.69 935.927 1162.04 924.755 1176.92 cv
922.746 1179.59 921.332 1182.75 920.871 1186.48 cv
918.321 1207.15 951.372 1291.35 956.105 1298.97 cv
964.722 1312.85 1015.46 1360.43 1015.46 1360.43 cv
1024.81 1354.76 li
1024.81 1354.76 988.824 1293.83 983.251 1288.13 cv
976.808 1281.54 970.502 1220.48 963.32 1185.9 cv
cp
.929412 .596078 .372549 rgb
f
957.879 1174.61 mo
957.879 1174.61 965.071 1182.08 968.356 1191.04 cv
968.356 1191.04 956.882 1223.99 930.068 1228.12 cv
930.068 1228.12 951.284 1174.59 957.879 1174.61 cv
cp
.666667 .254902 .243137 rgb
f
978.652 1079.55 mo
978.984 1078.21 949.598 1092.83 948.107 1094.49 cv
934.326 1109.77 938.255 1129.72 946.142 1129.92 cv
951.199 1130.04 950.219 1138.45 950.219 1138.45 cv
1006.56 1114.61 li
1006.56 1114.61 999.779 1075.05 978.652 1079.55 cv
cp
.172549 .227451 .392157 rgb
f
916.703 1557.25 mo
904.51 1555.46 li
904.51 1555.46 863.513 1522.88 857.407 1462.08 cv
856.785 1455.9 856.654 1449.62 857.117 1443.29 cv
857.17 1442.56 857.089 1441.83 856.691 1441.21 cv
856.691 1441.21 856.686 1441.2 856.677 1441.2 cv
855.365 1439.18 852.099 1434.14 847.678 1426.98 cv
843.319 1419.92 835.861 1406.57 827.654 1391.59 cv
812.871 1364.61 795.662 1332.35 789.757 1322.08 cv
770.947 1289.33 780.014 1267.3 780.014 1267.3 cv
780.014 1267.3 832.487 1262.12 846.867 1249.54 cv
852.045 1257.52 li
852.045 1257.52 863.415 1307.85 862.877 1308.08 cv
863.438 1309.8 864.006 1311.54 864.584 1313.31 cv
873.556 1341.01 883.877 1375.62 889.503 1403.81 cv
892.666 1419.67 894.342 1433.49 893.441 1442.91 cv
893.133 1446.14 893.508 1451.1 894.368 1457.23 cv
899.447 1493.35 916.703 1557.25 916.703 1557.25 cv
cp
.168627 .278431 .545098 rgb
f
942.279 1572.67 mo
891.41 1572.67 li
891.41 1572.67 890.19 1564.92 892.848 1559.04 cv
895.394 1553.39 899.022 1553.21 893.312 1544.37 cv
896.543 1547.7 906.935 1549.07 914.289 1548.08 cv
915.189 1549.54 920.099 1559.35 923.108 1561.51 cv
926.433 1563.9 941.256 1563.04 942.279 1572.67 cv
cp
.137255 .219608 .384314 rgb
f
864.584 1313.31 mo
860.14 1337.82 849.645 1378.61 827.654 1391.59 cv
812.871 1364.61 795.662 1332.35 789.757 1322.08 cv
770.947 1289.33 780.014 1267.3 780.014 1267.3 cv
780.014 1267.3 832.487 1262.12 846.867 1249.54 cv
852.045 1257.52 li
852.045 1257.52 863.415 1307.85 862.877 1308.08 cv
863.438 1309.8 864.006 1311.54 864.584 1313.31 cv
cp
f
828.906 1271.09 mo
829.078 1261.57 li
810.122 1263.96 763.718 1238.92 763.718 1238.92 cv
763.718 1238.92 743.887 1252.11 741.172 1289.78 cv
739.848 1308.17 731.465 1385.92 730.537 1409.14 cv
730.199 1417.55 730.087 1423.56 730.049 1425.96 cv
730.052 1425.97 730.052 1425.98 730.051 1425.98 cv
730.04 1426.71 729.695 1427.36 729.245 1427.94 cv
725.323 1432.93 721.92 1438.21 718.974 1443.69 cv
690.048 1497.5 705.175 1570.63 705.175 1570.63 cv
711.893 1568.92 li
711.893 1568.92 736.35 1493.11 752.334 1460.32 cv
755.047 1454.76 757.512 1450.44 759.573 1447.93 cv
765.584 1440.63 771.922 1428.23 778.169 1413.31 cv
789.977 1385.11 801.441 1347.89 809.616 1319.07 cv
810.193 1319.17 828.906 1271.09 828.906 1271.09 cv
cp
.168627 .278431 .545098 rgb
f
939.836 1207.59 mo
908.848 1200.48 928.646 1156.93 930.441 1157.7 cv
934.734 1156.82 944.165 1149.28 952.601 1134.56 cv
953.739 1135.55 li
972.773 1152.24 li
972.773 1152.24 968.373 1158.73 964.672 1165.08 cv
961.78 1170.06 959.321 1174.96 959.712 1176.65 cv
961.244 1177.85 948.102 1209.49 939.836 1207.59 cv
cp
1 .698039 .490196 rgb
f
972.771 1152.24 mo
972.771 1152.24 968.371 1158.72 964.672 1165.09 cv
952.839 1157.79 952.825 1143.14 953.737 1135.55 cv
972.771 1152.24 li
cp
.929412 .596078 .372549 rgb
f
973.3 1160.6 mo
973.3 1160.6 944.568 1144.61 954.8 1126.87 cv
965.031 1109.13 968.214 1095.12 986.991 1104.58 cv
1005.77 1114.04 1005.4 1122.84 1003.42 1129.59 cv
1001.45 1136.34 981.037 1164.3 973.3 1160.6 cv
cp
1 .698039 .490196 rgb
f
1008.28 1119.25 mo
1006.96 1111.37 1002.96 1110.62 1000.17 1111.14 cv
989.559 1093.6 972.223 1100.45 972.223 1100.45 cv
962.964 1112.06 949.576 1114.05 949.576 1114.05 cv
949.576 1114.05 952.911 1120.25 966.647 1124.09 cv
970.844 1125.26 975.607 1124.55 980.2 1123.01 cv
970.67 1128.32 960.703 1130.36 960.703 1130.36 cv
978.806 1132.01 996.031 1115.46 997.816 1113.69 cv
998.652 1116.26 1000.12 1121.63 999.24 1125.55 cv
998.048 1130.89 993.313 1140.55 996.204 1141.8 cv
996.204 1141.8 1010.25 1131.06 1008.28 1119.25 cv
cp
.172549 .227451 .392157 rgb
f
745.627 1572.67 mo
694.758 1572.67 li
694.758 1572.67 693.538 1564.92 696.195 1559.04 cv
698.741 1553.39 702.729 1550.83 701.773 1544 cv
705.007 1547.33 710.274 1551.06 717.629 1550.07 cv
718.53 1551.53 723.445 1559.35 726.455 1561.51 cv
729.78 1563.9 744.604 1563.04 745.627 1572.67 cv
cp
.137255 .219608 .384314 rgb
f
943.481 1242.11 mo
936.938 1244.39 927.75 1245.64 918.352 1246.67 cv
904.976 1248.13 891.164 1249.13 883.931 1252.01 cv
881.292 1253.06 879.527 1254.36 878.977 1256.02 cv
875.841 1265.45 862.021 1280 862.021 1280 cv
773.443 1275.97 763.718 1238.92 763.718 1238.92 cv
823.313 1169.62 924.22 1149.56 924.22 1149.56 cv
924.22 1149.56 931.428 1146.51 949.579 1160.93 cv
961.691 1170.56 960.096 1174.26 960.096 1174.26 cv
960.096 1174.26 962.744 1235.39 943.481 1242.11 cv
cp
.776471 .329412 .278431 rgb
f
918.352 1246.67 mo
904.976 1248.13 891.164 1249.13 883.931 1252.01 cv
880.975 1207.83 901.822 1174.6 901.822 1174.6 cv
901.822 1174.6 915.422 1229.95 918.352 1246.67 cv
cp
.666667 .254902 .243137 rgb
f
1314.34 1571.3 mo
1069.16 1571.3 li
1033.97 1571.3 1005.44 1542.77 1005.44 1507.58 cv
1005.44 1262.4 li
1005.44 1227.21 1033.97 1198.68 1069.16 1198.68 cv
1314.34 1198.68 li
1349.53 1198.68 1378.06 1227.21 1378.06 1262.4 cv
1378.06 1507.58 li
1378.06 1542.77 1349.53 1571.3 1314.34 1571.3 cv
cp
.890196 .941176 1 rgb
f
1329.8 1290.4 mo
1329.8 1472.35 li
1329.8 1484.81 1324.98 1496.13 1317.1 1504.58 cv
1308.47 1513.84 1296.17 1519.63 1282.52 1519.63 cv
1100.57 1519.63 li
1086.54 1519.63 1073.93 1513.52 1065.27 1503.8 cv
1057.82 1495.45 1053.29 1484.43 1053.29 1472.35 cv
1053.29 1290.4 li
1053.29 1264.29 1074.46 1243.12 1100.57 1243.12 cv
1282.52 1243.12 li
1308.63 1243.12 1329.8 1264.29 1329.8 1290.4 cv
cp
.823529 .894118 1 rgb
f
1155.92 1380.08 mo
1155.92 1380.08 1129.51 1332.18 1153.73 1311.03 cv
1177.95 1289.88 1220.59 1302.51 1228.44 1311.03 cv
1236.29 1319.56 1246.73 1343.82 1225.07 1378.31 cv
1155.92 1380.08 li
cp
.172549 .227451 .392157 rgb
f
1166.86 1399.79 mo
1166.86 1399.79 1165.91 1429.37 1162.12 1442.62 cv
1132.16 1463.52 li
1244.94 1480.39 li
1218.04 1443.23 li
1218.04 1443.23 1209.92 1403.58 1214.18 1388.91 cv
1218.44 1374.24 1166.86 1399.79 1166.86 1399.79 cv
cp
.709804 .435294 .25098 rgb
f
1166.7 1403.88 mo
1166.7 1403.87 1175.62 1425.35 1192.42 1424.87 cv
1209.21 1424.4 1213.04 1405.4 1213.04 1405.4 cv
1166.7 1403.88 li
cp
.6 .34902 .180392 rgb
f
1190.49 1416.58 mo
1178.32 1416.36 1155.92 1400.15 1155.92 1380.08 cv
1155.92 1348.76 li
1155.92 1341.43 1161.03 1335.44 1167.27 1335.44 cv
1213.71 1335.44 li
1219.96 1335.44 1225.07 1341.43 1225.07 1348.76 cv
1225.07 1378.31 li
1225.07 1399.36 1204.45 1416.82 1190.49 1416.58 cv
cp
.709804 .435294 .25098 rgb
f
1317.1 1504.58 mo
1308.47 1513.84 1296.17 1519.63 1282.52 1519.63 cv
1100.57 1519.63 li
1086.54 1519.63 1073.93 1513.52 1065.27 1503.8 cv
1104.27 1451.98 1128.99 1448.72 1129.63 1448.65 cv
1134.24 1447.22 1145.45 1443.96 1162.23 1442.24 cv
1162.23 1442.67 1175.29 1461.82 1190.7 1463.94 cv
1200.27 1460.16 1207.44 1456.46 1217.91 1442.55 cv
1229.77 1443.93 1242.94 1446.67 1256.59 1450.11 cv
1256.58 1450.04 li
1256.58 1450.04 1279.69 1455.84 1317.1 1504.58 cv
cp
.454902 .67451 .745098 rgb
f
1155.92 1361.46 mo
1155.92 1361.46 1164.36 1335.67 1192.05 1339.7 cv
1219.73 1343.72 1222.13 1349.63 1225.07 1356.5 cv
1228.01 1363.36 1233.69 1331.42 1233.69 1331.42 cv
1201.04 1321.71 li
1201.04 1321.71 1161.52 1326.21 1158.69 1332.83 cv
1155.85 1339.46 1155.85 1339.46 1155.85 1339.46 cv
1155.92 1361.46 li
cp
.172549 .227451 .392157 rgb
f
1188.23 1311.57 mo
1188.23 1311.57 1158.97 1284.98 1171.53 1279.3 cv
1184.08 1273.63 1188.23 1311.57 1188.23 1311.57 cv
cp
f
1187.05 1312.27 mo
1187.05 1312.27 1150.06 1298.33 1159.63 1288.43 cv
1169.21 1278.53 1187.05 1312.27 1187.05 1312.27 cv
cp
f
1189.47 1313.04 mo
1189.47 1313.04 1183.42 1278.75 1198.04 1279 cv
1212.66 1279.25 1189.47 1313.04 1189.47 1313.04 cv
cp
f
1191.52 1310.8 mo
1191.52 1310.8 1207.37 1273.92 1222.12 1277.37 cv
1236.87 1280.82 1191.52 1310.8 1191.52 1310.8 cv
cp
f
1190.71 1313.04 mo
1190.71 1313.04 1215.93 1281.81 1229.2 1289.11 cv
1242.46 1296.42 1190.71 1313.04 1190.71 1313.04 cv
cp
f
932.118 1166.06 mo
932.118 1166.06 898.595 1169.37 895.906 1191.15 cv
893.219 1212.93 928.048 1301.66 933.035 1309.69 cv
942.115 1324.32 995.587 1374.45 995.587 1374.45 cv
1005.44 1368.48 li
1005.44 1368.48 967.515 1304.27 961.642 1298.27 cv
952.424 1288.83 943.471 1173.6 932.118 1166.06 cv
cp
1 .698039 .490196 rgb
f
896.875 1204.26 mo
896.962 1204.75 927.813 1214.33 947.668 1204.26 cv
947.668 1204.26 951.917 1158.45 928.214 1160.93 cv
904.51 1163.42 890.475 1170.89 889.877 1182.23 cv
889.279 1193.58 896.875 1204.26 896.875 1204.26 cv
cp
.776471 .329412 .278431 rgb
f
995.587 1374.45 mo
995.587 1374.45 991.446 1390.18 995.587 1397.29 cv
999.727 1404.41 1005.44 1409.91 1005.44 1409.91 cv
1005.44 1368.48 li
995.587 1374.45 li
cp
1 .698039 .490196 rgb
f
2124.14 1571.3 mo
1862.41 1571.3 li
1948.44 1198.68 li
2197.55 1198.68 li
2209.01 1203.72 li
2124.14 1571.3 li
cp
.8 .627451 .498039 rgb
f
2111.53 1571.3 mo
1849.79 1571.3 li
1935.82 1198.68 li
2197.55 1198.68 li
2111.53 1571.3 li
cp
.890196 .941176 1 rgb
f
2127.28 1251.07 mo
2006.48 1251.07 li
2003.82 1251.07 2001.13 1253.25 2000.51 1255.92 cv
1999.9 1258.59 2001.58 1260.77 2004.24 1260.77 cv
2125.04 1260.77 li
2127.71 1260.77 2130.39 1258.59 2131.01 1255.92 cv
2131.63 1253.25 2129.95 1251.07 2127.28 1251.07 cv
cp
.796078 .886275 .968627 rgb
f
2124.68 1276.92 mo
1997.15 1276.92 li
1996.33 1276.92 1995.51 1277.58 1995.32 1278.4 cv
1995.13 1279.21 1995.65 1279.88 1996.46 1279.88 cv
2123.99 1279.88 li
2124.81 1279.88 2125.63 1279.21 2125.82 1278.4 cv
2126.01 1277.58 2125.49 1276.92 2124.68 1276.92 cv
cp
f
2123.1 1283.75 mo
1995.57 1283.75 li
1994.75 1283.75 1993.93 1284.42 1993.75 1285.23 cv
1993.56 1286.05 1994.07 1286.71 1994.88 1286.71 cv
2122.42 1286.71 li
2123.23 1286.71 2124.05 1286.05 2124.24 1285.23 cv
2124.43 1284.42 2123.92 1283.75 2123.1 1283.75 cv
cp
f
1951.03 1260.77 mo
1983.66 1260.77 li
1986.33 1260.77 1989.02 1258.59 1989.63 1255.92 cv
1990.25 1253.25 1988.57 1251.07 1985.9 1251.07 cv
1953.27 1251.07 li
1950.6 1251.07 1947.91 1253.25 1947.29 1255.92 cv
1946.68 1258.59 1948.36 1260.77 1951.03 1260.77 cv
cp
f
2107.38 1326.28 mo
1986.59 1326.28 li
1983.92 1326.28 1981.23 1328.47 1980.62 1331.13 cv
1980 1333.8 1981.68 1335.99 1984.35 1335.99 cv
2105.14 1335.99 li
2107.81 1335.99 2110.5 1333.8 2111.11 1331.13 cv
2111.73 1328.47 2110.05 1326.28 2107.38 1326.28 cv
cp
f
2104.78 1352.13 mo
1977.25 1352.13 li
1976.44 1352.13 1975.62 1352.8 1975.43 1353.62 cv
1975.24 1354.43 1975.75 1355.1 1976.57 1355.1 cv
2104.1 1355.1 li
2104.91 1355.1 2105.73 1354.43 2105.92 1353.62 cv
2106.11 1352.8 2105.6 1352.13 2104.78 1352.13 cv
cp
f
2103.21 1358.96 mo
1975.67 1358.96 li
1974.86 1358.96 1974.04 1359.63 1973.85 1360.45 cv
1973.66 1361.26 1974.17 1361.93 1974.99 1361.93 cv
2102.52 1361.93 li
2103.34 1361.93 2104.16 1361.26 2104.35 1360.45 cv
2104.53 1359.63 2104.02 1358.96 2103.21 1358.96 cv
cp
f
1931.13 1335.99 mo
1963.77 1335.99 li
1966.44 1335.99 1969.12 1333.8 1969.74 1331.13 cv
1970.36 1328.47 1968.68 1326.28 1966.01 1326.28 cv
1933.37 1326.28 li
1930.7 1326.28 1928.01 1328.47 1927.4 1331.13 cv
1926.78 1333.8 1928.46 1335.99 1931.13 1335.99 cv
cp
f
2091.53 1401.5 mo
1970.74 1401.5 li
1968.07 1401.5 1965.38 1403.68 1964.76 1406.35 cv
1964.15 1409.02 1965.83 1411.2 1968.5 1411.2 cv
2089.29 1411.2 li
2091.96 1411.2 2094.64 1409.02 2095.26 1406.35 cv
2095.88 1403.68 2094.2 1401.5 2091.53 1401.5 cv
cp
f
2088.93 1427.35 mo
1961.4 1427.35 li
1960.58 1427.35 1959.76 1428.02 1959.57 1428.83 cv
1959.39 1429.65 1959.9 1430.31 1960.71 1430.31 cv
2088.25 1430.31 li
2089.06 1430.31 2089.88 1429.65 2090.07 1428.83 cv
2090.26 1428.02 2089.75 1427.35 2088.93 1427.35 cv
cp
f
2087.35 1434.18 mo
1959.82 1434.18 li
1959.01 1434.18 1958.19 1434.85 1958 1435.66 cv
1957.81 1436.48 1958.32 1437.14 1959.14 1437.14 cv
2086.67 1437.14 li
2087.48 1437.14 2088.3 1436.48 2088.49 1435.66 cv
2088.68 1434.85 2088.17 1434.18 2087.35 1434.18 cv
cp
f
1915.28 1411.2 mo
1947.91 1411.2 li
1950.58 1411.2 1953.27 1409.02 1953.89 1406.35 cv
1954.5 1403.68 1952.82 1401.5 1950.16 1401.5 cv
1917.52 1401.5 li
1914.85 1401.5 1912.16 1403.68 1911.55 1406.35 cv
1910.93 1409.02 1912.61 1411.2 1915.28 1411.2 cv
cp
f
2073.03 1479.78 mo
1952.24 1479.78 li
1949.57 1479.78 1946.89 1481.96 1946.27 1484.63 cv
1945.65 1487.3 1947.33 1489.49 1950 1489.49 cv
2070.79 1489.49 li
2073.46 1489.49 2076.15 1487.3 2076.77 1484.63 cv
2077.38 1481.96 2075.7 1479.78 2073.03 1479.78 cv
cp
f
2070.44 1505.63 mo
1942.9 1505.63 li
1942.09 1505.63 1941.27 1506.3 1941.08 1507.11 cv
1940.89 1507.93 1941.4 1508.6 1942.22 1508.6 cv
2069.75 1508.6 li
2070.57 1508.6 2071.39 1507.93 2071.58 1507.11 cv
2071.76 1506.3 2071.25 1505.63 2070.44 1505.63 cv
cp
f
2068.86 1512.46 mo
1941.33 1512.46 li
1940.51 1512.46 1939.69 1513.13 1939.5 1513.94 cv
1939.32 1514.76 1939.83 1515.43 1940.64 1515.43 cv
2068.17 1515.43 li
2068.99 1515.43 2069.81 1514.76 2070 1513.94 cv
2070.19 1513.13 2069.67 1512.46 2068.86 1512.46 cv
cp
f
1931.66 1479.78 mo
1899.03 1479.78 li
1896.36 1479.78 1893.67 1481.96 1893.05 1484.63 cv
1892.44 1487.3 1894.12 1489.49 1896.79 1489.49 cv
1929.42 1489.49 li
1932.09 1489.49 1934.78 1487.3 1935.39 1484.63 cv
1936.01 1481.96 1934.33 1479.78 1931.66 1479.78 cv
cp
f
2107.26 1226.16 mo
2005.83 1226.16 li
1998.89 1226.16 1993.75 1219.7 1995.31 1212.94 cv
1999.13 1196.39 li
2124.01 1196.39 li
2119.36 1216.53 li
2118.06 1222.17 2113.04 1226.16 2107.26 1226.16 cv
cp
.933333 .596078 .286275 rgb
f
2124.01 1196.39 mo
2132.6 1198.68 li
2123.48 1198.68 li
2124.01 1196.39 li
cp
.929412 .490196 .168627 rgb
f
2183.89 1562.64 mo
2183.89 1565.02 2182.92 1567.19 2181.35 1568.76 cv
2180.21 1569.9 2178.75 1570.72 2177.13 1571.09 cv
2176.51 1571.23 2175.87 1571.3 2175.22 1571.3 cv
1931.19 1571.3 li
1926.43 1571.3 1922.53 1567.4 1922.53 1562.64 cv
1922.53 1560.26 1923.5 1558.09 1925.07 1556.51 cv
1926.64 1554.94 1928.81 1553.97 1931.19 1553.97 cv
2175.22 1553.97 li
2175.87 1553.97 2176.51 1554.05 2177.13 1554.19 cv
2180.99 1555.06 2183.89 1558.52 2183.89 1562.64 cv
cp
.933333 .596078 .286275 rgb
f
2177.12 1553.97 mo
2208.99 1561.02 li
2177.12 1571.3 li
2177.12 1553.97 li
cp
.45098 .603922 .941176 rgb
f
1984.96 1553.97 mo
1984.96 1571.3 li
1931.19 1571.3 li
1926.43 1571.3 1922.53 1567.4 1922.53 1562.64 cv
1922.53 1560.26 1923.5 1558.09 1925.07 1556.51 cv
1926.64 1554.94 1928.81 1553.97 1931.19 1553.97 cv
1984.96 1553.97 li
cp
f
2698.51 1577.79 mo
157.032 1577.79 li
155.445 1577.79 154.146 1576.49 154.146 1574.91 cv
154.146 1573.92 li
154.146 1572.33 155.445 1571.04 157.032 1571.04 cv
2698.51 1571.04 li
2700.1 1571.04 2701.4 1572.33 2701.4 1573.92 cv
2701.4 1574.91 li
2701.4 1576.49 2700.1 1577.79 2698.51 1577.79 cv
cp
.180392 .207843 .321569 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Employers choosing candidates for job interview.eps)
%%CreationDate: 4/3/2020 3:55 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6flAQ8(+A>.NmL"@7M'&a%iUf?#tYEL4J2`_JJ\_/E6d/8i!<[Spr-\AJ0Xt"f.RV(f_9j4ks'3#em-^d"mcHCFN;c5.P"T'
%Pq1INCLnP,V!.'IeK'+9keCRB+rmnuLe-$2nU#Zbn<*5.r8Z_.d&g,SS;%om3?:r68XZ9Ae9IL\q_U*h=jk(+U#h10"A_S3'@lR#
%Ip,`uZIo?K,`BKbY1ojp1c$7%(;f8.U0e464Z2X#>M%=iK48;U:rJ-<pX`9GG@Su?kS\h=^PD-o!ViWd9dX80!%8a^-(g?\"oO8W
%DgSH[TAB$j+X^QAph&]9B'@WmA9q`;"C\&D2&Q#.$,t=9jRp*:i3=*s/-!c,!3frP'2cX6Kq8#`??aKR,qM6`2rY;\dBLRnrX,ib
%FJSp";Lc\;"c@+n$qIHG1T>Qt$*YcY!O%jgb<;k!q\4*1lqRNf+nT!'V:QI<UAEdWZ&;kZ6tAXa-cEc)M]0]b;A1bQFFOXS'XL11
%-t#eBj=^j8/\qIu),\9iI?+S*"JZ`61hm%:n:Au<:Ji<D+X.1]&:bq@!a%eebB4;AK)P0M_JgR>?tsVImUp_\MaRZOpCK:LH)B=/
%-U$h&7+a^0(O&:<?^1SO)_rPOA3p`N*!!mQY9`JpF^J,lkj5O=V?_&u`pdaN0[:7!<1j0NSr-n%1XO*_`8Q;sW*e$3L$fLq]^q2"
%p0"1tmSC[:4@;n7`F57mq1gQTU)T?YSn_#6#0_#/Emsdb?gJQ_X5E)eonU2`rW)^H7'Q[p^$K[R&GR8.&,P4*$i;%XjrP)nMZNT9
%#_!;iD8K`.[fF`KG"6_._#]uZP_FMmhF1ef^MWa!cMJKZ%G&)B_(/Vnm!.Hu_Hq4u5lr5Ci/ds=LA]scpb*VkY^L)<Io(Q>"QAqo
%/`a-IGp&Lec</5;E_%r$oO,M/m"1Q)S\onoE[6h`%U7T-J7%5-BQAdZg'*R2h*8\g8AHBN_Zm/N"Qg-+K\?\[(cII<_?*/$3^?M?
%_q''P!YJl7778!fDieljd!u:R1U?;L6%eTL`re.NJfBW4p1O^4Ol&MiDXht*0sb/:O(bLp,jU+kLPFXl_?Y`_>]QcE+56i@);orO
%HGO!BJRQuN68?BI+\QK\3pp*b1u2N/fKR%u!>%+J#3;b6\.Wgicmt82N+N-i#'N93)&NX=QTBGEPIt<Ga+6EtJ>gBQkdf*=aaV#%
%acN8m\%,`HHkL_Jb?VeMK*Jijo.l0\jfpFY)WSdL=A?/#PZSP\LJ&m/qAs6'L)PcbQkq^_?=%UsiH0R:(J[/[$;_G]JG`7Hj[>.U
%gZek;77.gT[]06t:7<1rWS:fOVFqdT*lujumLYcEQKkh=TieX[OHV!+.sI"!XS)oj30<1;Y[9X;G+=b</.Nn,#Nhl4Huun-%84R]
%5-3W(JQk!_:4l(3Cl*^]O&r/ni!l@*R;NZVpE]@Ri)/9=qeOP#JqksD;l8<::+0Ka3'kG-_iW#!bmn^K(i"k1pai#rE$@K!IjVq'
%i<C@WJ?O'&[s4pGe)@4;d2unKb-h)PgR<4@RLR@>gBn@>CZer<A3*]aZSTG5L2XROFHXUhZ9RW9Fi"upD@6OifP":+d)_]>KJAF*
%C84d]r+QT#A?Ape,nBrh@4k"2YOtBD(Bt5]"C-o*\Sa0B11_A&i!_Il@nNtD)%o=#Ho4jfp'-LRBolgSa&(YlJ2tmX/)%063M/$<
%_s-*V3?eEqE9)h^nZ$OHda^o*=@^B0NDVbSjM\l/ep:?;_<#6e(dj:\I2ji`2oHCg>%8oO`b_`VW1&jqOGm>7ngg+B(_8GiOrdI/
%#qU@\8J.GpMT`$lP\F$@em64uT="*Sfh]M.?T$Z5Q8k,hiEQ,(8^i;(4[u"_`cClLUHg0$nGkZhWbmT2?+I@1B(K9<^t+e*\oR+i
%_U!Deg'e:(q>N8-*WI*l%O2t#TtVM$FPQ_5>@2:6bAD[<XY70VjaOEe(\gS9*#:<!jNFBu5H'%=6al2CJ&LK>bP)+O*BYTr[_K^p
%8ec%8!I>Br*>hRU)=!88as>"_R\e81Kib$6e^@D9Cc1Ctl$1u0LFI*,f%Y)^@(-o3ph6e=#Mm7Zj/j%'EkLM=p<nk:\&ZudB/OMp
%>/*A5D<*286gG=ro/0B>d[qOs^I>#4Ie@\iK3Z#gnJk#ea*>b6aX1#)P'@8SRVtX36>41*O.3-"\lhiNXD"49KAus_dltlaru09P
%C5@MnlmjSR&0JYD4WI6g;tu3QCoG5PS1a:q@iG:ZK.-b)U$ii:_ID=a?ik7%QKnYQ/fUQZGDD@p?;S`=qh@u0Q>28_)`H..q/KU?
%fU?pLD$#nE)`)gBlTI%nk4=tpj]FGJJ>!a)>.0H5116kWYndfZ=of0P%Y;$r-[U:^*;o,^"-/o:X\_]R9R"o&:_T?.jc.]I5Ada^
%KVi+'h:V0kcq+mTjgYllf1i`CM=d6>Dl]DT.uO.u+=/tpg;.-05BB#;lR92E50L7,Li&H=(,frijccS+IYshtIq%aTXaQ)QIn%h?
%.u;#olQ4$a>"Ck>O,7gcP]\cmX#n:/9toSdB!g*B7ooU[5P(eKRUP-Y0mg2co3jskXjlX4R8F21n;/=Vf$FlZMQsQ*@m<8(rMC4/
%Fi@oB]`(WKkRYai`N$7JpZ7C>hm,9.Hcbq9X'FR%S-Acl$feKOCYdUR(WU"?d-?(=jQ(0#5DRus<;/=j]U+UT4;c.UMW3=Y!t)F+
%>GS;'[le*<FU:8uk?tENohV`(@'J2D81P*ZepbpoM6W&&mZ>=0eZVl!F;#/0Y/\[9X2;&lZ.EM-^Y)[hXDK`KnYf5A.<l6L'fju=
%PqsOKG8P[u)r^%+/c>W#1EQqV7q75"7i[GODn+@2EU?aX7SIZ?FOZHaZWs>cA$>.G','U_hlu6Ph,ahVXlW$DpONqPfUPs&J]tE$
%rOT,>2J,ul]A)f7V,$\bBME/SIqci`qS\O<>e="0Jfu-[8.!)8&I+!2.GCs4aWWgc?p1gKS.;DW)tl&2,`PlZ<Y0lm><!u<Z)q&\
%#"'P@$"JQjXY.6n'PD`FVJE9$gC-6\O`dVUb*WUT"/Kr75C.H3OSqDc?Pn\)(^^q>_)*UnQE*?Oh]5T?7e'09lo3m/g))f+9ipU_
%OMgJd9*RJ-f*Hi@_/-9q2A9XR*44j(b!a'3AlHP_gJ!iSMU,aOf"/'X++7iGcEUs8>SI[W[E(dNrhNd5*+Urrok\k*$AN9*+h9!c
%6L/$]N:kLcC&Xo5'HCYl\L?3;P^eIsg#f$1RBL+^JFYL;;6V>*g8ir"P`(-GbbeLlS">Oi2&GSm3dtfr9(OFlU>R0#.B@oc]/6"E
%;hHro-D\X2kAmm>cbmopg<RY!*DWk"'Cf9sZ-![VW:LC\`Hh`Z#ub2OKP2%l(J_neHd^6_%kRT0#@jr:YaRXbAh2KWaL0AqY$mE"
%/(_4MD(F3r6EXl;nB9BfqcW&""XeFCe[ABC5?k.)NO9j>XDOff<iZ*g9/Yso:jiNEgZq<A$kb,&-+d"nJD4XGIMmjKb6W_'gL[`t
%7P^PAH7_FA"?mUc$<@Y/V!Y1`0d%IYh7on;\PN4)0=`!?,maJ(06u8>q8Z;6>4^C#9fp"a4)@d]mSNf?9j(ZOLa"2aX>;[YD-)GF
%%m$&s81ncjV,>-H%1]3XE0tTk.a<jTqLL#fN(<@g'P!Bi4UG[WX2mWGI9m9n"Fn*#n6[/_#62]Z"3^-^$X'#*@ckUqFYf#+et%9i
%#"Nkpq70TDNGhK'59;lcM.ul<ngJt>SdQlpXh-DG]lg^]7Ip(Y7#uobH8F*7;[^aS<=4=7O538t!K:Dn:Ffm$SIF.aAH;oB*45F(
%A2j]mBKBY]TU!YF_nj+E38b(Ch?mg/a`Jo$!B%\*]c3dgbmE><d?<-'bXUj<hfSYQO&2"/\.N.iDDrm[BNs`1h>c<DrSJnCag^++
%?!";Ch>c=!s).R\\,3qprElrMg@#"?kaO8,B0F*P@%TB<Bh<4:I+L2aZKC\Lm@NcicZd"aCYI"K0QOblp2j!)konE86Q@/:H"0ju
%p5A51ks(/)lutZU'@=PFKElI*@&SH]AQC:`A>it/A1q`3191FCPY[]*0Pb[UOuH`hfsgC<Q<W3181@tWo[>>/[Lof^K^@UapL<@C
%D4#-F_dqNFHadFhD4#,gIS0O%Tr;B>=G]uskcX>$*WMm-pSg`STiuH)+buN`g=uDU.ZW<#Lh9P5n-q21,\akGE?;s3M>V"10V)l_
%2COc>I*37[Beis.LaYPfA#6^b):m1`EAl-4Z98ag5<5ID%6gk9n6nGRR_\&sITtpLqJmU3H1nERn0P:?Z*UX8$pb<8_N389Uj;[!
%D;\tEGhE:-[Xjc^i+3jPf`kckJJU[J"iDm-i.[*+T_Q\gn?U%TkVhp>-Le<%j5T7_q5d9jWQI4`)]_6@E<f4*$;.CJLukO7df/s%
%d4-HkAfip^F$RP7Y_i%g@GMH`^qjH+fYgC)b&=ii@a-\5f3^c9]9>#'eVptUQ/`bj[&n@R%jPZAQ/hQ`VDVD7p]>^-oqG#RG[kjU
%p&q7bFTRb`H/5(+ZorhO<G\*TeuKgs7K9p3Uujo'OJ8@IQ&fpnf![&XD+oP@05&>8.'ePH;^lIg.b;JQ5tc7@E;45)QcIfQ0=os\
%;\QYZ(oi9=OuI7&h]Np='7GCVB(oq!"7%j$5P;>KXbZW14>\8?4YZ$F5J&MK]Ig;BWq7=ja$HRiiMAgH%9J7DkWNjFpmo<L?3uoM
%,)F'e3;2eJc!NRYE#b!IgGm2VGQORU*+OVKRZ3A<7".B@!saTu*+NhKh+_,FgGm22Nj3IXZ]/I2itr^Ja+1npKZ)$8g3Un+@@t*T
%ONe*b^S\V&C!>pjL4g/M?O9?L-"lhN-=bVdE>D6#*)ekPqOUU&-B91@BYQ%PE)(s%:'W_.1&o$=V3X#G'iIE13pBD.>2`aiKE/H]
%Fo,:Na]bla8RY"^2s->N*+ZK*4:;L9HdL+hn#j]mnCtj+e1b*Z_g/\'o4UqGb0T4d19fI@4hqYZW7gGi_79,N6K?_co]i[5Ss=u8
%DIdB+XY0BYk1H?a(&4b&RDuTEo\sHe"b5=l-Wk!R]"?e5n^*J"L2+sJH#3Y[3&-AaPjjB\bU+W`M9;Np<Kk**AZo=d(Ch+]H--p5
%$9pW2CLUh?D;'/bfBrOITm2O_S8BOC_egtLnSidP]W@[+0=P9%*$1G`]t)[pQE<*Tp#c6P]f?L"D!T>_]t(7([nRC^o]Iog<nL5m
%%Kj&>41B@q[dMr%S_L_s>BfMU\oY][jN_0WZUsT?"&66g)%oH`DLK('nE!on&+J`NOSIN.geYP4!Q3mL*ltS^OpfJ8q@0t>DWB'.
%fUe/74]c(pc]qTUE^*'=/a%YCeHDZE^i<cN.??@_A@!)]YWpM[ZItfHMID3^a-0kYS1$8HDH2(>Goce%X<UDd2J!cf+QI>".f+/4
%9jH!?M/%,7m`tXUf"i1D/=QQ@Z>Hr:bJQ=<K=eQH9b5X"hDehnnr6X(gn,Ug1A<tV0t9kP3(ac^^9B*bY]&0o2G#GU:=a_k=CG_l
%NMfI>Cf7cVad[2hfS.\f^;b;*oFh/BZp4J]P7Y`:6W>.T_[I&Kg9++;qD#npq9SJ:MRC,HZs4>08G0(B9V1-Q5%V=H7O[54a?"h6
%5`cO*EN4F3Xgt'AmqaS.[C-K;?"CQ%ecF%sHp$QE^IIjW_K(fO?WgklJfh'#-ZJdEX\lG_MLM<t['baV5*.8'L,[g7qJd[+PP<&"
%\^Bmco9@jVFuHI'iPu28HWk9^P5uW)MS1^&Oe1.<^'oe4HK1Z@&<RA+s*E^U,HH,@'NHF-STG&Mecc6sV'1=li\#\1HN!MH^H3m.
%>tl,UWuT_nTP]tSH5J*sXrMG#fIFqL(Vjgi(JT4m>MZgb\oAB.aP4lBf@B*\4gK$Jk2Wq2@O!nm#G0oGZYgNXaTp%-ms<`q,Dcg>
%n(D*<D8Ql2)N^URN"[Nr6A?-h0DBt(:Vnd)fV4EdbDU;K#qKfYPu\s=4k<1rgL)I]b'C/^f%PG.M4\?"rR<&UIXafA.bE%eT98*L
%YfYMrO:9`:3$mVZ7@@2.cHX,'*d3gLItJ9"pi3ie-4I:(\TTl=P6>bL5br-Znhf:L:*MAN2f$0[#b5[k2q":`:)$/TiMN`ONAmec
%Orf4fp=Q70>aJT%r+"PpGX=<-Ap5JoP<KAo`W\^(*]O!FCV=1kP+)rNQ&QJ&5DdM;@>ib.e(H:eA[>CC)=d<P=_aeT+iqWR--nH'
%*0/c52^tgOci:N%LH./-mB'.42'<hMpgC@1XX1XiIAkC#8pO)'qcaSD?@L_-=T4m+bMP,XPF!C4,`@>bSfP7mbE1(h624CWRN@b\
%0Be?<(\`96qWn]g:Nl_W4du8=./PR;9WIT\l7l\2b9?iI&:K2d@XA+X-,FnS"#sS=nKVYGFpFd+,rG0rDVuU#rs&K&ObCJK^`RdQ
%96e>tMq8sV7L?pB56Q?WJ%u+-Kq]acL^6D^54gKoKL=aSa!C#+:[*0&"i">n:LE%h5:qQ?Eb0NAo3,<Zi*cf7*IuoH"%;CsOM9^k
%;bF_%r]gG^n!8J%c[YtEJ,f8Xs5/>)07X#R^]3'Gs3JIZ[fu70H@5q7/fY<h&=R%2cNg_4HAPIKa'i[!U$2YX/t"h3/gup3C,2Jb
%1s-:*ESFeLi;N2!5p9Ds-&BM"59V?7%sIqLDQ6RU<]TgVK9eXrRt?.#VWF%%E++"RppL=`lcuJgO_78+^-Cd!!p^XcXSs+pkW\@u
%IupgK`NNGV3/fV7F#j:r5_bd/RN9m@r""nhi)c>4!^B4TR*&oUK`E#!.cK:8c'"`58a_5BY3%mGgCB#!qB$t=NZ5!(cknr#FCU$P
%N9+D*SlA)8MrIR4:H*Wbi<_ha,^`PR=s2J]%cMPG`lXpI/`<$H27Z3/?m$q9^.bD+S1(tgbs<A2'O;Qb_-.^91VIfu0J=,LJ)H4g
%fQKCp*obkCN[OI,%E..BA^T.tKQ\<aTjSo#F6^MMh,KATRf;.'q,p@9h#;@(pj3)gq7,=!rZ!Z\MZb4>:PC"i3[eKDf8BhV?J)l9
%e;/(^CPWncjh5=AP3[JH!P+:8DMHi`/GqBAa@/Lk`q*c/p5MQ2CJAaLdO%E3HMB>\$*YsQ<-rZ'F?bb;Q=qtY0<L3GJYXM0VaWO#
%YD3hnPhTB#@mEc0(,2qX0UV(@K@t$[0bQ%/PI*eD#tm/+Vl3XU*o0KcQ9VH9\LDqHj<*R^FG&p]W6qt:jtdj>DaQEaoSjDX1\<*;
%:h13?ks$R22P4.?Tl;Dr$2_C=gOGXZ%O['5[`YsQ0s\4*6cjGjUH\M>MI_#qh>[C<rr2A9s0mLVQbWRdhuEH.s6]:TqQKqT!e0pZ
%rr.D`a8bC2s5dVfX!JSd,eY.?Rt-AYAL24G_;eTl<k+e"?=1JlOaq+]'rkW9/*sLmEL,RD(-i0hp.857M]b^+8LVPVEL^Pd%@Ug2
%>dWs'N>)+GLrMQnPsk<RH>,dU=s>h,5Qc&^;Z\&%k_ZScg$aq)ddV>*)KjlkNre[H-J`<&*_dD%am"Je<64T_@_2T8Phd[E"C^7,
%g!UhfboT$==?[UK3mqs$*RfFW6<Sj'O5_7fXeV0o3MIA6\3$)O`IqJnCqqAC7m`,YpOT82@"Sd0@Mk494?<J$X4m^S$$ZT$!FJ7$
%2iA3*DMm9DPG&+f@b@%[!`5Rucl^bT8k@!1fN($;_oC[QLlaj\(RjoghD@7jK,dr]EY5UV/2PeC@fE#O2<qB%-/7][a@<YrSa`.C
%"G@g^CE\-8*51UX;Bgmg;t?-XPj+=G.\bQpHR/oa?pY;'7j,kdMe#Ng&e6+37?'A1b9Fs2<%,P"dtrrQKJ2+S-R6F7#-[N$<MgUX
%Z5"(:H,*5KR`+t3$N2GY'kkrM4Y0-@?GC+<1tD%f#p7Z4Qj.`MN##8KKU7'AHn?#TURH%^+iN5)/)_c`oO6d;^e)@51d^E59Sq![
%$i'o@;/;VeXsX=aA:sRPTO(Ob(c<+bCY2TAhEWb-ef$2V.ikj9WH^"3JTXK\U7qU[QkA,")2g;kY86@1$t;i\*rm-[Zp;0cW9/Ou
%ZqB4ip:DQRb$jZ$0<iS`!=t5G&4U8c'FCsL_j%`7;JdrC&']r!%HS6@ct%LQ3(Gm+jRBKO))d9:Uhh%pU4ag*#g=2?b."Db;UG%u
%W/)cApKd&[+N)i9!h,kI`.0(;F/)HU?j$f%=*k>ehs=\`/`SU?g`;d`WSJ@7[B-]b7&b,l)%,cc.1)icV*t8JoaNkp(^^0/OKsfm
%%,DSFWgR7TgrZQor;nt[C&rj_QssYY1Rp;UQ=rNaW%)>[V(HF9rWkg]"t:.)Hem+,dpB>IS+c`l6FmCI!lG.:<E=H;JgNLJF=i"m
%j;=(%';.s1jajUA"XY7:PQT_S(c^FY%.#?.L5^h`YRDc^"kA<i0sm9!HKDk&m]q-ZXomAB#tH^NO4Y-8Br#MMIfYF4Yad60,npQs
%^ojnf\L30gE<f1;[#]/_Le11JYY5[-oRr+>(A1aoC=:"cad7$RAo%SUW?@`Lds=eTC!hbQ3gtDeKcXj(3?0A"VjV[G<G'p"E<X$^
%@lC$RZge:3'qJ4h-k?,fdS,R6WQ6ZLkF/!`T*P2E64#&]hWZP&G]E=q7CB_UJ]-PqZcc$NT*72`#3N*Wr]mXr$D&LW4JHU;'iM!N
%1c,loS=*39R0bZdD`@btPmM91<jS5Ca21-!+G4N51YZus=u7[r77/KWhC,KOKo;$E=*4fo(X0+k)J.t^.VtqKRb>^#[#qhuW=!pZ
%%46))%[GNeUu(^)(6)!\GDHYo/qFgsCIM-J`9=,^Mf-$p^i9Hooquh<1[Q;uZJRTS2XY]X%=i+f5nmll"rJ-"R"@\9%%756[kGlX
%D+o2HfF0\94-H^*c6%do^7ZFa@@O\rlj4n'bAnQP7LHDo:`"0'Sf-[8dW`1Q^<gNs3iVi]RrdsBYt:LpUXfFt+8mA^-q5f+?J/Q`
%Z)-0EN^aH/:'WCf`51Q[g1\k#p[OQOZE84e/J92];9bE4SLPiMp'.m-FpDDl\GJMrnZ=Z1AXcG.55Gj"8)-L'^GR5R8&Q3dLEcT^
%fo6GId/Z',nu$&5r3BiMT]-dtIY7)"<Iu_VSlATa]9S>$3h=[Hk_)]Tb'#S"J=<1IT7NAC;<.*-OAlPWW%S&R[fN8Y-Yc5^]/-U[
%\i^ih\s!.T)Z`mGQI!T&b'h8m&:FY_-G]<Xdlr<p@Qch];aGU-dG3eOZS/E6S8#NJV@/>k;BB:GD:o-)[6lbMjOmk7fn^$?lgb,Z
%r9;eq6*:fl!(D,iS"Z:"Tf9lDIi)QSDN=S<?TJgXD:BQN)#)0B'4@/"bnU[=_3FW7&I(8*L3a,a4pO5022&]KY%3:3`\;[@Q\A9m
%<e<u1L/(sgo98T1>XWI::fZ#][Qs%D_b))3e;)b.!>)"q9nj],[=LeD(MJ,iG)R[sh%22\nJ``0eseo:%3PqQWWo6k7#I=.A#Zb2
%f1W@DJ7Nt9`CM[dM^-&O/00T$3bf0QmT/41riqGP9UhU_\glHoV[['/qUK1n%+#a,>cQArf\PaXRnmtNa6k,D8P8\\2-N<#*B5uf
%"!3%'JasZso[YBtJ#'R`U!='VpUEQl>FX'9(2QE6?mKLn`[B2%[6I*dYaXqYCZLdO\]+M>75KZqDUB"]NM`=(9f3i0$;qLl;k%!r
%+WJ3RBF5HF5#`@H,\ML&[?gH`W@)[^Mm;.2UDBs\?L0uJU4EaTgo)r^`^%f&dpZ19=kH36B0W!\rb'rJ_kF=#XjbM@M.dBpG*FRQ
%"#mMsakc#.8Uo7\C+E>'/;,Yj#ePI=T@Y$,[;.d>"(:(Zm6EPX&i>4.QP`rT(_XT#e/\D7o9(COkt+D1,oasPRA59UO_*o[`Lj7/
%l'TW?9sj_(A3[EonB?3DHeD!i*N>Y_NOT,1h;`PM0</BVQo67t1qtnBL`9ECCb!bm/SO`ZaC1"]F&icS,$F`N8h^=2AD"B<cM>[g
%@@uU,2U[3Y9B@`6=B\R12@0WmA!PQ7fs^1mIhoUIgout/V:b64O[VYoQ=WKK+O9(BY0JC@8796W"OM.W*3o;G>tS2uR+Qmgf1c*=
%Y37%blnJ&3Yl:7^[M3,(rYi<A?jCLO!o3)[:<KXdJQ+&HrN<;)_7s?JJ9`N1QC\fK#:j>>l1Z-ID>BHuZ]Ou+e/33_12;XMJ9JD"
%U?S^;a[4brUFhC+=#[Y1\'9K7I\7Tu#FCeW[1;+B$cu3\+AXRoFNFS8*lq5hbF]eiBGm"`5fP+*(<CWAoH)?9E7-;u(d:X%kQVSJ
%R@K?AjgNs(;9.V`R!hc]nLo3')$,JucpJ2[E\SI:gZ^*=*Ep$Ap-"=eiLL_a=Qj,un@)))fMRj<FAXHR[.Hr`]jEI!$d92j.5pR)
%4Df9"J;_;R$BBq5Z&gtjJ<,4S\'Su35i&\V3pa]JB",cpk.(Qcggmu@,O\qsKbX\+5ia0@;?gS@A&^%K-d5!.os\JL84iKGEV#X%
%+"7IITP]S_XsDo3`cMI6&Z[o>;Gr$:Pp^/-["kOtMPBCA.r8,s\oOq\HmNNj"-,kTZ4LsA"@EBdi8$(e=\bZf(]he_l2@%p%&1Fu
%=nu?e,lcg7!(qWHn'sJJ6"<H/q`L.':e?T5R=oAp"#NU]d*Z\Y<"GnA-;03IU`0rHC#l7P;$MqHF/U"&JqQQ9ef7Lm?lf2;1HgS0
%csPO4&cStLUC@B`0E?]a`7+8!2e3ci_dTr%+@]!><n)pU.G*=,1km#IFYfk??X-&h(l(mFkWa$f(GoLa9/*:fD",jn:&'!k,m<tV
%dC-&cEqGY"a)Yq\6/=V(QThp6&n]je.FooUJ8Xe`]7U&nDQ2Q0.QO?8r$bs$qD=.0'k5GW=9-MqeX.WklT3^0kQX$rOhW;V4;X,J
%`Meir@R\LKMDMLn(,Uc)iE@%Q9jh!N"UtYhW[G;jn@q79R(b%='N4-mF*!I!o&V`.SXa+GU58U?eU!>-HmrmRU>V^_^iA;]Aoau;
%9+)4Wn'7fA]ITJQVMiDa0LNZ3'_F5$IWP;D3-dJHMNa+H$if1F/!XN5K21cSBYDJiS[P;8QZS;_6[+6#BJ5[]bF`&Dc=<^&UT4MR
%D2*+7hc8`f#R'k6hJq[.oBGo8-fXU_j2?dq1eru_I3&A8&MI9)^=C1Joi\dV,u+M@2;LDYCM)AiUX'f[V:H:[(s_1P@c?MJ,kL\p
%$9YqjaT5Zc-]?MHa)MmKS)uJWrJ/m(s6'K6agA_t%Fs>/_pNZ&rq>G2=\HBq[@p4I`SM4T^"cg92KfTN)<\gmB?Rd<!">T'mK5#c
%9`+3#SE_KuO0Nl.1J)f-c\.6$+,?72;>O%XS0'nu*J$M;e*ipt2#)1fSLM")es%]U[@aP3p4hoV*m)tIJ;Ja.*6i:UG\]rr!ql=[
%o"]b=86n;A*/X=8>qSiGO3d5Ip,__UPO-+]>t;>/lEHofYD3NBh>NC:p\ghOl5uN<\JWBQ1g-h"IR=8)M>0N[&&<kXpMYoLY^&'E
%S6j/tiPFho2]VOMg\rJI//!tLN"ER:AhM*tJ9'Tn.fA6![US("LBNf7>b0SR:+Fd)QNo&O:Si\3\p1OTOEF$Fn3EgDnKkPd(/E?I
%Ng'@k9?c#?HUIb'%1`G2B;+?K3%ZeWLX>E"P3OUKZ\Md*KAO(0?K,hj.cV[J%Wb[k1BYIHi.H7'$YfaYGT496!;b\7bFNUE:*-^-
%D#:Rqqn`!gHh%mP#=!MTB4kAF06@,<b'!>qH4k.E?,*/f'LiN-]1E0O0VDG265[S/3!@*A>(NfS!;\9\9kEUGgq`&6%tpNA?d3+5
%oB"'#4dY&/P!%GoKc50E-\Y7m/6V9q-ctq.o.!o7q&p+k_f&=ti2,"Gp@70j.Stt5?5^5dpVbo4I5b*_-gcc9[&_jq+t;`BZocS,
%iXbB,_4C[pCn5P#VZMnq\HKflmK0YoLN>:FO^OL^JJgRn3`:(l>tIaNl;H(%Ugb\fFp5\"*N)h?0%21GhMYbMr5j;tCe&-3#+^S%
%-G.CR`FM#&9uUp@8C,W],@cGBeY#V5G'B-B;GAZ=.VCg_g!cKgjZ2)bSfDAkL2hO=nnD>G#tkk]*2S%gIR,*J4)o]0i0(cqB8U&)
%P*5t6X@B5IK?N?#Hg3)IDI5fE`+>^/9=G+$8<U!s6U'$2SN_k#LF/kHk>\.`GH)J_!!C5,h.6)i!t)iT4b:Jimqp)dkh5JUgGQep
%k9N:GD+(.ZGi2akPB_(@\'s/Q2hXSsl_WsSmhH3S??%H<2uma*@Y[X#jZ'qu^>P]6^&j_b#>Yk&a8&<?2+Ub4/i'$dW@c/6corq4
%P-lh:1N?bPP.>Dip(;g8EHngn!_#R]-[kC**JS$a@,e*3CpWkaa?r3#V,+C+qXEUF"D$WY;6nUl*D>/COp)s8Nrn94kLc?<I&b'S
%7YsOr)q5P/nDR*QoN`\P.cg@YdnUstb>^eSQ`JlC*J=\0^dAG[X^FNdP\1$LTI82NP1PbG>0YN!B<?Fd#^Q:IQMBLSj6SV`7o,=K
%B4@7rG&LRr3@eoDb?S?h>e-&7d#O\ACd*o8D#;pdiZQddn@IS+]nd%R*'*I/#86cq2]R2dhK^bkK.QfH8pN(H<g*E'nT5ZQT,u=o
%De)32)t=51Ng%,o2'odl05[=qrlm+caW<%/Qh]0X#j=5@O):*`mER6?doV9@!ZN@<`$d,V+D`@k#_<k(P^Q)W0>);PCLt$7Y[`9[
%"21pHcsRE^W(Zp9SuT*2EP3O.&/b2RP"ON&B;(Vd&9SO$e>;Qo>k7a1jQ6TP\iU.H?BS3$ZAm`T4<[L<,t)-4qL!D0p[XmiZ'!:s
%cMX,u%)koEfEd]"ZfZOZJY@,O?d<moaXG$7'>LhHK@gE\Q48Gb7[R"42E90;E*tp#G]?NU?Qg7<p+YKcB5:(rQcLhdS;Y0rdYjq^
%+pLgT$.c>c.U<X=8?a/s"GTsnP^SAj..eZ)Nq?V1nB74..dR[2A`lOU#Ra*c[4M,]Qg?+$1";Kt7saqK>R+/-jfh&"L`2X'2]gEj
%W^!)[$k;^d?4pjWI#2-iTBWnR&[=7+4=(OMFF35+s+F4#Lp4C@eU:#MDLjeInoK[BRN*Y)mE\F5E*eP=qBK.T^DuAK"OR<Znd"tO
%0NNe6OMkUrhB&3JlBBqA,47$e*SL>1!jC?`q[si8@OW_]-ttaC#5J_0;$4226fP`j;;ff+VF!eg-FCO$\m+.gF"*IJp\$8%QQSf?
%J_UJ1-:2'a_c`>4*QVKWIg;cW;KXHl)-63heOabBFd,!Hq9sdF&Nq!$5"ERE\n<RIi_/Z#H';!gO_)F5>lts]J=?nJ1HDTN$R?^1
%hGo`tf8E8`JiWg,lQ@&r]G6Ws&%Bo?k/MRgd*%Jg.#,&79;*%rjf`R<[;bHD(A`I`1-'U2!qmB>hn;mRRJ-$XlKOUA!,#oYe#Y:l
%p[,]YHV9g1&ca0LQ:+2raK^d#A+Ct5q0K!;]3c^W]KJ7L"K(WB!Q]<T&IqlG1`W&Z1n-H4\(Z<F]7LI9p%G^3O3k-C3&o*/]'ST2
%KNnK0#;G(RNm\rg;qf\`4,n7O,q"u%<TsPPGNVA4)%%>I4Hp4e$34'**fMk==Pi4c<&,(<TB#F"ATr,7PRDp'G_kd=gc(<'2;4fX
%df?51,PP&"Me;NUiAU2ZZTbQG+1P5BHY^%(.XW(ne$;*oO5!A*cB7j!NEjJ9De7UuLtl.MBhLs!+ngA*f[F#2iS==bnQmh0S::5C
%U4W`t![l9AcV#P=/7#&hb6`^De)6Z&"AGEtP.0&nqcq.tiZEt=:EOo#]kO8./R:8(U*m&O:ACE-E,O*p=)6$"QESncrd&X<Blm^Z
%H<1Sapm9apif1dQb^6AQ410qVKReV4ef+1oJ5qGA8FU7H/cqS1($NgFNRSjOSR9;[pT<KRT)@^oeA@(;jjPi$0frE]k;ULt^@_Zl
%k*5B^m]98B%qlSND,VM[)6]#@5acfP),JXR7rNs7"^p1YcpqrCXcJ9-,(=asQ3>`c_>\>b4Y;.0CNnhQJ.V$nF0>m7(f%mnaD,:b
%"3/gd3P)?32h]Pb`\1h9Dj\`#0+1,3Y@OgiPW[/H!`[]h),!F#QglG6ka]?AO68:7B:n5Nl0W`(98mP7Uu.>G)5g+"%O*?lS$UJ\
%1ukaG>`%,+=&71G[Erf/R-(-"J-B5RDn;G.4N8$s8WP8qLO/uN,TUs$b@aR1EVaVmKUUeb)VgiK[3d\"XokYmWW*it]/%YmN^IZ?
%$59r\1/qq:mlQ\g4a_J6m6]hh&UV_n]40k\lf(DR0FeQ"pkeSk<'[!IoJtOQCBO#&U^?2Q3M)p62^N!EK_A#h4ntL"F'6-/(#ar:
%qkY4XI-:C[\p*q8C"G*o5b)uF=4:\6OaP8/bC.">MW1@uT*IM%?),$jZ01sI=XtfVHAoFILOWc+0WsUr=g!#+@bpcL)pJ/r0q92>
%e\g[M;\.fUdP3F[?LMq-GfQS4l9"kaJ=6DD-GIfqPkY7(f/+@ZN'?&ciSM]T#,W9lBsmnX=3a9*m>>OEUK$lBI0_;=%f4nEl4:OE
%^biafcro_t.1mXjM-8oLG%bbYdr=B651XP(R`&C3`qO;5B33(lI6PfMWDG6NbE,,l+5)QsIEq;!,'J%^8!>872D`"!FuN0cO"Xo2
%A?M)\>2jmp62&=_mci7]&^)2VU%?W@5(0!958VP`&?g#h-f*oXVV%u7;h522A7kPmpT-WJG].Z3Mt9iRn=#hc"u8-"DSU.VU%m_u
%ZCUgHHOGL:,Bk%C8_mm]/(P\n]sT:-o%qQHIK,rMRJ\>bn2ucmAiVr]8F:B2R]Glt<WRr8fBiCdUkusSZR!dkZAmA=%=j:@3W(PP
%>4'ZdA!uq_cu4aKC2pm`@RW'Poi6W;$@B=*ndX63M'@lgjtb4c:^Ak_j,Nbqfig-NXaES?+/o9+1Zd/'!qcU$I4;dDkc>)&gSl:)
%;<PX2ak6r;';bOmn"E>q<2t.!\OZmqG4,d9YCRoL>WM[Wer.fOMSSkAf>'PkdaA:99$gC!?GHOi5WIub"!5C%<9ti!7',!#qbqd'
%]R1o,&u_^pf<%_^&9Z-=4M]Tc5j7+t5"020MIcRY'9k%N@IJg`^Q*++/(9MboJ;KemQn5P_49SLrS]AdTdlE6Z2iYkN*W>EYF3SW
%'+\lrq/379>aB'XEj9.dQ_2e5)c-Yp:ZsX%4A1A<7_qc\llXH-U41c*W:O&@K%6F&/FKC/k`i9H'Bcb#PY66KFYN@'7a?>H,_2M6
%#@EAb^^BX^JG"..On@s([b4dg1gCF'o@mW/"2u#s7u)?7<ZEB[S_*2@>c)mKboM`E5gDJgT*^#43?TqHc8l$!7(WhD"=D%:]lXnb
%=%JjkgidfoYgm/'#+8gaX/peoZ0h4I!F+hACE#4hTM-Mno^\$5cY*s,$?eRHK;k/75'so=g';V>d=RDOAWlK:*(sQf]d8TH?Z6?p
%(P!(+ImH.%E5$];ZC69f+6;<'J8'=.8`NAkpBF_BZ&e5b[+1"LkYU7gj1acJ8=9-&jJ6k;G%V(_7tCd#BdEOgcSA6aS+k]%?KgBD
%MQ8R7EUM#hS\(Vg5Kdb=<Bb0*F108><'&KaAT(rMi.HKag).5#LXI!mrCdZD,@;&c.T%%2$d2Ju2[IW[s+Cg$Df<e?lL`@\X'gNQ
%VE!e"JK@Gn^_$C:grIr2<8/n4M4MF)AGW<+g/FVbhU%'HBhpP>TF3B)G.#5C[k.>PgeA4tLD$.0E14]l3PU"Ge(p;M!@W8X/AN-.
%Tn7"1_*f'!^O\CO]G?_g&uK$[d:;T`3hfN'BaV@:^`f&Sm\n7C('3FESaE>h^<2:+Z#r.M>hEjQ\=Zr8GFjtGEe#^<m,YBaj[!7h
%m8Xn5[\RNjEY^:6f7Mf@9\piBJ^/'A#cVdWQqk<5Qi)\L=n(&DZ_^f_?,&=q\W:sl!-4N8fUIAV1=Rb<P%Xs-i`SknG^D)/=$51l
%mDI=XBQ?*nc.2]/NuUjfh>%@hA:,AW]fW658'.Hp)o$gb#=_%19EpN;kU>t?kt+A8isEps!/=gBHq]LdO1Uh'Mmr-`Fn36s:)`F1
%Hj"uRDNB;nH1ci"NLN;jfAX>=i-c=I\bbC3PtN)o2>N8=#d"n<f^O>W)//>hWtPL6Sb`2)V"U6oe<1?1cer55+isj1`lg#$EO-jI
%S!GUo%[d1p[kcF'Q]plCZCDcNY/XCD*_d&s^56MLdnGt=b]27`%%m=$<;*k.bR,Lfe>*H&IPh@Q'q(#jgq,7TP"-.D-!L+)>l,po
%Eg^VSD/\841ZZWBaUOG85blosWF#M@`L/<8/jFokX%mF^0c>Y0N*N9i];_Gd#P2c;X]X^a,!*7=[69Pu*;T#c'tX#L3r?A[UlI;X
%F6_tbP]a^:XPdCA5Rcm$H3%m\g4_pVq`_a81`iV'=E\>2r)8%9JHVjSN&7Id9Fr"C49aa"Q.l[$[tSm2&=ioSIJKF#@hM,.^0B=p
%En*bFY2&Su-%"h!*=t-e?/J\QR1!fb/&d'V4<d,dhsD];&@mEk32YnEBFHmQGPM(rbd?Un#7<;e#/3+>T8LF_E\0LuO5?(ech<19
%!\gJ/.,19[^.3&Jr`[h?]SPb9cMNtA)kj$1Q<'r)Gt/t@cVEm6m\*-]K,-KbL%7h3HgH;4,<)%"maIbDlWY&,Ym^.%8gJu3ftIWu
%nQ#!*Iul/h"MY7f:_3Hkb_9O[-jAG!lt;dsB+(O^4S[44T*Mu`E;&VEO?8TDaPXjkpq(=1XJNgWi0h$(,OTQ68NKH)`6kj'phe,t
%,5ubP$4i%P,4kO(k(@Z)C-U\9HNU";g]@kgHNJ/P=fL*0@D4Q2;k;^p_ruLsFOC$qeQbnr^9#kMnoTU<E^0Er^js6:i&QB<,2KZ@
%*5QdX3,X1X]_eiT;Y`UoqNq78_dF9?"*]_e%(@8hrr;M)8#YJ>_/jWJ2lHjiCrr=`]_Ng<N@M9.E(EGX*0hS*-gOBf"DJMWDV3`.
%GbtJc[Srd$-1+#F6PLk%.]NVAjA79)2C`uN92=g`Hi<KQh3=Gcb*P('LHQ$XW(j%qYtG!]>tt3[m\io-'k\*j#0i>0I[,KkN^?H@
%>\1R29DoS!^qoQG(W=.16N/.@ee:0-rhQ,=kr9'"KH97M%?K-$\8hU]2=\R[^;.j-bV))g'gA;rEW:<$Ooip0^/rsfS<@9R4IldS
%I?)cKW+374$`@$lk6P745l11LXS1uCW7BScJnH0B\(*3m<NXQIa,JR1^%-G3Vb]2R+)n:Z2DFiaYJB?W4i"lUBDtlK*s#PWn;J!H
%co.Ehe6AkMd+MlqZdVCl3P)pq>XlbHOi#4m4%DL?m^(.'ZT%KGH`H1&PG_.73#NcX@/ToaOFor2nRIr:eTq1$[(7HaLt0mp=!:l^
%pfl>7XLEd^HahV9g*`jP7*[DR0&WgU4b7?:!6q7`@InKc#@Lrg&N:r4:B?cg.=-BdIcB38NPRS0!5`5!XD@sYah3ci!OofXR6&Xa
%ejGS&DU1;*#@Mr.ViM&W-/\I*%\GN)IcKHYk09L.JjYe4&<IjDm!'$,qI7M'2$-YH7KW8M/sHsA_Ta>di8C`Pa(Rd;@,AUFG8a<,
%NDP=Nq:)'(()TO_#VC-+J`oD*V[iB1pMbMe:QO"u1=Hd.^9+YIGstQ?\WHmck.Kk))GieJqiQ+bWX^oUo]j]O;R^C;!LWCpDA51B
%l!@B>d.QPqk`R:BUPi%.8rLQ1b\P[O!MS4MT2%]5h$<sGE,l*<%+$e/)r!U;TU(Y!'_<6AL%B]q'eHX[<eQ?rB70Ws]\PLXn(VKK
%`p1CPeu)"QlFX*?XU-lOBig?,;ufAg(ecM`X5fRWX:DWXILePa8kq7Bj.iq.64GCE!rrQfp7i=e=$md!m?9IFoj4[ch9CA&pF?@'
%N>bc7md2T]THX]E6oVJscl6;f[@i]>]^t/i*GXH#4JHZN-O!IUVD48tk;e=cPKTh*4Qk=IdoR<"p9g6N6%(reQGP6U69Uok>+fQ9
%ADn#'lS(G!U0Dqh-8hHNp;4LDmTg38`d;k+(0*VR?s(4`mo\S-\ZVktXi?G"RSYZ:Wo'iXou6$pf'U'\N%2E*"mYsGfks`BH@IdL
%e:_#mgiB,kKSmQaJFhXpbL)/-e<9ji/seOX<JNWHf[YY$?dJ19=Be$*h&Gh#q.3#9lIB%GrdOb<V@*"`VH6_^A\i>9^Rg%ZS-IKp
%M"bcAGH!sCrYc5`U(P-ie9]LG-+##1bX'cfeU[L<kKS/T(TL:Vf</Cpim!_l:h/Ag.TC2XKUUK0FUi0(Dc\J2qf@TV7SnM'B=<C3
%f95mg30o4oSMQ_4rq-`9*"j(\)?>0-.-9HU5!7r":<jje>cg9egKCJS-_`"*MG@c2G@lP*h$E9U.\@;!<7/[[S";%$3oYkL&.A0$
%\9,ic#!:+-i;*OAp$]rLQZB&%8.grC+U%.3U<=f2RV1XgX&9i@^LAW%C@'NRT^XR.IFMAI8!3J+dc:ZLmLJ.=R+O[oo]_YYghT(?
%5auSip68V]5S.Q<2-pOZE9Kh7E)46IYi9@F6IbgnO*_K#dpZn`O^F\p%Dq49lrEXk`-5J^d!j[lhiG^R8tq%5P.nisVWR1ja7.l^
%rNpRnNiP<SM&+gWfkiVS)QuX<LP:r(1&J>+oGpqRIcoq7^UU2[DG9l5EIebc2&k=`*5)6Lo(:n6iN[,^IEf]*`M^%1q`&g2mq]Z:
%2(=RnRSS;)^=9:=;k@ZT?LI/clZIaID*4cmoYMD(HdmGs*&afC*MOQX%u[X3RSU93Ws5EroYPgd9BZp=C%^lJ@iDNU$f:770opJ$
%(0<V@e8E=igs`Y-A7g*&C*393Ufml-G`VUFGuIl5l1oD[7f!fYD\D4fm5duebNA"7/c'B`k:KaGl8W^raZag-doP'hoEi%J?T%W!
%%=cQ(SXE(grcnKQ0=m3<Fj=E+Kae9KXJC(ab3\tb:<P7b3=lEnKlOQaLPu+?^cFiuH'><ZcW+M#"?arL.?`&n*s+.N-N_(H:\V5)
%#BF]@$iM689QWq$3_k'p[i/(1H[Bt3renu9&-5--r2^2>W2)(5'<4"C^94J%jjsr@ThRCd+k2elC7r-kJJu'o<@(IGLPL4#eF?k#
%W^pt-^OjO>htr$B*brDBK5,naKF0,Tl;N>XS*J)&&CC)#L^[RIG7CKHDq__hk/IG4/KdP"\JCW1Tki%QLO*EPX$L=12$CF2Ue,*-
%VeADN7S6B5Y>gaAO$<(b!0"/SF).H+P\p.Y*=ND3L%`7<Z]@%#@AD4,f\s?$'-/NPokVu!$"/T?pqo"OLPC=;aA!NtB)lA?$!orV
%DgK!A0rOg0Ch.>3\<$[tDZRG@NU/#;8[JeIE#(%lJ"]/u7Ir/M+Ml,M"RR"q6HKeaZ3T/,k7u6-5fPYl5o^A"mW?B*O[[i_!).Z!
%<9?I@;c,Lq>_q`9BV0i`nkt-*0$a8Yhj)%06g3r4O*Lf3*e>N@GKY<\LCu?lW:.D**ZUh;O>@u;`mfn^e]%a-E5S\ONrTDl3IOE\
%hP(kD;$8fiiI,Xne>5]\FfN>Dgt2]c(P,I.$"F->$k1N*_`=eb(Y<mMpB1nc2)0bBnX\e^,)71W)W;[a$:ZnK(Y9BW3G*U_N`0:F
%UY]s7540&#JVEnMs8&inH73TKW=LPWk;cV*64*^=q,5PdM`L#JQU5jm$LtP)(t!\25/7)BB-d@XA>D$br<WtGN.VY'+OVCiHWHfD
%`c.GN-i8ZDT+E-:A_nf$I!J><\GGba_*:r\Ss7DsQk;-qq9SMF=8K9nF-F@$KHm[6$mt#M_2BeT%lkDmiV>#4k+5lr-0QpE8d6Fi
%7YS)BYTJGt5%ZXKauLZerM+rV+)2>kJ`1;&eYJ2&6T\%g%MBTs7?>s?9IRIb@lASFaVWn*X;O:ce5dY1KJ^:@akb":mVM;'c9&lL
%s1IjRE-i<UliG&#/UOHWX8J4!5@@+&kk?W\OJlD_+VLWbh:r@TP)KiX1Wc[-ln%$2X.]h;)Dk!0WQC]D`]DS:(<>dK[.9YX&$6c[
%6);f[]uX=)8C01>7I;OnA74H19QW.WEg!hB3"K_$:`-YK9ndF`[IS@;X]/4)%,bMj([DKFEdj]:VOIoO*/u\pU)`O(Zu%s7qQT*9
%]!(`3AulGiO$GUY6[_=_SO;VCiCmaq4BR7]Ue2R!<ZNfN^LZ&PPA(Esp8%0<QmA,O_.SpEF_5>UP=i<0Lc1Em2M@J9mri`KPXdL:
%B#\jDR.1qB=u%]&fWjEs53g=4Ek]/ujdCGmhT'T53KKimODG?+&EoXo/E%44D)a4\,k\Nk\0-@J`e()=QI)A"Tl)\&N5^Fc8.ZUl
%(jmu5HR(ZCJ=@JtZH0.CF!KX;Ne4M9:cOLG%6aPjJ2-L/"i!U@2)YDrh&R6Jit\glhqP["QGgVUV]o[LXF;il$%YfWQm!P*&TPZ0
%&hsGh$(h2BT?nc;7ne0Pg1/hmN!j$OK"&jQ5tFJfC&4QsBLW[a0pK]^!0Tk7$*R*HRJ!5UD\UErAa+[ZiO7_J#)3[.UM7qGM!WkU
%O!"1bFkq>@&?LJDIqePD=m>3K%P2q*/9XaJ?l<-;0DT)Ommh^Gq-q*8/p:5R:)8c9$Dmgch-Dl$E$5F+,s*1=&RkPVK+#50Y8p<!
%`H&AJ4'DbI:(^aH7#<E]Y?<LiE_]k5jdOo,d%5us&2\(9%,\cZ;3E^,`JgO^,=jZ$J:#L9$Gra@2+-(770aPo!P&(H<[T.h#_PAT
%Tca_7aNa(iPfljd>2"KEE8lquB(i'7Ao"Og%._AT&+kW%l9ulIWMLO3kBGl0A%")<MqknS<3!sKOL&^H#Nl:e6=%mHdjE^Q_U,&N
%V(S8G-*(8UC.AMO7D\fU6.!7mOJcB*[&GQCr,\::J3&;Edq<>V1DfJ'*D&%R+C<tb]@&-uG6+SWE83FHEks2(8,TWlgrc-_rNW4\
%k\XI">1hBl&i;26iSq]+i_]-F+sihQ4A@\hbP8"PdF/e-7cs&.ALXYP_ATgD*A+MA+nbut!iC+6AoI6G7W"=kCS(^[0fX#j9/MX6
%Bf/s'^V,LB-VL3c=nCoKh=lT9q:m<@$8ngY73/.jN<V[+2U-B@gULmgO`'3N6fLQeA6u&4D%b_qF(9%K4l.b7h3>a&d+d!EgRTbK
%(,2Ch5T<e9kt;%2GtX6:/.9NdC%HMD0AT#F@,0-BG&^AL3]fsZPYKd9nu/]6q4oJ;Cj&TXZE5D*JQ0*a\3)N1f+E6q1Jr;iRsZ`1
%rerJ>V2cj_TZ)XZF`hIX%9ECd^6lj)\<,1FYP6V%D16qA:V/["\<r<<j8GJh[pj75j=,,Hjq/-.(R`f,$UU<J82mS9d>MT<%-hNW
%o:BSS1#'&6B!JMPY3\k9m\QAEVPbL:L(:&/"M_M><tOg7ioimQ\"]=4@*U3KHruF%cZUU9NnU"XUE:Rs*H5%GCGO&u[s@:h7eVD$
%j2!;%OhPkS<,8EW9^?%eXeCaj[f0\gC<BD4$^fD(YMXZlECMs/JM(7,=J+DlL;0-J1dlD[W?5V.bUbD%[6ksa2@Zh7kY-o!RMtmN
%F=fYU/TQOmNPEa\9c:e&gh<k^8$$iN.)^D*@4cY4#8GCZ>A^odVSQtK4+O.$*^$mH#S<b>@BtU`,*T&VPQmIt]4Nm"g9!MO;f8*Y
%on[MbdaD)SWH%K[C%!/eVpN@C6]!Bf9^RPI)/oQ5m/=`&!#Y`br3E[4?;A,MG]@E!N<T-2eoCTf[OZ2jqFNWp=2l"XA+D'mfM*^G
%Z7B$VE+d"fTrR,r8c_o&2u^1qL:;=!a;7q+rsjt^ZFK"D_N_(Onf]<mN,h,\>!;pu3TYWE:h@%^SEO4jS56nc%q;l0E^"ZkC";eE
%NlT#uI/:6u4'_%0_W?0F:k`)e*OX>7H-5sTC\`/K;aqNSkL6WrgC^LU(+\RsYN8,,D&MG_8nfSI^t.041geNeX4sH'cYP:(Wu.g`
%PV_m:V-]^9,n^9ST0snCQHkliP-\9<$&h?T\ujai2kru,+>pJKR8M\XL8<6QN*e?7qA6FZjs639+>oWecdGDG1n>8g@i=1(jKY76
%D#+l\lqS]T$2gOcQbug<=^Eo`%43mL?)B<?mbc6Sh8ob)>(egUP=N0g1(W?S0c:2,oS02F^W6(W>eJ*tRPE]3Q'pF)j+OMOm[W44
%R-<_"BZ?KR!lPr7k,eCVOr]hQeL/u*_I[q+$((7Kh3lA<d<)-kg"c^l/YQ"dUZW5VTT+,DM8W&L1UMn3P1;)t_t84DMR8$I@Wp4u
%iVPNBG>&<;k0,p-l;QF+X6++'5tFpsYN5,:Z3F2kd)NAA<X\uT94q`S,LFF8)?hF8er,J$&Jag3h3,p#G1Zlt[ELA#H8J&FR\hY`
%.DEU#.@_;j-o3`7%K6-m4^!_:]1-[>0Cp7Fe-t#t3dY%?8k:JGYc=]31@NJ`-+*76W2GNDLcpNP)"lCe3_f6YjFUpq1PkRI1Fgf"
%)jk)](%u8#LZ"pV`akE%2#Y9kZU?T1Xhfg,MXm=fj-*--7odnehn_0kKrPCq/]M&hWd8$eDJr$)0Z0QEhQF[;5()f%r:?VjaJHH4
%Kr+TtT*9L"=S6bW_&q1n_amVJFJ'=+T*>1g>bohcU1A2>@`<SXl<[_V85fl2@QW@YKGI/0S30O';k"t#jgo2R3bf]:5fmuabG#2%
%,m5rE?ue\21fsuo`YI%,2,]NBQ_=j\T_&WbA--F73)Nh\\o'XXeFBF&Zm*A!8Se@,W*&qsFrDF$0OmBU,CDBk)HO(fQGWs%h^E#%
%@Lc%B9KnCi8J@B^9&WH4DtJtd!_X`&E@n?MYiO1NpMBJ6E1n/_dGd!Bkfq):d2ReD+YNMU'><r)a4uGP;%AQKc,ESDP<^4u-.FU1
%b6+:UG5QYGj6-rA#%pmG[rCsDD1+ph"3[?s:3Fq/9LZ[%&e-B/Pcm6o6kr!Z.nX<tCD3o,OM3P$NR]h\GGGIUps8CKHOFl4kYa#1
%UI]pOoP/p)_('%3_EW?=)B]j&/W:[TKV_RS%Ru.`Ctc-B&L@_&W5NW5A'[W2.%SCHNipr4=nNF0nPU&ED&+R4Q+9bY\rfq/3^71.
%?s0cY.l&sZfm)glcH<d;rrs^3I#c?3mG4_;<otPZMq5oe=6AJmGUusb-e<O`MY#u5?.#Up;p-1<m`9Kfm]<D5QI@Fr1(Q`o/u(0t
%1^E3I'>^WkgVH'0AYI7/[CQ+-NgF%>[j++rShFGSG[H7WW*;UI5Lane]1\<hDlk]@ltt/"98Ok&Vm0,QN=+#0C'7Vko[5N)d^(qM
%o9IInNgu#re7h@'KVJIcA4Ofl."garRbkHOo2UpD#4)2o")):FXJ%q'XB:FOSRsPnR-X9Ke'Hm5+.d%G:c7ERY?DJMp9q&%kbf"r
%N!l*>OPi).V3.aK?HQ-c>j5_;TH4MS)1c,$Q]Wi2gUJJuUjo/gH.)QP*LfYZ=.FKY#J/.O-4aeES[0Im=99jk]4IJNVD>Pe`"8Dm
%\h_P&_9'8WZK,n/[Baq8,$ArqTc.%#aaqlaD'#!B,l@GON$;EWb>O4.@GTX8MI^-cM\jLP?=o(*[19c+/gG_1n\Sid&4gm]VD--D
%UJ#/]53dp>9VhA7;O")Zes9[-V`ct3/]uf[cb.;<nE2CGdidAMMt1h8cNT6tG5d%UX@8$;As4e./BZGN(a[p)Ykgt=F2m#"pM!(A
%`QZ>Zq%>nl^Ib]jK+]dG2go(P=QbWWjW2L<lEIaO6CLfHaj*]5fo7cDR6\0%3%)Z3nb\mrlCp#agB5=E's-GHL@qQlL(@%jX#+)2
%@IMTbC1O2\o71]i4hKt>qtFVaZe(XXF4's)H`hNmc6bZ;UNEY^*e$HM^h97F9HmUFeLo9!G;GdbGqS'`$e5imS.>BOO]sG+,qfVS
%.=aLb^1^kc(V,Nj'gYB9fj279F!ZfM9:uJN`s3tm>-%#X;6SVj]UN\^U^KUgG#q=N(]2%<a@Rt^+8Ws*GumrH<I)DbbV9m+.a.8<
%mG,R4O4$(r*VQ'kRpObgiRW\I3/J0QMZ#kgHf(O]X*1c*du.N5gd&'qO07$_T^M=D'UG[m9<6^+dOT.HIFO"?]me'r]eq*upP8`m
%>morb$q#SgbJ?]@3-L@^Z%./L3*)Asf91SE"GSGA/@/&2AQfG?=K23*c;"1."flhc>XFn5Mg<X"@lT[B?Tt:Yo0BfH!h;RuXRk^'
%!>aKQ]tX/pKfpdYan<Xk?)FgW;_s@mmCCI,p!bfD[jQ$3^-"$I1c$j\k1O9!DHi6kT)*Zic$?Xe>$$MGjd+0(b[>\C$F4J[O]3?e
%_<hSUA!5OI)7)o(3b)%jS/5<eH-5&#-8D])<d_0B_EP@Nc>5p#?J)/VeL*<+QVuJ6(*DRRJL)**WE&U_2SGDVfVc(E\]hoS:!pN,
%_S4"+h:RF0C;,NC6SDQo-SlaPW]l+N=@Q_k>#h2pYZ\'3:X-Ke;A>I!fV_d#-gotHXg!km(hH]q6>Gu[$N&>QqBRebAJOp<bqL+)
%?><o@`qJ]'$iAGn`.s)5=P0N0LXK/&,o--Q<V74H;"GCpWHGW?&!O[E(\Zg*(,&eBVsFaGrmHV"D_.>')Fe/-$)0"LfV_d#a)0ce
%Z`m6-Wc(E+!l7;4qp[Z'WE<<1YYRS&@C&D/@V,PU4uKruk9%h[eJ9e(;lf1^V"6.4YYT,%`#Xo8(%t32k,\>4I8<Rp@+PAACuioH
%fVaJPNq*=&;h]Yj1$SIh4$#g9EZ\.in+Nf<HfgQT)c\`+`Y5O"$khrEr,&h-V,LcDMk>aGZ0Y]mnF)5g]YtDjG])M#;WQWY9<-3(
%hqCme"A%^%4*bOnfeEdS!R:jt\Fl`*GP06,pg]N1cmhj5e#"oPmIUg.@m]KN5A7&D5NONH3H6cS"PNbNd?2imR*BKb$(I?nr(fgL
%?S(UBo>/BSdH8`#e@kbj5K^7XjaZ:$dC]Dh]2VDgnir?6d.:TC\"bq&5lL[HF)a7+bQ$(D.<sMtVCql^[&<?jJ'..+j3.J,caFcu
%/f`%*TAL4c$@O^SRc>\`EKcalARLX]/f.+Zk8>2rGA:KpVGB"]d7e^BWp-"VY%^C'<dLuh<UQ\e>0)Zr`1d]7DDYP5Z6V<0KM+iY
%X<JXsOsZLDp5YA;:%0Q5rN'>,%AS;r0]V'7=f>qoJ8Q^a$M9(<qi$kV"a\'X,1k.T7oF:dKpZJUi"S1Gg!RZj^8MiC#O7+?b`9%d
%[*7>L\VtkpGPF6FQWic\<T[^4m0S5Jf("L!.i#Zlgkmden,gUf,M3\HChRDcehF'PFZ*7D$;$o6IQZrl_n*YZ%kj;!_-006N:L(`
%[BgsZX!g5O-2iE(1RC1TB4[#2B;:q*"lk&EYsM.>&rI_.S!IGPMdA(GHeDQA0a?tbH[6IA,UM<W,PcXBF&S^ZnN[INVi&?5$&+"E
%!Vq&S?d<ssh#!uT&=Y1L_nYr,#G\sRQZDO:\)X01oq.ZFW."-,),ks7HiFeokNp`KF"O/THiJ7)\3SDoa/rpQ$WmAm"?]E6qmXIL
%JY[]<\j:8W_@;KOrs[A%0WTUDoM_ZlA_QJE,0#\,dm.ipWqLl>T"4Q&c3rm@n!DX_%`3P4X!JJ)K3m>+aQPr2))tbcFO77eL&<Ge
%FO"Fab[#YChBJnf$#.-M5%\l]XN-]&=Y[%E4,C9c+&*JJWJBm%Q"f]UAgV[EPn6gsQtfupAno3jG,:/qbRtBZ%!U>CcLTJAFioP!
%`&R`+chDh*XejGrUoH5>R[41fY3u#2Hm.#MWqt:))HDfH7.j_1/OikIZ+NnNnPh]DRclB:jji0NC$tbPFrGhcm?@?E[Bu^oYd\1K
%L+-@M\>6^j[+h@d!@3s](t[ThUipFW`QX]]ds9<EQ>d]g(G::q;$nOaeEF^&KWt0QE*CHWLigd\nW;G!/uk=\8%!M4IlKdQ;ngK,
%)*Yds>/$c<h$g??:cMQH2#`E7,k1ZC,)%MIbT$$,5F&(-/c!q=Z1Q5'U,$XW;B)H<'$*a2@Y?(-DpE^2<J;:DgCIBPD_`,1?8qSX
%?2h@')u6n8k4bJ9'Mqq$^gBf;Cq)^;Y,8PkeB!o-g6HsDU[TEOc0k9UMD";)o9[0\NLX;K)Eq&%KubUY$:MTj.;M0Xm2Z>41ETec
%H$(.+q>HD&h'hal]A7hbJ/TlX8j/G9.gi4[/r.6^QhT31Ze;s\HtrE7;lB,A.g_afT6_4=324YUor#J??$\_q@nDW&OD$@pOqe]Z
%5l<((b_$K#HW65D>0"C@*c-S!TF'g#[*,qB1:Z#*3uHS\Sa+g.blgsElAmoc+Cd0H97'?He\o!=a[%_moi5Mnq<JrbbtK)o06'Xm
%<"#^Pgk8<&;H4/=gii21j"M+TYfl&8P!O)tMXO0KCM&esCfCCjR0+cq*]h3-8HUb5-3OP(!1HI]di4KsE-\$t6gNf`EPkYc?pc*K
%ZEIo]Em^.X3&]$n\=iF;`kJ36I@I+8(6)PR]tc"^6&LYjO/sXDQ4T@2c\bK5r:)UBLYh:6e$@0Ls*i:gLpUE/c;d1l_Dkhfh(1IW
%c+IAB.RRi&?"][,']i*W%X58:;@^:`/^on1F66uRRX51Ap.ra.1)2JcF"2M>B$X,5LL1,?1FGQ^,)e9B4Em>:_!=klQo<ug/7`m[
%7eWA;%'(_j[.8t%pUJaQ;6-L7&a(PHm5d>Bj'H_!FkO"+MZb_k&nN4d5h4`jP%mYO>EeD3dG/l$`YX01?0t1cg!T+[ru,RgJaJ7^
%ZEUgkS"Sq5F*?G^U#(a.M+eN+?jG1,d0t1`9qb\s]P8*sVM\O*j#(u,TN'gm;3H`>O!nA,VFqP7#GGIb-o][NQR(k_@UmEOYt>XK
%lOa;ucu^A,/fI\b[DFOf`2uPjf8ZZ-;:c1f0,dg?T(jUg\FkY;T!V6a,&TQ<d2&=&8Rd8lc7E;Eb6kdR86O'PDn)mqR%XtHa7(]3
%gbCiD@l]kjEl+^KRkH9k,fBVab6g*hl"+4&BI[gWs(-mGb1#9tcXhfN[J&?-.o\I#E(LemZ)c8k0M]#2GN#7;;m#2qn5(U:AoBb1
%b=n>i_F+898O5ZrHJtPMEjd:T5[>r*<%G$X%ujAm>0;PSqR7L5R&KaaTF=2UW''g.LMGDQGh\p6O'nXh%jg:8\a=?KSq8`h3K[JW
%.+8tRlJHcpZgdpbgkCLk`]A)m4Oc"aAAKhU_F+8W!R,(VisQC&lTH&rn5-PEAh%uR)1%;N&&f_Z29i%7VjY*b:k(B'rL8'b4OhNL
%@W+?Hfd";Dn5*Kj@AdBM?$L&BT#-13nhk>Igek%TS*RpYrE`GY]&pWo:otO2P3[%4RCM_t6Zas@_F+:e(bU'Jpk=M"=UJ&8"+-O7
%_S[7+b&0;jT,YmQO3rZ:qR7Ip]JYm%hKQJQrJja#giD[SH0r/LOpgs;%a@WIN=-9i9nO<BC>K=/<I/X'Z@M`Y&+t:s/L<,miM$6f
%LO)%9k"76S^"X$"RC7bV&+sj&jSbR%00D'q*k/NQDs;+ofJ:_8_SZOOFkd?8Z0j&Gr5(i"gCEaZ>_<Cp:#8f.mtHPf?BiJFC)"[T
%^[P&Oph&q*+KPq]p"aKgAf2C+lJHbujPo0clKd;M\0JQJH(bTVboJ`#pP"B[i^h%SfZp"p\2+pBc<H3Bo"mbb?ARF8Kep=8$P,,S
%i*;udT)c4eKnid.`%QSuTmdhP/o2<5n5-6G9m"D)eCn.D*pS+H>b^fK(EVjgpG:!6h?skELk_C<C#Zus>i0V=$P2c*'GnLQE5l@O
%h0(2u=n'9q@<,@d4-V#+/9^!GIZ^eCMn@o$L\a(r;PGabiLtX,b'<(HQAsn@6iER4*J5SrYV/,g^[5uq4_na$$P3%fW>Ff>47)**
%G4DNpMJ#Xh_<+#=gu4dIHC"$DS.:C)e(tJooDNlFmuUMJUJu1I9,98CF`og/#[krBj'^OSC@/o5MmW##DQ&XNe(6@1[5;J4hmd/"
%C?ECuGe)]*H6.EA[L'&#ZL2(j(#<3Nd->>ZMunI*Erf3dch_S-gUgsbCLBA!IAa`3cg0ZKpG<Vj^61'4q"0^$O2RsL_lK9q9(9Ie
%oF_YF"3nnema6IIAurgH54F]7o^:"/eZ7%aVaaqs^[H#=HiG7'%qNCtCD@\Am`##MO#1us)h-DVhZlha(qR.>>b<,*qec/U62RK\
%Zqic10*1p7MP9i7V5@mL[HbHUm<DE/I@oEkNYDFi_OF2(VS'H_o>6t-*EF$>,AL`.OU&C6`d@0J`]2Uq.1:9T292]:p#,P1U:YdR
%hNs!8^XDTU^?D0b#-t>e2?$j\8!D3P&JUY`OZ5;h]$9IEEH%FAPV1JLKd[!6SfBMEJ)@8aCWAmc;<>LgkM"VgOR^,s3V3J=VgJB.
%[0=`X0DKQfldRp%>f26)X!+L)ZmKk%g4=I?C4Y9b[+q)l.@(Q2Y+-9FZ$[O[eXhp35_4_i,K<lb?n[<5(R&*s2Q16$=n3^LnmCOZ
%dGmWnk(l2rK&CG>g-:T#*me!'21ASV<p*>[RIQ?Uodf$@;M2%IrgS\Y?8cOC*5+&-Z@$so`(O,8@@/%]V/c(siM#\\hEMe6-\-NR
%mtO9M:,WGu(49Td#aEpsZ,'+hqLk-\StPt:s$YL9oGJ2g49T$/a/C[08>5#KHp)VHY<]q;0]6a#c+fS9jKcM##jAYRF_%!Ics+]H
%$H44J4R1GlTjHI#1[[PN64+5CdK_'g;g@5`5'RT:_?5i#bUEE=4<l+)j\t'@`o6brqV.RC_)K)O8frEb>/CA#\ce0ElmKH9;n,U;
%>WG#r7W8tqJ*2Fu!E:6jd<(`I&7,n**E\<cjChXJ](j5u4m$9S\`?4S:a/*u>4MIG`XQA^*Ceq<^HAh#qTir-JK\^!IG\m31[+Ko
%("#,D0PM`V6%-=a,;B*r`#jh7n+Lq9'?].,qN8II`%?Ng+f>lR;f$AEPqQI@qc*+DG,a%7+1%)PH05pS%,IJod`K,=pd_n/^)SG7
%al*>$%T-TujnLu?\%c2Em*3R'59i&#aPXdf*i0G5LnPb6Vm$M!^qoF>poVCc!#RMsZ_,=pHPcM]#[]`,5GatM"fQmAHuIJt,5UBX
%Nt*M0K?kZVi^0[VJa(tk]66,/JB<]hTkC%iUlG=@m\`jkalnjN@5n\riU34cn/:.#b&^CpVVsbSbJBFXNsN$P6dMooLHISUI1D>+
%E[TPUf1[W5rpc:qG1f*8ZE4:;ksW[VP8=`L,369[_V37hm4KCFc]XDd55j\(@#d7QBLLj!6I19N5LVe5f+KIoO+HBRUDG>6i*-aD
%L0GVV;ZC2"i%WpPI7H^bMR*<2d[2[1W)RDnh[r#B4ZV:\BaqtlB;olkpZs[MfhEI@ms!*IrR]lso)_TbhG*c.&%h"ulhkWU8Y*Yo
%_;006+hjH@\@U?VX,UO.Hur^<j<5Hf@cc5+'0CSM2NKl]#mbm\$2Nst4TZm!"#a#4$Bji`k.H/\/M)/-?GR+%,R6%$J\H_#:UHUV
%T194R)rbdL6T\/!3T<4upMo1.P*<IPT_kBjjPQ#20@XfZYR7NdfjuQ/JIh/KQnXWKB48EfLMr\F3]hJW&[U+p!r[(1pRhu]B#X%<
%pqDjhkTsG2^-*ul]tq_M\VbK_f%0!n.q3c4@@@.2P./njQqTTpT4-pmHnDY+?jcp8WkUX>6,?0tJlV0ME*e+4p@]?@=@A\!=dUXe
%3C/Rj=6^ENKK9&@a54s?d:=C7JiA(LUf&;dHe7Ism#]N214,7lR!hM&Psi5R*.k*&C+d(6KPjaA\mK0Jh_+U0n`_FjA_dCL*Z2Q1
%H%i-XO#uj(Es(3R)>Need&PgW:W0QrY;(Mf;btumn#tD2\P"3^PFa$"P:7!Qj'8HWUpsD9aE0__PmOg+YIW*s,j#pre@fkQd=(F.
%C\J@DTI`i,R9m0[[<BFEKh<deP"4s,F)/7;/3s7_11b=_"8XSYmoT7>*XOH4QI?E;#@GL<5'b6"-Z;BsIaP3P3#a%MXOFN?TiL&T
%Ym70,)oo5$*WNqr7$4NCDJNnXc!IJN!Ap^cWLh@XCC]u^r9SA\1aGE>#9CS7cb*l\q9rZUQLTH7:`X!i,J4PCA>2'8SBoMqP9Y:E
%O?/Oda.2@hb,5^t3k9l+ZELfW_4cb(I(i"[Rlb-npIC;6>kJ5*@%MC]B43H=o6F48F9q5Gg:-)L>*NO_gJPuF3Z)JEnr2C69XbqV
%H,jDiR^3,]rZ!"&]@rTchOLX?NoC*eYb)#?aDS=E:qq_?!#RT[rCP"t&[aQZeaI"eE,]CRabaeR!]b*ik"@t@<_EbFjSUc9#[/)g
%8MemrelPC1Z]V+@bIkmPJNGkSbP1HI?U9klDo+:OFV'9_+&/:=X;"djZI`PODL9oA*^Y4KF?7r6)STh=iM3Y,@6;6.0on!gUF,9g
%!Nh,2!2I=IYhNhu)U,-%BBKKD@h$3j+V"XECZpZJeWq4.r)lda=5rG$GV7Q]::$EklT<Ms!LK`m'Vn6hp)?[C6VbNF[jct2(^uol
%fF8p<'N1K;VUa8LigdHE'o1d_i]70247o]2b"Vo)!uS>tYFhRj8(4#ZIo9=F06bZi[3);o<nD,qC3=f^8hdc%#p-ULEGK]'4]\[[
%HNLTq>$V`l]@Gd*T35I;gK40](UcP@4[Z296,T(rmta-sM`^Y!C'\<-/p:W/qgQKL*G8c3J*No$GfsZM_2i+Yraj7e?U>Q:7Vo]P
%:!U;'^u2[]&"_(_O9%8WCK-.u(?cc\Xd]Cg4dEOl4=u/1W*-GKTplOXNH+g-V[7L$5BKX6B4%uoS;=q'l5=g-K1WOJLCJ'uJls88
%"Vrd@0oRRrkaGkoj6AN&#03OXS7t]L6NbINc'P6WnEgMqC3><H!bobWPX=BGrL3tL$=&QCG\^pPm;HsrXiKo/Ol3n*k2^fU)eG3/
%9)(GNNg4<Od5&GXTldhnmkH$:`Vg`[lUdNb,>ZrXD`TZh+4MN#[liDqWp'b/<bK*g!P`r_cL9-_e/I90m;<oDP8gS$UE-U#n)(HB
%hpbkZX6Uu+oR$3>'EujI?9nF'qQpU_b6Echim[1DjtjS&,_)-XaS$7aDpJZ=?[4E#C2)kG?/N`1h41,q&I)WBE!F2AIQt0W^^]?]
%A&P(*0,qh?k2<W$9`&e9#EA$RTL6'"Y[rMJc)f&F^W9N3`a<A"nf6)L$SHE-SqEPFAt@0Q'nBFTYUme.V?@:P+u:CkE3WGJA3?bA
%+C]:*)4q+G]Zso&`;TFH&4)a(O\WI#^?e5PkrS&KGn\<^m<(%&mKb#)k+lKWRHNAd/Qi@->US75;*<%72/_F:`-io;f:$;-kJp_T
%Y'(k8RPS&Z\4<cn&.WW!/2<mh]CuSQX=]r*K&j_341d=Fg:W-Q_]G_fLolNojRDJIq*A4&Hk]@\L3K]Epq#uP\[fBZj!/t^-@@fq
%BOs;C=e<Y%O5-c2GO"]T@bu?uD?%Qa"(sR^CKYaiTRX:9?\UP7-L";#NDcj"BQ\&@p2:2&cPPq--@pq$b]AV\\H-<q*InHe=,pXO
%[C`VdXRIP4PcJ$)VcX]nI&e`5Nbms_ou2s7jC2SqbBs5uaDTN*#j2c9o;X[3#dYJ5*6sS.DWkNcLn-08BR)4?P4]E!]sT.[Z9H,*
%b]5%5+(6ce]_Ec<c`ii$hu_)hjg6=-17k&Fn0I<E%$Qn!9JRCqS")Q^POsNk!13pBZ#$oqC<l"Hb@jG*Ui5t$a7Am&TJH;>9Q('"
%]@?@!3)6O-(@UrS&#HLlHZX<(+PML_FKH,dl&'rEq[Q?(p^TJ5@Z:&WR;&Go/^`p?cb9bn%d5k;l-hoMbds"o>_EC^,k]OpK60j0
%IR$-pM_AN]<ONF@g^0&Gjl3OjHF`m7cTXmR@7>g.aM34NU%;mZINuUg\_h_F%[]B&As5PiF8>=PRSh-;EHI2(E)k;*io-7-7_9lM
%*k5Y3@@<_#_[$ua3,RG;N=RM;C4P-Z72Hm4M`BS.]7r]/Kb'd9[lW3\\TtR1Sh-A.c_R.=7#c)"lrRNnJ+ha,]oMC1(B0ogiBIT7
%&r\EQB@#9&_OZKu,/PW4_'D:)E!S`bfjMH'?f']>eek/oY?jjR+k^>fm%!.,LM`B)FjFi/7obuIR,16J^qn\DO1o;b5DcR-WRX]"
%rV;fYBX<=kqtXh`b9QfXpe>+K=5m[$Idt:=J!FAkl]?"&ec@#lH;SUJI=S[7YC60B3IBa=b=24*cgT/;YgZG7<qcu,]FOIspRc`N
%fAZ/@mr$s]kJ$6u>$l\u\Li4A>^EQV_oq!tht\l!oo7kSlgWIQ#>b<YO-_g7.b!NHqT2jrrS#k3r&u[`iV;5Qc8uHL&tdXoa"Q?-
%C6*N""b+nF]OPq0J+Oas02TEZq#sPF)PLI9*GeudI5<Li()qNT^Z4`\Dr,l3M(F^!J&0k3]^QpmV1"VcCt-;s*QE^A*bQ\el1Xde
%kE0!3C0M^kp`8tr]_^<G3r$uVbN&CHp\^H@ff].`/dO(Ya7=I=dNHKWk2X""a(9JURH<*ak676tei7j1YrSE=n&W\uI=8lFi7VK(
%^&Vee?F33`>0gIID"7k%o8_)c]O3TMP(?i=F*R#Yhg[gKbIbOfk`*h!*8^J.YNPH4q.0619:iKuf&js^,J<U,hRML>?1tY^fUT<i
%:C0hN7H7K[KNFV`c:NAYM/5r@`=1s^PBQ!!PBQ1V>Y[gSq5`-Ho"MkKr9i&$G<C3u0'MlgUYU.<a7BlJZ,6a36Me!Gna,g_?LCpc
%&^o!3icneN`1DAc+\e`uhEUEo0n&B=DCY8WDq`8$c@$+VgfmS2HM>E2B##Om8=>FmB<u8Jfj/\YQ1M@R,(/FW3EPgcDgGa=n,F8C
%IJMttN:(olin$sT.8bqB__VOZStr%YbVT6rJ)!ER-1[_u_*oCZs8(M,:c%"_pV.cGg\TU\rqP7NArmJ2VmhFUq@XIq(b&ERdWTBS
%Ae$K-G]WBcMq#2%%ehp^Ya+#9p?g*h`2B7-o$t]lh@9(kIHo+/2d^rU6X,$9c,3bDIoq(:#u>^^Si%;TQ^^TqqW,8<I*Vonjp(p.
%^:d']g8$u^roHk!6JqMgXlH>&F2!F=hI5"4YJ]o0Mm2L'^J,5-3.C[?Cted&J+<L[UC<4XdD,@.T/1I$c#eHoBr1\5qs]A0U@!3c
%j]A%GK7k?EqW-SXB4$)Uphr[+rV#V+J%pj(M+=4`"7t(@#],A<rHc-Hef-8IrC(AUo)@$po3:.]Ri]6:oY!1Jq7(nLlL2K;qQ&44
%ro1TlEsS95d.*=g5CKB+`dSj'=oLcl9_5ZYbFE8D-_80F[J(2Oe,FIdM-`EkraIP\r0&)p;s8LXIq#S?2u$=As-3/9f:P:Pp=GB(
%Q(K'QBDCNArO3jZo:M]2/k5Kbn^BMQp#ER[LY'7hg+UFss-Vp_d_#]7SG`@&YMX(R5(2PgiPVR30(LgtqTS1;^%6rT[/#d7S+?u,
%028&YCq^g;H/i23lR2Cu4+Dhos%/UX1bPDIkK=!3ROs,n&\\4a?U)2EptEu=j,H!(J*4`7r91u]1u/!+\]fHMq"+qIr"UZC+0.NB
%KkZuR3A/D&]Ql)CRe1`/Pc8pkBq!hHM_[/.?;$aL'<F'56)Nd%VJ6$Z00Sj34LMCpK)Om+#N)0/qtAia^\[N%qg5fDpt>77r9X-X
%Dhmi&qd4aB`jb^1rScW5H19NHa5<NG]Dl:-\\6b$rr2ES\*N\?^#O%F\@:XMPJ;"\`4cc6]nac\,[5.TnVc#uf&$?$Xe1+4in`5c
%2V`Rl(\)\o^@`Z]It6#kT_3m\A%2I:e_brF4*^>YpWrdZnZ^W:g`PAjGmN"o]I`ue+6V+6?eGDE)rHlE`Sla::&OA7+iXFR07Noc
%Xag?<2m<.fIJ6Wfl\.PD]^a7el,2,frQE7!CEL<2k7;LDq!*dX49jPO<%^e;Snja1<RJQR*qaC`[JfchVdBAtDngbdjcaW?_1,e_
%LhBN9?D=I&;k;Rg-#c;%$?]fJQZ2EX[Ass&\qGRqg=;$#?,FS[[Ass&\qD'ef:bt3ZIald"W00-8?T*t>klH!'a%l$E/gJl`R*K>
%l1RoS@d#TiLS%\f:pfYYe"9a]ctkm;f:ZSX\s,I`K5kcXJTCAE+!02g_s;MrpM0KqkJ+.Jqu8YR0`Bu0iEtRP@CS%_%S)#+:HngV
%S*fkg?EiUaS]6^4r!b$Ur:]^mhX..gk-@;pJGb\=;m/#uUMoOHhmf9LdF[Bfbfge8rT^BVIQ943n$nk:/uAaHGZe&!rgMpA0dZ*"
%r:RUi_<1HS/BiRWs'ib<&:=$"!NVEX#L*:mNJ'5T4[9=u[r.i&W&%LKI;@KdkC;1biO@-0r<g#gqgY.Ep,qZpc/C>Tkst6>=/_"l
%J,$j0Of)*^d1Q0@_6PQ;57`P$Ie1E8_c^Ko\:?(f00\-'pq*"X5%8[n&TFf.m@t3I\)GS]5)5^(SZ\k@=SKHRO7CfGbN$cqI+%fW
%H`oPYR8Qr+e%_tGg-_AL4ajBnRZ./GcAa91p=/'%:X&pZ&'kA)a7!n.Z'F8Gb?J>e^@RASLJP\_qBCCb9Y1s^ihoR8p!V$%pA!l2
%cgCpD^O,7*2h&"Hh\toG2;R,7a%%5bpZh[:YFaDsWb"4T[ThqQotNW(++O+aT7\SeYMI&JWE(9Yd)t`d*f0a9GFsHXrT1Z:YWdE<
%Mu.lYQ_9*9IPjpC"/]C5m)<rXZ9sT;PF^'3hpS"g0906h>\E5R0(7T,s#;/`3j0UNXa+um#_2h3IbklliT.]YLED!HN*'GBKDhop
%5W+uPM;LMooO8D=55_U&Q>oR0SspjG8+Bn7NdYeml10kMgR!`RY/R[/JrS)-((uaB^&UZ2q`nH^NZ2d&\ASaj_=S\m52nZd(Yh.I
%>'*mCO5:;K4T:.hONQP4Orn0X#8c99*.]3&aR."g`,I_M^kM4_Q["(0k+[(T\oHDMIa07SV/t0'mEsd1%F!tcX`N?=fc@W23*5gA
%F5O5[Okk4$>[g2]BFf-7?,4L_a$!V8L7K,C_48]L]d$ck20U[o/lM>mf\_g@^:@n64n[rU&%A.BrTr[WVsh[hht-$f3$#K#]6UrN
%G1!s??^_!I:>5+tp)inKgg6K`qog;@rS(C8-'C4!mhd*i,.e7s5&")caE[ADm%1T=n].ih>Ns+N%WCVQhnCqdXVZqs$qQ;"fu4eH
%4lRS"6@+%7UGX*_HRuUYoL1hs?:O$:(U>A24mqm6b;(1Yk@V$6nf:BL0$WgN55=E&5J6pLa00u.VC;@VDroliFa3Z(hu&*db)JJX
%Frl(e98r81SrpRg0dC'*oXPdnRIfj[qeh+:o_&4Yfiqh=lK'+!Dh%?6hcWD?JC]UGJkmh%0R-6ATDse^J7rTeY8]QM;#*W8[*pQ&
%qWfNdh,@TbH74='<P[SB=#M@AQUBR`SJV<Fpku\cm;J>6D/]A-b]RdYG^a,)SGVE+J"-IT=Suk4l*p[V(W2Ni28"5,e6KBTGKZ_o
%ArOupY2:h$J)CB?<Y%$f]*mYCK:Ij<jeE*h4D`7+9eBlL<P8&1f*66mHb\\a!gm8uc.1+_]4P-Wp[2lQS*?5ALB$qR;>qF-,;8-S
%hOiiqGCKQL35ZhU/u##='78nUj2h17s3.e:l)"mT(?4`DZ4cKY9B&Vken1\iIsCB3fA?8?c[Km(/%9K]2h"]_DtV@6?MW-b5J6^`
%(G@u*C[HQbAtS.oFN9u#p@F8Zkg&"kW1:J=MLYW.9'(@QlLR6sG&R?B*t@3#UUP0oTDfhc(\RU%j%Je,dIunt]<VD#Mo6FYV98c8
%q?+HPTC!]dY92ToT7?h&U&XB+NL/bunQ.@c^!nRqIM!CrnEH/,1DL2plT>.>Mp6(P50]-bZ?Yu5h0R$N5!#(GHHbutcTLuE#]GH!
%&7)pfqObLSeGMK'/,nHKl-++D#9U\Mm#@@'0-BUHp!+M+IHMD@2+rGpflq$&c'pX>pc&kfF&/<`m(RQ@5Mj6V`SSH"&.sW>(NIdI
%?GHNZ1?N<3?Pr&%pE"_^:HgO^p?R'4IWb\SmLT'+IH"mJ:]G@;s+gV9:=EN`q#A7g"QIhl:]0RI(\mVq2ti8>[!m2qeScPBp=8\c
%YJ.PspY-e`Sg3WtGE2[tp1o$$m61'os+uN'nJCnsf0?mPp\`l(2RMF!qjBTfK2L7H0]:9Kpt;nG.fT%eJ)e<4i]k=CR'?>4>u6.%
%55G;0qi1R=+%H.r]eJfdZhNWYL:o73Y^cSdAlJ9WIPC>,s)W$8KdV<bLG>@q>MrlNhq4S$p;G9NFq"[D)Q,Fg=,2Eo!hQ\^Pak>f
%=/tATQ4^mW2'#Au<IVE2K2dTQa>)k1QtkJNYoK!mK@,E.*7Q.p]n_DQkC[cSF`5$JHk6Kdq\I&"4YdnsIPVCBZWX_Wcse_5c1\?)
%^$s[g'1t9P;JpjY/]<:qm+3Bip7i6E*jpJL6ei&p(_>&^m44BKD]7thpj(-WTZ3s>SDumT;V<!^_k6;oqlr&Kd?O@E4@]3o^bfn2
%%`T>!IZFXn8?##TI]<X*Xhijr9/pU42J.;%Z6^C3O:I#t!nV.l#o=(ZD>?s'(2t(1:<hW[*/sS3S"9MO'H<)2_%pVgao2iMZ_b*C
%_iu[[.$pBs2CPqu%WX,>4u(#u&7Wi8+o>t:R&3:J?s=30/,$2a6,:p&<:/R1/D-`E8inF%RhSaTHEFV%%6HY2'8c*!@e'7J-J7gJ
%aYknJ'4,JcKKPB_%Ur!.BSj/K23;/2aMa&3@O`:LD/U>/[Qi\YgOqQUUtUG+V,!dKCnHMC8f@hF`&FT=JCejgdm9QpN$@D:<!NoN
%%`p]_C#m1,9eWD<H9E[?D1gZ.aTbo^f>:j[Chu?*bR=_Tj+8U>+N$#OHT:%.[#l">F?go<@@QX<<3EskM.#'NC9dH?4X&45ooq_C
%iF!S7RNTU.k_.QVD5pj#abF.mgq@<X2<d*R"rn%o_LC-tN^G$#gL4lFbc>Di]N!=S/_be![)%bs:4-i_HWfBb+lKu&nW^&uB1W"+
%]<41\BY4sp+)T-"/]krig+CLIDgk;:bJ]N;mD*TM*_qpTpTaMFVBKBXdpu.kLG7^+"F\OT'dn\)g5JqF2O@su@iRRm>@3-\"PX<C
%0BN!51"W\Vc0bmm@+Wk^b&Q)DDPYr-_Sj^(rL7Wlo`?*H?Jqg8^i8@n(@9_:UV^RZbN(<N;8dL*6g#[b2BTWJDI4HiiXL9F9)c)_
%V?15VH>:DhbjbCt9=mgoJ]qS/)EhU!DK3nr`np+?5PXrQqd8bSoBTbuH>GA,K5Vgd`O"<.k^+:.>b[ol5KFQjn^MJl%:d.6TaYdd
%6p(USfj&"DJJRY<(rNWK"<ElG7Q0f));/o*hJ<"#g`_:Pl4qiVJNn1q=-ed50^_-T&=gG`(jO6LcK*r,0%\g9aB@nrANMpN^19;J
%7^Qs",9DRj)GQl=k]X+&c=EjE;P/J'VLpe(l=[&aHE/>3'?06I7uZFso+1FeQm-E<>@$]54Y;/2ib*,sR2^JprJ?$$DXrM'o1o1s
%.l.E/DE1$[%CW;q8dMb24%R%/J_sQ+6O?R?n-=h,#d84r\EhqfA-ZQtTqiu0p5ZqH#8'gPf#D.(UR!4%lu^a^q?aK$*"&mP8OZPe
%pb6t60=g<NG#1jTlX;kk-'@M_oZkI`[[o@JPJJ45X@W]s&G0@WDN`;$?pt1:K;gl.2C5H:NRgK<2&0%d7UldK,trh/PTgEK$A(hW
%1/['fVJ^A=;DM*X7q..#1.3n5ADG\!J>btT-1!K/YHcrH"#a^WCPDLl@"ZI,K<n3S0fB[Up5$E7(uR]:R]o?jc4_k>ruK%?+sn2"
%/7?BhYe@1.<2M*aN:p.R"hSTH)<6C5#2R@<X/uk]O,YlKDWA&$2EeljBc8]^e*#.IM35T-:!qAW+]<CA6:-`ca;muE*Rl@nCNli;
%%+ki[*WMRV+1N;<"89u?`&3Zs9NZ@lQdE[lRWu7V1?ir,i4(uuC-p8c)!dlKZ-C,0e@;a73Ac0/5/C5#*?/oYACoV^hOkmtdm@=o
%R#7$&R`pOj0:4/S0E>;^e&=!BPHB!J8/rn+G\kAN=_:SLF7U,*("B$BVcu$"Rk>Cc^(c@F=:fq"=(^I&2<Deh&:FcX99C-Gis'@R
%kF!kpC.4j\D"?7IXH\lu;cbAn=7>H)nNp!X&)A$$]7StHj-DP9?"d`)iY2hlNd=;A)`3guF[Qagpa&RP#@+nM5+6HsVU6-_!HNo*
%0Bf9Lk%9tHA=J3:Vl`c=<u4O`1!ZoMBSreR@0JULlr5SO>ZY78eN%WW-G//8!Z#C68`2alO]nn"m9lEFT7$"`6W3PnQ,al%(;QLP
%7;A)B"DSB81o70BooAF4eJ@<o2\WG<:ckiG.t5/:k45h$o\+'OJts=P6=lVE`hZ9WZ2\%?n>^*UNEp5NXqrm6\d5S&inE*\U_j>(
%%FS<OOI<[b[/\.b;GMZR9rg3oO+sX)M]iU56PqRqU:".>^3p=TW(,6=.GnqiG2fs%2;rc[`p'LkEN_h^4@QJKWM-a,OX<DJkSRfm
%`FY3E$JbGj1;M0gN%!_97@KX$%3mbiU*agt(HNn-7OV]ijB"59OqPef=&#G2[XH+h+Pe;oE>Ve_B"#dJ[KRRD*K\)@Gt5In64&DT
%+k-d'EKZH$AmpRcSs`(qprP06pao/VH\'j'RHM]a%V&oV+#C%)9(>O#Pb9,GhL_tp!Fsgs-(%h.`qW60,7XJqQ=5<WT9IHD?=Kr&
%AkX">=%TU$0`t\_'1IY4PW$<&2N?9EUGVcV<EN?CJ8*^h93nMLip<eeO->65NH-=Y*GqY5=IjrgUba4%+5SG;e7P"%bUm=<-Ho#f
%>FsWaKOSl$0KXoG6c=O0UQ^0/d1-SP^-)d*1b?t\N#bG08RsW#9iba,9e5KA\^B3<1JO###'KPE_n8Z1)dPoCKrY,;&!RGh44e_X
%0gd!4M<JE8:+q,`2b5O/XY^negVas+^uG\D.F)Z24(2#Z.]g/%jjr*8]12Z0r>>j;`@D4ra&%`tggHn1\D8%ZRo;6LbkB;acIE&a
%f#gr5qQ/L"JL6T=9qjp?0:]BT18f#gFSZ9pd,<]._0q9O,h'3Rf3'c3^GK$>m;fTHNg@"-q%5^UC(%^9,tU2ICNGTjA:b7AJu46k
%9j>K[m+[uM]dK;3Ypu+6YXD_&J<QbFd^Aa&C!^+^A_bVGhNKI'"-hZJ^>.=dbgs_e)U7B7?$c!R>6E@GdmVSAR,!l939#FLIs*LR
%:?GY74<]l7,?>;\bL!GID@XPf;W8JJ0!XZV'7D]\r_9cJCtTBY@qcL/LNLkYJ9(s[duUs%o1S<G0p<etI;WV0a4I=ff^i\fN"`n0
%!@A?nM'n/gB<&:p'XJh=7`WBBWR`g"_O286F-5GNS77kfgdtrWoEMlIR,%XnRL9j6Gd"/4ksR7Me"e1!k=dhsS@\(;ZB;V6Ltc]0
%_+gHkRC1r!ZcSj@SnkouLZVfX#<]u4[lV.=CL-kBpZasboBZZC+@Dg;b9i]JR)X5p)82'[gLpB13V8LUHHG00PZr1i?r_pg=_\mF
%f>*,1$d?Om'f57<'3^-iS(O:E2<+V3eS-"q1VKRL2(A$O.OU'Y@4<4pmXB$\Oj*Hm*W"c'D8#*pqVj[$:>to73SjZ!\`Z/dGPpCe
%r@^t7/`m65d8pkIrVl80s*=(DkMEdss,3(fhu<'3krkZufiPk8s5DdtYJ/Y7ao(_mSicl4g\^`ZrPK.j@IVme^"[J_IrOPt\*nh>
%i2aI;msfi]Mf8(@J)ChJHac5LGPC1Be$!NU[k9Uu&&.l=rYP8=gB.b/[t"A$2eV#rGk0,LfDkg"GF*gZEglN\IPpu*WnDnVVrB`.
%5.l+>_7abOqN9=URm4F[`E1rH[s@^Jf4c:iBhu$m/fN30.uifaX0b$eiK70Ms2n#:ZT?<B>9Djs^A?j*hlekrE2BK00MK#5rFl-G
%Dr(<UbJ-8d`7=+QqYZc9r8-7Jn"+uPc9M',4dQ+u^&eT`A+Y%s2IFL*LHoEYK^H[5i#(B-#fV2sVQHYNca;)%*T[hl3J/jdHDB`R
%@%k,u@L6VnW2B%e1[K-"&J-iHVpN^J3LaGk8'$Kqau><`6fs2o]aJHeW:Y]%U8;j=^cfh5p`U\8T$#DnJIEGj?K7"R^=n3l*.s(!
%RgO)&b6Y,I%*A/%*)3VjX2kJNInp%Neo>.)hoqBU0a&]VRRTtkZt9$6.m0mZR5#=FWc#\+AEG,=`&nJMnH:]o(lKOb#3A-+'>oPe
%-+=G&Zt;41#u'9:d.0i0nql:kZ1'Jp/Qe'rb\j-r?LU)4kkHWLQ]]J3aJ\u`SnrZh3A"k2R.:o,7H(%o[8WNnGdYsRL89idZ`UYZ
%PHDK3_BYU4V%l"@mQC$G1'We+Em/LhRp<:>g9SO`=l?,/!C,I)*$8K4_@[S<<V4^o!jkogOn<8=@HA@9O]-sWRi8[^diYePJ0>J6
%@(VR=A]+$A>U(`D)^ATXKieF=nHZJ5#KPYN7lp"3SHL0u`P-4.Wm,OVleP*?d-fo;RF,b]":PB#'bDu#ailK<_85ImKXUWZijQ/f
%:+1SZ%t,Z:]!MLkWCZlGHaR^--$\o&,7?PAf<!YVZZ"hrY'_C95h?eWA1*0i=EoBLr1*/iNmrR'*)nI8_b3&;T4E]2!J2]/JN<>$
%d2$P]-O)gQ7P=GQ?mj.-7BsJ_mX:j)E+55TA/h9$5&`?%[fA;$/9+l%NS,K-,(m@DOTB=G)[:OTCsF0TCo/!?cW83i@O[rcG[_;U
%L;jR:R>2ob#nQTg#$?qSb'Q+S9jVu#@<0QqLCsH`o#Mc\BkBK/Ke]LAAn\ZS)(c/2A$cY_U;GdF*^ia?\K^0?n>0r&Pt33j<N^ja
%0s!k&!*5McJA3-..ajpH4a(W=T%blYFrjBS'H#eo^Ah$gQ'3eU8M\?q1&r!_26JgMU&ba%n3kX/,%qC^M+uni6#gjRX:!U]h1[rB
%Cic$k1J6NB&p'h\1#<o67`pO:iX2#L\=r=bMR^/O4kDUO<7bOPFr^JDG5M_da7U@pf>6_WJ@+785t&O995?30K+Ac:1GdK<>`0#=
%"G+sT>7H(*[\_&AN:u3n[LY7N%>+3h3X:>^1`4tB;f<A#J5^;7$6S?FG#Jl/XsD@g)8IhYC(W8P3CM4q3%LN:Q:>'2G!-@fge=D0
%*D+U]U2N-C61C0K[)M*r@[*=3UBIlSKI$0L41&`Yhkc`]fRFsK1RdOUaCmpa$nbN>BQ3NO7&E]D3<_Z%G+?uGD`oe?Z.dUAC@L;9
%k2DA[OEfhd[HhC=>c+PA(,ZgQ,NFs(/X(a=;e.K^O+8I2c%+,+&@2Yg-<*0FVQ"VHTc5B"!TD>#QmB(6mi*T_>>5!Zmh96A=!=:M
%H5;*DZsa2).<(8f@:TG%I"n2;j/:0f"+otA&S5A=iXfD41GVK:U3J2^"O:hVC["2pXFcYu.]4f8MbU?>mAmed0j"]JC59D#D<-LD
%"_)$(^gAlZ#AZ5oE5ZTMhMQ_(m+6+^_Mdo!2.KtGmpC'".frIEV541O7/pHnKE47jOLV,4n]nr`5YQGF+Y9536a<m]ck;IY3$Zf*
%):dRK<0-NDgH*fHTh5@Ff%l9]^TjS(KnR8@'Ln'i&i<Ot#ZN:`=+i_eI<Ku_1hIU*i"uS((I5a6qLT0Pf(Q*uL'@nJ4p"Ys<8a\V
%11N*QPqb4Zl3*:NUl)Y;_1Pb_<Xtun;BCB]?S+HokhKPZ`F'gsRN8A\rO5^A$G#C6=;U#D&JD#BT/n+c#I%\@(q0Li1/MAsVI1q+
%"bCQ?GB<r+\8K>6j'0OhMA\j:^qpF7_A$JY1ffB@!^UQ+@,uq\ef5DY.tgl3?%>-K*mt.5)YD#lU_u_/4Fg`Y!QG_Y)QR,@%9h92
%#cU4f!bnr1&sfm+?32/SMBJl@nN%cWVr@a`Tb`%l^3G+D<J(pr.8U?N$qW[Sh!GD_"\sZFEJPglOr':'PX-MIMSDk<fkoa[ClW[h
%J@($fE$(e6)CLqU`asBc/&7n!#0L%mEV9tdSt`K#(b1Y==$/jAE@AAg#2FV*'&oVg(In>>"G6hI"^s:h]8R(:ocP8Q0KtR*%O'@p
%7bqg"$l&0&*P!)OW5LTHUmQ'(i!1)NR,!Y;PE]k1!/&/q\-*D\LH^7,0i*n([O@4M5e-@j!*I,:*Y8;_X?K6j.<aBT70+F$0R/]C
%iSR.ER_ZLEW;q)#6qk<,@9nhA/'(s5$cK;5_l,3;AZcs._G1g+,Ntl?M/^uHiRr8$*2\TrfeQ7J3"V"G#tbl#_@X&rYiMd[)YX\'
%:B9GUAd+mY7\+$K1SQ-9YESLtL]deER!*-$r7D5]_60gY%J"(\7"bueRbTP=))%7M6L:GF=j)kW8:6#R]4tU"cq,Q'n_">,"kZ[0
%A^]ok)_b[m3at&e5Uer><\fn+5aT>LN#[qkJ][s+<8&K&7oflT+'!n7B-75b@.,(W2[WukOO+`ho-U`g@fc"8j%3Egb0ECQ*/)_X
%DhV%B[W!p[K2+299]a#%0$+?\/eLJp;APUe7'\dK&WA#m(k.QEONJ%$(km-m8AId+<D`d$hEL;kaq;5SLgJoB1)NrhN;D4"ciu:W
%#Z)iM;[<hmbJ7)AMbmlS>LE:RZlh@n\n@%M6*k`h!,F7SZGNXI4doK98j"%lmio)<08/StHO/?<'AFW.d=>*#@iKkHFiWncEX?PA
%9t^MU4Ze9kC).c.d@]W[1j*77Smqm6.WoXMDFt:]:^LF]0C\L+:kY=M)BbhIEN]G1$dLd0Cn\sOJTBEs&6@FZ=DXiUi+:U/3Ho*E
%H(sma#\f!f2G>$.ZQU&t@llKY0JmVTdY'u'='90d2X+tZi8W;=GnUJ.E(/(o]H*!koKO853>t>.Pa`8En^?p1ZN:[DMLpjCef$q"
%G3r*R,E.l[K+;UhEsocV+PWE#mP;Mo.l+gUWu0`]q$E_I7UJ2egjp3gWmt\lZF_5@jcX'K*:tEg+SOeLpdW'[bJ=2a's=&]NfmjO
%!F)]H%0cNDo"`Mi@RE))"Q];O5VrYIh;"Ke92e@$nZRbk4,P6/DBq))#;QePV]m=n;7QhF2@-sT<G'6Y7KQSOl3/9%I(hSK"S)R+
%W"II%(L5m^XYRoTLDt1iV+,$nDioit1HTq#*Kc7B;D>FB8TDuQbgnci@O(Ng!h9fd61N3(7_BlK/3jBg1I;,'27#D%)@&6][R$9>
%nTN9')!MhdK,:m'nq,l!n=jS7h<;t>fta>;)FW+',H$Kjb?!4iXiHSq-)^%X>uEjZnfZ/D*Vj%mmd!i^Ba'S=;[fF!UZbs5nV0#i
%U\I-uLbe?"7a^.Dj"Hh+!*_;__4Q;U9Mh%*/FD\qTFM+O1or:eg_`SD;%&=,&e6X*E]UPiJo"G5M6_cp9eGAlB&4$d*agjGgb>Z2
%K)t4B:j;0_);GN6JAMaBH7:[]jV\NlBnO(I1_#fj<k>PuUn.R-3mm:54Qi]\0C=!@g?(6D6"T$j8<rG,aQ#p4AUnVHl)iC/3Orue
%Frl]i1d*4!8L7ORY&gBML<0m$hSMYYPc:35Nd<=p6n^/HR+\qm6_mL`6\#jdRPItV\YJkIl9[Nc-C:OaJ_<WTKQsD_%rO=Vfhdn8
%6-RT*CMD^&WH!qtON,@4B_%8L*N9V&3f*R,BV%q9*-%d4kn80$,+m%AXVQp!pG!t?0c37d:bTY-Wi^3:rW1M"oOSL95\TEj]IgZC
%F2gCIkUk_K#Iaa(Kfn'TK4Bh=3i0DTif<[#6E\Dm&=u-,=(f)UHjhHVX;(rukcJe/(aXgk3/t55@,0>SJE5d3Sr,<M:BAB(1_OVZ
%B5^.dbgK4t;;gajd\=`i$r2Bkp%+H:WauS$+$$sn(SX8=76?PT0t8)m=sN!PB&enFZ%e0PTqf4l3]kA"["ju?^+OqO!Om]!RXqNZ
%6"gNe'ejl#399DBnl$a'j]gf3B,TJ3)dMEh.nk)FordoM+(aRjb<IKr<eSOs;6qm=eqDXX$$SiO*_PCa^LP$q)c#jZ*>`=d_2633
%]p8Q,:rC$<$+c9G@s?"hd>Aa"[-40Z.;T/rJES4/HmNMM4+jMFYi-Lab`N0(`KY8ek&(T\=-t6BJ#TRn4ep@t>BP'/51Ko\!j5bF
%^J^dDj.Il(g8)D+M$b+`W5181EL</oE$QnH^I]^qO'dVa@:k!fat:93])E-PUC@oq`$k"(3!s?l,K51>>KeUX?Aee_:'Z*RWL>t&
%Q`5]AUa:CY1X8NCG%HY_/:kr=XRX4._9a^,*jW@O,f%A\dY0nOO&4QI9KiLqm&;k'`mCPA[HK(c@24`P4N+!tKc<8uKpab,>Zj4g
%F(&l+dC?1/+-P)HP\'#@_jh5M@DF)M'N$73YB]0eX<A;>m-BpK,O7fCl+j?,!;V6eNBBO:WZ"EMAl$E:k93c^W.:'J";brL/olm^
%OpUbk<$(efia$JY[,Cj/-"&=5LITdl@+f"9Lnmq_6VJQfLVP/tC3t:M*Z<l<)2b9_5Y&k>GQg:j&q+[R-'Z>gS+F"cg-Y25]dqe?
%`!6j#!Q/"2.WUeIP$DmBMNXL+]oB_F"hqm94Nu\`PZfpk?,o>.!/TJ)T>M"hJu#HKNJ.C;Qq<F\SW,4C6VkmRKpGY;=(:%=[:R,8
%f_:ff3XAn&)R9m&(iaaqV*5?N5+UgZAqnoNU68KPa\c-&56t5AH"C)V70=aj-7[&Ln[&kV\Y8f8j`KY65GHpA`i%hk'04`Re2PA:
%MDSZk"NkF4!*15)m,XH@9p*i+K&S"PEAF=Cegf7sr(dt3$pF*H@t^OQ9uU\^%U&[H$CC&.5P@r#-A%_QP3:J&&I])jZZ;EU2GAoW
%IK>_&4r@=fWM\h%g:6.$5Qq%i3k(;gcK:SE&8E5Q!&>[`YBp/Cg,2ARUu^W_:pclF2'jA4cOi/+P;?ul5sBk8#1Bfr,oP<J8;Z;T
%BRc$-2q(S_WPas4C<`?lIBl;<HXoG_[!r;ZAHk:V".Dg%>Jm)T8:s1Y[0KPifgL*eB]eb7BmiBol\7M4s(%T]cZJ]Vc'#02l:!bk
%:RWj(]5PDH]mK=Rc4tTsoC'CRq>S4u>co__i%!37O7K%Ub:glTTXiQFV$\(61*Ko*Q8!:.`L8Re!eK%f!q!HQ"uN^Y!:f75%:"$h
%_kSdU%+qaqiBnR_n[sFRXE/W>hs:d9]UXrJ1kMb\f&Pj(Co[;.%\Tt."Fb6='>8NK0^:;<&=<gWjT(1f1r]Z[[gk[^kn][h5h6H-
%g8,bO6p2/-G/SYC#W68R4T"<A$=k]+O]:@uD_&b%"&I%g5@^1eB2fYnN+ZZu"sgpCWk=&PZj,:l?U.\ccuJ]0g3kg;+OM`LKL^R6
%]s1-oFe\,B$kbQ3Y*39n-@<][n7X2e4q(qd3.q7>N\Vhb`5,rMPpZPN=iLO7:<.#Y:9Kt'/SKQKd<o(OUmX>`_U0.,"JoBHQ2sO]
%LPXm:fM#p)+b+Mgq3fJ*K**N>4hWrZrB"f8ic$NtGU;ISNPV<kJ6^Ns3!FHoC'R#3-$U;,>E0O^\uJ8//r<Y-GoIHq(a*j9-8;ZX
%V*qb,5bnWa7ZM/Si>qE#S:Cqt.Eulm3:-l7OXY>Qq4oR+pJAVj@=SCnAtIYJcAql/pF/=QE#gUN$/ohY5'+;./@k2B3hZH,*=UK*
%r4U+e(IZH?^<FNjf;@]\cp/l/TOfolBK4H_K(;,jXF9i]kCOU;$IjfHg*\ZTc)RRd@;&?/KhjY%@O-Q.^<;n*QN_%&^'M_;AYFK*
%-`6Ma%MAnUBg@C#845TOJd/LNn.QADNDi)MA;03&kpa#$,.,=lM?EW@gP=6"qONuqS9iRG'OtWH!$Blj2\5$QKcGZa`2e.lgAG3?
%K7QXD)*5J[W"]d??E3VHQjo>?*ZS(XfWdG'"i\qE@3c:=74_Nk97,X?r7.qear!&5BR>^K/3ZZT&OOjS>'</-nNt>u36`&nSH[-d
%0fbS+:e-;uS8;&^2%f:jL:\pp)JN$%'=rn^*h#ZFA+%>#B'P5=>"jD:Eu+Z]>9DO[qIoB<%@*>c'.oIQQ/s0+@>Q0[V.k4"\5lX(
%C3l5?f5Mnq[6d\+^5u91]BYE.!>6f?l6Pq)i91h)Nh_:^/Nb=a"epINAP0aN4VE9]ESB3/$HlfU(7NE=%"Osl^iMd5M3@r=";>H'
%5/9CEf7r1OjAV4E@p.;ilcf!Xr%LXkCh^C;`_8j/RumkA#33c5B`r]&m5XiD+t,\f-eCP<`GSX&:nJKnpU&BU,7klu+qa(^&WJOe
%ZsiP-QgmP+MG+3)/d)Y-%%Oq-1f1>$acCe'NdFG+1\;;H"*;=qM.#!u$6>s4-Fbsb4]]Rmd>BDP*U@AT'o)gX2Zd23/1>38XIg)-
%nn1:$#mV2IWR<[8k;]LN%<>%G=j)0%["Cut%Cd@rpMnJi1ia;e^7bV.1)3'taBV*#,QSAV$9o.p^n4D+#*I/2L_N!YZitK;Fg?+K
%[/*7%YR+f8U$'LJb]lb_(.)"U.E645GfJid`E-.c%3LYM6TQKf8d%]Q7`Nfc7Yk8'$7&e.Xc2R&WJ^#W\gC^h(j#6oB'<WX7Vr5p
%#=pbM^)R(Ce>msLINHJaIFk^S]K\bZnmX$d6rkd"lf46-*#4-O&Nk:;kC=bc#UMbIXL5+61KcQ2U3,+EGdQ]0M;1qW",J?oc$3h-
%XFN0N'jk.nCtCN%'kMYp^"cM[cV_X4<VCM+q__SceS$pX?uTY,`[HlUK4,=GbCPg8>a_=l0WWF\E)uBJ[A4&n9+X4?8l3k]anJ`[
%!#^AtANE,&l6duZBDb&P?b.V<:7f".'/egV?]kc$p,L'R]qh2#HOr#uQ\4dX(rkd0JfLo"RA3Ipg>p@HGV>Rk6Tf:#(^8BVRGp,s
%"DT70f$h!IE1j:Gf8!9%c3&(,%(u[5F9'r*9r#Qs3)e=BO!Q?4VN[[7&:"YYN>ej^B;C)/`.bJ%8rWe]1LR:D^]C71ap\[;<\Qec
%BJYb$ffX?!F6Tb=8_@Qi6g>X"f^gt,GN`MmfuWBmf>baf;ELMjYO74GH?(8+*HHe:E61>U@"Y#O>+aR1X=0OYFF87P)>[!.2JZ#D
%4Og-4gQW?PMNTf_PZSeg*(ap@!sDpVW^0[N.rGAcm7:,p<`U:FmY!D3Zc2X#A,*76$8`6K0\J<lTtaG5S!`st8N/WH"uO^X_a5dF
%1P%=A^l:0kS(sNj0W)U.EbE*_,(UVqM/d\bW-45)I`ZJ'%.^U32V<pFH5)[h!GLuf;E`4337Vn$h,93$Q<Ti1=0j8-LF)#*E,rKD
%aTTJ"]k6-JN@-jN[BG<]B1sjhl])n9JcH3hYo#%NOoieQk%OK_Ej=Eg?@NNK4es$12?[HjbttG5:@66l3Ykd((U_@:6Ps30Pg0OC
%Gpj*`,<cR\),Nn6n;T/8@,Fer^Th]E"278P,XY9]r*'`2TpW*PPXC/c;'s+%0F1,#8;KJW8lCmj?u6<]"#BGaJ6e=QdTF>r&O-Wt
%&e-unYF&",,c^FM5p^CPUn"H?\]@;Qk<b;!T%(b&'gf.DMnFnb7(G@'E.&3_1"+U:MCH1A!jF)1l1bW)Xt,EV+]np<:ZM05dNLmZ
%_R.7;K/m&5TN(s4+<P>u^ofk!bZ9j6/[Y%hJA`9:k)qLS)/Fg`n=Y`R+s[1CG(RXGWWBjGeipXO+>ALqWY"!Xo?5<YfSr1h"g6^u
%i1hO;S2trh[AQ;>I1W7O$h9LhSH+Sc)9rAmOAr6#)M'b2LC:]-MTbs'2is6!@KS#]QC0Z7,;7W>?!83m%4]QG+cA[t3D:eg_+Keu
%;7KOG+/\?t3h6C%Ko5&T]["KoZiGt#\8YJJTqso,ehP'M)@\BN6p*8a6Y[Z5mpN:rm)d%>CksS.+Bmnp2&<"-`1T-s2Vq]5U!$#<
%EG[P-i-ccE/9G8XXo[)tO+YTp$-.`%T4&$4]:;mAKc&O@d]NY6&o7r[6PQ[[.WpH@+cO9$';'EGhi]WH_18flUnJRM3O!"sh[4p"
%%2j2LBXF_?+p`N.U'tbfoM.^7Y`]BS.$YeQ^R7[9/1s0'Use<*Bi6,rHsA4JPDZdW']S\D<GA<iE^!$T71trs'%(a8?6W`,^h0rR
%DR-F+<T6F#:Ml[OL_Q,kP;aaA)B:06_qA\WPK>`hTIGcs`a0"/&6=W.*0gs0!YA3nMa1T,Bl&<sWr)kh5uKKI)TPNIWmCsg.?Ppn
%9P7-iDkZ%si#2VKdlhJqP3K/=?;bP1/-/I,7*dRnmac97jZt(Uk>U"s%t[@cEh_&L#R4'[!"TZlL1WR9*p`i&DkbA_HODMA6(/+p
%'EeU;S@l`4JmaMCbjbIM\hB\'_a?<F0FtKW)L&[1JU%Ymq0'Ci4]-a/a@t6q7I]M%4ab%sd[k&S"F08Rc\g)W!^fDI!p"G>V3JL/
%^G:lmabUn[K"??tf**YF2:QY7.h_B90TJFY&sUib!Q`Qf,r="G8>#S!R6I?-Jm<V1"O`:KoXBXRc$QbiOrf-f*(IVd8PTm8bHD(+
%PCW.+%W*O6DbjrAT9*C4947Q*oY;=GD4&T"[YPjTZ1kA@niW%u?$`.9k$snB=^0qd`rQqtgcMd9rp\eF@+!niU=+H-J-Dsa?O^:\
%eWlTN'r^!7ISc@s=(#:Q26R.c\E_-V%pUiVZp[sNO+Ssc0UHb/D<\s+OHc.c=.\r^lZ=_gMXT`2G[3caAulLk6t3#NN*#Y!n]5VR
%?^EAiZ=sSEpAYsI_AkM?@$$>'bXEYXRo&^\d47,DAa%-(aCrVUAu_:1#,kT[er5tW^),o7$elLQH;;kB8AS..F`cAafGM"OB)+1H
%MFMEHm]<,+`2l<7(MJT"&j,Tl7MWm"H9"fkSp>KLkKNe$3sEp1#`]C#`3mW`#3+>aN2tCY&sN0"0RLgg[?>n@O0[&!QSX!:k0jI^
%>b0rH8"AX<ebK+ucOe:Xa6h,5-,$6AdrJA7Qs7d4=I^*;<EGq;.r8rMF'5iO`BgCPQ'rf"H<!DeN1:oe]Y+fR`p\nIG3G-iHL./i
%KY.?)8,-6Z2*.J71%t$-o@`GOmg-B_VGeJs]%2eMT3\DUTCgd<c/k2^+GU$\me'J+?$-u==!"Lb,4h#LG2U91IKqLpfj25\$kJW'
%&Kp73H.L&/@IY=KF`d0\aE+K^R68_h"J^6!B8\YrG'8h:Do`3j->B/H14%(OAcXO!eFNa-KBfi(m4!/JM>WO5`N@>c386P*4F_':
%l[q6aZa5km'M`hm5251cqPpX!l[SQgIhR7@"B\#^f=?jSN"C:qpX*d-Qr2Y"EM1KgbZ>Y7s7I:O;(8oRBZsQQaZQ5T<:KMOm!g[Z
%H(%TRcGEO"`\[cdX3pX!JL9M01?34P%[mV^5usrgC-er\$hqM7[o?ip3_n^q_>pK$;Pr7/dBRm9_].8kMOMZFXYH:"J>QFC86]!d
%=S*SCeiUl>e25_!H!X#,e,;j\jf>M%"oLj\YaKY<5g\6_mQB5$Y#.n_G#sK7s0C"7&KpZOb[aZS+=M,I3`mCfOnneqH(b4LfI^0Y
%,qt^Da8Vr0q`45oOh0I%Voh?sSnko+DI%$^*g8p8X*T?VM[4fb>dLH>/C']Jfa;M7/.9k.e(1L)>FhBc2-uaV[NkJ14.NYbG/drc
%dD]k/?M%o&A>-l*AcM7t?1pe8M6E)-(K_ap((9G5!FZ(T^m#NeS;ATpF*mM2:'EOY!DF3_?o%5+"<2(o<%;BF9diJD3[rpqTG"D<
%>IaJ7QAiE@4IDOW]J]2HCi?+*=*V6C*(CW3@D/'(1J:mn&DjuAc_E_X,1#jcHtcoI[FP2)>ke1U9#d@Q;"Tp]GUV9R7aV0+/m^ha
%25(GFb/M!0d/HJEGVgqKo7jc?Mg'lsKLbg^-&;--2&?cd7T>C2!N'DeLg]ue)/Wead,J_ogl]&/(En_]._lOmeABr+b.KuF]A=7<
%aN;%E'*;PpAR5(#jT-hAJ]`rCYl`oKb1ZD"]He/HJWf,2f?DeSKqULB2[>_.[(pRpTQLs,Ocu6Omj%*nT<ei+DjIsFHjm?9fWKeu
%c8IM0->QKtfS0_A@gu`YC8N1j8,*CPQm.6/4)5at7,3eMVbBoM1it-!NS'UHa[;FM5k1lKcFuAcEi=BTI`H,IPVW?1No/bA0Y)!c
%l<?gOB;a&PIC)F;b`2_B&*4]`[tNC[7AA2B#VueNkKSn/A=aN^n_<X!j_=&<=Z_1qR.b15d;+!n:TQ4JhPVV0%8O>\Hg`!+\n>/<
%RLB2j5:"1[.)Tu'^&plsMbg_V5&8@&i4/C0$V'(q'pp@^$:F4Ug*mKJa94>c+5!:fN]^@iHg#BU&fmF=B2;/`1PNkFro72jmgd?*
%-g^()3?VfXgR2Z=lj8@LE*AZ9WhRk5&Q!T91M*j.W6E_p)$OrqM=<S'`;Hk=rKHOsP=MR[$6V#@i<h-jO\@l=e"F_O!A/R#P"mDp
%11`?,7[m6i*(hdi'ZX/Roa!ubBVlmUF>]D6N`OUD2/p&6aS2J,I.8V";3<RZ<ZmH<@D*q)*_i4gOAPs-H.R#RV$5jNW'?*TcHK$#
%!BJ"k@:JFf*m`n$b(OAhW.]''#&Go/*NaiA08,QaBMp^S[5bdG^,K-*I"?PkY]:De5M#FJM`cuZ"?tN_-T*a=TJO`Zlm%CNE:?Q0
%Y^3#!#3;K-U3qm])''Z:^Q;p(;b-TWJXhT-,`DM=(YE]KBN[<!*Tu?PC_N2bUc`5Kh3f&q;$u4aN/#ce0LnYA4it@9EZ(jh_FC"7
%rBCm:=.AWE+E:?N`oBZW6-:3a9oLkO;hFsS==Io*:81K6!l1"`7*jX$R2*n2*o3J7=ZJ]Kd2lTRQ=hcVCY:!be-sgHL9OhX(<r?<
%*W")NSp1$ELE':TL7'o699WJsCrE?H4;*"6bVX0O&;5?s54X&nf(#4g/<=!7d`V)AS<%Zi;r`G:j[98;E_PNu$D'^nJnQ^&M[hQ6
%#CoQ,hHg>TemZ!k>N&qX:^%>JcS[HHTjMr9r6`Bh<-0?+lCcud7K^B=<^0<#oM#l:aIhC*!*'mJ*JPu:ZZ]PbPqhDY0t,1odNAnt
%W6A+9=1JX!Dos=P6QeU-.Tr]0AQ_aaq.V16`_$=hNDo2se0LAi)At%$M/,fc,XXNEemT1N*V>GQY#@L`AP40jc?*93.K[cpr/?)"
%qrmI;+O&5jR7Y^$J<:%l7-6G=%[j(E`1\Q(Wo=tkWMm3R)Osk*-tk(FPY$(]?UhZAQCM"d?Hn6T)Jf=t<b:e%&M^?Q911$!;>YH7
%0iO8d',qh5`$6WZ;]*tQA[=PJ<,.c'7(3BKaRZ;Ya6:AFi>?^-7Y,e4cOa?(baLLI8<)aXa7`B)ROrtFSt;<71)SOWD3A+$1tM4#
%NHn7ic^@7aHZ=;.Kd[ii4Gu[f!0%"1d,sN1ho_GW?Vg[olkA7bI[[s)>0K[?B/?b0<or_m/AE66%4((.K8(?,aU'6!?6@;#95)Hp
%/4*r#hj-Z?!B8H")X>qf;?a"Yl$f:>F4lXn+:5/!8eS7-ZmJqSGgmWR.Ja*mK5*M?F_aQIEs]:'6B74XDYo$)4HJu&4,-IdGhd=:
%f.j%#0A27^c2,EUF]C%:aimaD>'"q9mZ"MCj,KA(Q@.[cr>ho:b[;Pfcs-4f6P0FKUhG>!DF"0`IT?[gh(hmtHlgZ"5`:/hkkgbh
%qP$ca.')f]Wt'AF4jTBVfHIn!)d.2%[#MP6l4=F\M9PEV-oadDVSA5D"u3!REbi^5j%);=l%2\dotst-$AfsZhj`0%.9FdmkEGdo
%5phJW1mXLRX[0n0J/@N_mq3E+oc7ZgH;5lhj?"qpk6AWlZ<8X#GYd=uRu-<gWFe4#@.;i3N3->UlTYo_#83Zh\]k-HX.:-M$%6#K
%@rYf&:e4H#.!8XC^A#49,ca*eaECd,>&uXC)#9gb(0G6RLAX$/El_p,Op]:3'L<XGn"`Y`!KblaP:3'qCIgF54?BeRNLqJU=d3ab
%aFoP$j9YCLCa:sjl=Et2-r3<b:Y85J@[eX?6IT-NA*G*(W[l/>@Sd*#`[Y/pd:qA93BO+"kFXhWKsq/?,1=sZlp>UqRHp;OAAs%=
%Ni-I5.C8$G3U>dh56(k6#H@r%D:mG3WB8^H!4nVVA9W]9:HOu=$m;?H-^t"a9?tE(@fqC>Y.PPpet>hdAnp?bb]KE\S8h(%)CVOm
%@#kb<-D,"+d9EdUc6dt_fW8nG7#0,eQVN@'L$CR<MI(-:!ub2%n*GE[5(L\Shp%#f)XHaq;Xo[)_Qr]MD<WsR3f.b=5Zn7XG17g:
%W9^N;D)<aL`MEbs.J[UL=nDKWrT@-epZMDEU=%VJi+?g4dAWY@J40mQWi+.<G`kdbQ!1>+JR?T3JP)h6X3-@?EpSpgVG.mTF,lVn
%W_t>5:YhuKT3]g]lT<c=9/XkIEOnm3p?U,@dXLTWMN`Ia7m#3dA*-E7MTa?UOl^G2m[@?bd.gN212:CrBV-^M%PQ_D=K2*hB3+Kj
%\usEfj#h`@(\OKnr3Q<L>n3AL1=i8E=XeHQ^fh=eCD-+V@C[^dfAuD3UgBDPCU3s[2;tW+Z)2f:USOui1M^1?3==3'0"%QtXfH)M
%RbX@K\#pUOl&b5Bk,MUrVSTEL]&tK\C\mX[RXM>*ITCZ"e+(bj#0tp3/*=g]L<,h.ElPOj[t7ZJV)>mM*#!/5>$E`Hc8#@M/B'K)
%nf6\2`CsRDB%QG,2%+]SP$U)YfBi)d1]AAH5C2dR=kaWBFP>65],Okq:p`g=`-*6!6Z(S_62pT)>mjOC1XOUG(+FUL5:0)L+.DAb
%%NECG&G+<.W]`n1VP8XAnqK;nVLIB;1?9?2LU/URWX_i\M78mt5,an#i8s8O1k6A/*$&JQ;2&^\k;IW/eJN?o=;!XnfAra!-:-Q<
%]qm+9KQ.M'HfWo&eN,\rI4!-Y4F./l^&Ui@D-9&Mj;Ni_8m-@O+)jsH*`3s4i+^6&HIDI:q,Nu#,\6'o.Rk+"GhA2A>0cZ`Y6R9V
%bO7FXiQe*dbjRp1YYWF4%:E`FA&OFi7[ZEE-V<h8=f$F3_9M2i9`F"3em,a(1(?t!<$[Ol#Ep'UUB70\]bVDp9FtJI*/W7gAdUpZ
%,(L`,lsd2ljl4P.0Z+>[-*MW8Z;!5=JU.'L0-NK1XececRVBfH;jb[OCQ<l&(N1FkAOWTCQPQql.)'gNcVlgV,&_)*q9ikT<n?q.
%(q"i,N*8[+\qV?ts,A-Ymn<0mOP51LC0(G8U"i-`_b(fsfMpp@6"Ud/r97mab[0jNY%V"''rupa%WF^g,:h2`"79pq(uL!%<J,*;
%i!E(f"sbPB;P>ORMKWD*QUY=06,Q9-Rjm]k;_ar$U-g@^J'P^<TluCe-kR*(ZOMU@<+j5SI.S1-AFHH1aooH4(uqB>!uT.3ee\E5
%g5tKo45)#Kq[WsC7eE[2Z(Dm"LCl8eB-uT.oA"!D&_F.`hW3h^Mg_)0ZEff9\CWSd^5:*7OFE2q1c(/3<`8L/9CA$6>SAlX26-Bu
%</O]kA5^tMDdj.o*5`I1i+0EZ6YFVXnu@BH7l5<6^j[TnQ&Y2`pf(sV-WVfmdI@Q_UEo+u7/a?1=-fGE?tQ(VjaL[$,j[E#7%-t&
%Cfo:SX'TT_cOFh/nE6`R,pX-dV?tCi66S7QIS,R__NchbdG;LS+X%ECUE?dG?4!b&7RV>)$=\lQ^,Z7G(8+IPI+q.PYUTGF3ZNaW
%LCtS"Yk/"D/8>`SN*eTAVVZ"=Q=uLdae)@8iQfME(^-T7ED75jMXV7X1>/eTZ`B42Yk7UaU4ST^de$3'f/2C/?6Q[0C@(Ks9J"7<
%rKaZMg`rT2M[#LUoOK9"j2eG/=MULdG_7oPMsHBS%PA%.!n(L1f\HoI&(W"24.F:()LcK\1)LqL'a@]aN+O6lF:T*_!'gkX9&OS4
%0M21NAF2Q$HROL<]1gnA]heSbJ;.<JFAiUXFS,V"U\Pp-NW%5i.\PW9X829\c\hriEjjUIj/.NQ_se9?qk/F6X<gU%aIq,Q!<EU/
%L]Bo+DS_*U6.4<AAhcYtD$E/g@=*r<)!"l>SEQJS?Xl'"L$(J;A/4kPl@5;&2K%*"V%ktgLr4XeL9.Te1>^,LLr<_Q1>CI/H1Jo1
%_u6YG=l)ZCEtfadco;Tf$aDZ/rH!Hj+2H"HidCZpDZd+O5?!!jiM&`"GpD'i_<SJB7uLohpp5a&QF(@nqk>ac/EPSf5&*YY"YP,S
%JQe$'kD)oPD,/e%q7*)S^WZu%:?K)Q\TrM42K+sLe%.0G[%R(Xl)ca%TeLBSe$pP7G>uZX&4[qjAfG/rqjI+=^>?0njGRhnLi1m3
%bnWZX\Tgt+kN%ocS-2>%BloAkk,qdSgdLDh6+)UQ)'lsP,g#bfHV4*n#O!$nLW;Z"";!dj.AEdf+m#2I5uki@on-H]jdd=q@>T/p
%$B'850cL%]3<K+=3i*IV$KZf'p,Ep<4sh>O_>sIH4'ns(g*W5u@5D&n@=ApYq[`L9;7DC1FS&Pj">uHD)`-57UN:-BlO%Cc8A/_1
%5m+mT>O$2d#o*#:.XY"N0LPG02`(8c6V?1p]d-OrPo^Ul-KjSB-6nqQ9s.i$;EKa#l;A9YX.SsRBD'mlD0JE'egi1B=GE!aoeYe-
%qEk#d7Y?!h/\3d>l?c&k&K=LQ@&*'l!B*8/k!S;\_X)mcN!,l;P=V@AaFC3o/-Z!@9Bte-mro7i:Os*+6Ac:=4e^&gr#J=DmPSqb
%PAt:!P`nTIE8)5?#lo"dbV@e5jRK#37F[c6>a2T(H?,AE_s3seP!$q;cdt/BdUsTjVnmWf<i/djNGMVQXF\X&nLd$6-oo;5kqe<s
%\b-Np9]g$nlB2<)2fCqr(fn]<LZg2t^bo(t6u!Au$3IM*E)3iBL.RGd^)L'RKs[MC$kt._4:JMg#'\t$[@(&V%A=<W.<HlnaK2^;
%7<o`Vdj?oo#f%E1#RO\Z.U08L4uu?.e0'WZe]q(l5KAI-c+IPV5'#3VJ0F1hZb96Br!kfHM?5?9[MFc32Gs>@fPDXo:'P^I\'J"R
%<tI9.aN;&XcK?GbQ(+YiM3<<Ap7mRenu,C0j/GEN,^CeoMrt^WCr6gOj1T\Q*P#"&YX+A=?u[eh9`uD((#$'F-QTf%)RgeU[8dDB
%?s-l8UoC^QBa@XQj2Sh%+="XXCKVKHS62o,'Q""`)2sd'jqXQAXSn+2&8AH*>dPV^Ya4H[Un/7S6?MXWX7&HY?@!N#[`I"p9`7gi
%Wc41mIuOBi_gW1UeEf[8e>@@!P(TRPPJC.R`^L-4$Sm*VT'55S'IB2LUfB)E^KERq;lS'CfbYN:oh+-.#;"0BPD+D=^_i>"\(k7C
%f,FKtl9Y,q%r$;m-Bsl6YQY7>>:!RZ3iI:E#5Mr_?0Q!EKi*#qmkqk#cLR,#]hY-".d:'c$15T$;kah)'m6\]bhk>,8k`)>UNLsI
%$pf1T#kdAWoju+tQn?=aX,f>6MAKaC,qd8/S]mZ?,VuBf8oj#^9)[i&99n6#*0#$q7*"#&X4a+s\$JMkdTK$MBnY_lRVY=Fq*5tt
%68:KQkt5)P"?!ikUZJjbD@Z6iKqp*0^n]8t(_IEolYc27],Pa.MhO/cpM%P7S:'D@/DnP.%FmNI$492i%l#ut,TMALfPk$rfJZ+I
%EF9ji9Sj2t`2qXm!Z,dRS\Ju<RqE<'O=4#YR)-`B;&YS8^([4MS`Ho02"Wmi.prB1dSu2+2!HB6/iie<?Dj9'-)=;Lf8`$?1FRO8
%.@o-'_Lg?gY#\fN8$R`t^Q_(X-)-O)cbP+[=4<]qK>:&(.@2:h8dm_$h-uokF%K."m%[K>9?S?-a(nEQ^uj.<G!?dq@[dHPQ\=dM
%^BdZbOq-.8c:fY21lYph]tj5=$Y"/d8XoS&kDN%)0L%U*AEL_Jjg?H\<k!bda(T.a5]pIm\MPR`UcHiIT2]/+MC)#M6D3GSGJ#8.
%SQ_1d3W&#:cd5SS.O%J1kKqO]EmZ)/-T?>i7<6]pN^Lq[aOPHm4<),fOOtHqcUVd[U;[iD!UmN0<Z%@1NVhR9:TEBEd4&MqNRl'b
%LMoaq*CZ7J&1!SoXPl!1>8,&r*cdgJmue[FcD0-DXm50,Q`M_/*?,AiW08`9/9S(CFldVbVQ`<pk;,Im0n!oUL@6^9pBB_bCAJ=`
%$)9c<^<IU)4/>0D]CT^kT8c`.ZZG!3(A^_2%'8HBRUuT*E[`;]TDdfX=19&u;IG*H)*?9@_#R;;4qC&\Tr9-=_(aSX8BQ26ccdoX
%Ss1#%*s4-<SB4TpnjfV%fTa()q3sk>I7=kmj)EN>XmGPqnhmXYiD-dT:2Uc650rXX!Su9]X"-Ue?"eOq0--I.:;faUaKogWDN2Gt
%24j[.[E_;7j-Hl+U#VQGZ+Z:hd>f;^5Ygm@E6:t.7_A0K4(7iurNKYeec>V`6oUhU&5b^AJc`d$ZDRZ9n,^VtF!K99Xr%4dp>?8U
%^CWcJ'[7^KfD`Mp6Z??Xnp_g;i,Zfas(=%hBM&>*D3us5PiV+KK/)$K=1&CF1hmeLdTBp;#RkHYT]K!_iJ?P\W0Vl(/0aS)"O'\f
%!6HP`LaJ9a:5mcR7e72^Bq$*-i\1kMZ.0h&Ym"f>,E9k=+NTlrh[#V3W;N).bmNeX(db)iJ@dVeD5>QVR[IGk)FcRFSuW7QW%OVb
%(V4`NR3Mcdg`=@dnAId`YJBE[2@1JQm<o8f^QbI*pS0U5C1kan2UFG1(Wno3fl]NBfh?,NP[S_h',g`N@;>t4b;Ph4UGI+'WYXM(
%XL(N=m]F*P"!N!=[UNb`)PJDpF<._f2.[Br-[I3fG]bFZ!QeA##5V4pRfUe*S5?$l8j$g.!9_bC*Vt'P0"EtbB-'qI$AG$g0>nrG
%AWl0n)M?e1qKZ$FTm_1GQ"i^UJD,Y?PQec5ck7P7XA)V_[BBmQ3(4c2!QGE\[P*L6ga9I$LM$g;LS11M!M9\N#5!k?f/1@,PZ9eY
%"B&>C,h'j%$u!-:#%WE>N',2kA9TGJY?1p:pntNH2+'SF?o*e+MHu`-r*cfJC1:n36"RZr?%Ya9ZlTeSQ'-pR_n:R7$M6SD5ODu]
%CD[8TF/#@r'PRa0$dk@,"^4sm78cW^%n-.p07*h$R9AeOZu0\55soFilJN/\][P39ah3>'Q'mAYnY0TmYn<CAToG(('6&a1;lK5"
%n9g[X45'mD@PjPo=Jl?glkk/K802C63:<?2R9GF3n!h`:$'9,rYL+jiEVI=`pWmN*-PRiaj+4TcZO(.!HuR&U492Sq#'<.p.GO!:
%ml6FIXFP\l<Hl#%^b)eI,PoqGqh^T5T\-S`G&-TsZ2>'3D8O5./@H8g-+)ZlH4jRRaCcU1SMD>$"-"PEBbIa3iR:1"fZ[ren.Cgb
%*V8HXg/l_8@;qJpkJllP&mHD,m&#XSH9^?t%r1jXX651$$K`,&mLS-0C5UrOh>9RSpLdXI)CmhcFnG8h:5%k2<i<7XVFU&R8-jY&
%3!k=dh2'*m1/pR36'cEdN.V?T=4egK]uF4,3:L'_I<[qk5>Mi\,;p[4PWja?A5"'C%QuZXrEU<5CWmlr/:u--e`O<XWh[0Qo=>@T
%i?4O)D&d\ZC^WaaXEaZ`]EF50iB3h`C_8+Q9og\MPn`"="CdOhSRbl.`!rF>5%uk,5cSf:V(1ka%(J)A"Gn<CIP:eR[kSd&9LM"Z
%#Fp&Y@rF^??j_PTr&,%XC3il;W[=\SM@`0a#Xjl'"_%8U[02X-%[bn;A44893XB'O>q=%&#]a=$RQ1,;_%e)jGDV2:O_+tko[(P'
%2$^;6>!T$4CGrnJckPHEK]tS&As/&&7$UL0#X,PQE]K]k7@f,m3?1"E(8OZ2SunskopSQ7I"\e-,AQBq'"F"\4+RO4IVsfB:jnrB
%Eeo63]#3K&K:oV>M:>#+ne%H%Sn!Eu>`!+4)+,S]Nr!kUBGXtV'%G$YZs5N(V&tP)*rgbb3f;rScg*nJ;`-n[RS;PdLJFsC-&fhn
%J(]qlOWZ:f0bVa1H&hC4/o4%&n`U>cGGm!87Z!nodbNA]`(`KIC+mV_52U)0>?fC2S.CZg0c3tM((REtrSQ!'5O:L)JAB+KbGCO+
%+&a'PN;nIm"Y;dT(O9Ij=qFm@_cKP%`=8J6<OH5a+L\W;M_Rn2bt)gAq-IsPo&7P^$IKZnQHN(XPQR,QKU<Y#`6?GI!VgJL;=coN
%X#+?i7%[+:i4E3CHMO]COL#r<'K1].69#V/C5AiZ'.Bp-*k]D^%c2=LLF_5)`6B#sL\ch^g/Gb,RB9>o)MQeNH@dmZirsA3b`,X3
%Sol6mDZa0pRLF8IXqY\%8bD?r,Ti&LNT'bn?6tnBUn*i7)2O+7B&$7@/.8lS,FZoX!QSL3<&nh#V$m*4o<+qrQ4-(=m*%:>]S4/7
%Zr$%!=8hZj!O.@\7N0h<d19bYhCp#9I"It4`QF_6$trFQVj0>o>W_X)"3O.8"]e!-oN;9j<eJ2YgoOU\@UsT50T).scq;:5<i5(Q
%,EGN%2P;5$FC)C5cl]gJVNTRI?$6gZZ7(PCGbQoAqF,Nn_-#]r!%Amb0hs#0M!1Fp#qJk'm2R5TP7fKLKcICV9*h;GV6IQkQEA>U
%FJ0uf!<k",%tHmJN>h\IRao,78-i4d5SU8a,'8#'5?rTW!:?kSm`]tdSDMQK"s9?Lc/]K>EN2]6Dkf0"`9B-n-p1,bC+.#d"BV%b
%`KGn+-6ac.)S\PFnq2gM59TFEUKDR<U]C>1\N1n`eE0lpKWko0VCATO]YCe;(ZBV,QWi2**N't27"G`Q@O<\2Z7ph%=^lgM8jXYs
%grfQ\@2*#a`YdkJ)Cl;]#&-m1%QW$iV$iCfO!U%e?eq%Q1+S3)Ec&2S3a"9t$5%+hBU%R39FJ0$[#f[.+VZ/)gnGfM4,AN$Q@tDY
%]<fe=UF%(NR3(rb9:hUUd-JQ>6_R/+2b@H&;AtC6kQEfXcBGo&F0*"tFQL&0<N$2OPgmMBh^j&d@V6]fh9K2Hk,l2nNa1U.lQog-
%-D#3>cMkn%2^R@mk0[FRI'.fef6jPJ0%[GTfbL.HW2tdejcFV8i>cA1`"C\PNg"6Uh:^D)`po+$:-VYC1Vh$IeN+RjS)M_&oFiF@
%WmlcPi\!mTAmWhO%FpSOAn<)"!MT8lEBrfIUTZRdZTNqo3S>asP%C'Sc*o/t2S9ueEQtlNX_H!i76h*H`uF<b&iOl;HtPb1,N:48
%FWUP((3Q55jsuoI=^BX/h[&HGCC/K.m4M8hpThV2'Lr*E$%CHU`1lemZ-UURlsCS+1o(&_.._?Co<OPdO78W3%dAIWrq%%(UCMkj
%m?X-[HFfmr'2LVQ7lt6_;iDK<T4&")j/cDBS3/V?o0HIS!rt]-H@i[S'kS=\3Doe%!(=pO6-**<Cmme[8Q(uoKdO^<:9Sc"604hR
%gPCh!^_&Fu#cQJ(W6Co`#&LORq8gZm^=T>Rb$MJcRmnW1nTDN&4#h"C2^1"-9'Jb.?%^`QEanJ3+<XEnjH*+Ub_4gqs4tC=M8S"F
%J]#fj1tW>6A"sW>n-3m^CJ\qATg&-#7[4fjS_G@bk0@s4dc[BEZqX$,B]1)\9RnjU9%8"EbkfK-1b(ob50RQV"\/gRcK)rAllTCk
%ST@d"MY24_n.%@:L,rmBIHc/GWGe*@2B0fVV+)GYAhtX:]9>94+ESlB>C\@iThZYo4%)EBGL0Vu,+E[QS?pKp?GgMX-`"X._s7nc
%E2Q?r=N#U%+]BR6hct.YQA]MA`6c$>B.%^/>sRUCi\nVC0fDfBh&um[`NY13`#J<;`[IaT5a;W/<A-gOZPksj"losH/=e@d?JhYL
%KgL)MX:O7Mg/>p/liaIDr!KZ13B7epf0iG2WR@2uHGAc(U)[3W^JBaP`^3l:Y]M*!NZ"s8#EDn->ic=J<LA-dj8Eh4?84ZZ##8/@
%W1l'J4?`9'cIC*kfb5ea;U'4*FYn\*0_$IO"#5V4aB`A,U$DW@">^`m\m5R#$#)I/j#N_^)X]-eB8]`2rJjsGmc;cR@PrnK,L=9#
%[[X2N3/8djW\Dm2oa#5$iKU6<[qVcd#hH!fc=DG2:cREERiIMN7_^EgN_Wgd0mm:Teg]r"S_H_i5\B;<0=g@9F=J)dL>i&i"f[Q[
%`r\\@*AusA/Z:(\Ql3%F-:'N!(i3*V[VWugH-"TW6fuocL_`jndn]%B5jC!1<]'T3YQjSS7.41+O;S(E!3ZMO$@.t)ILVke^m'-4
%1>A/)J8S$9jGnkm8K+)E9%0&,Q'QAXCnG8o(PD';0Qd@boul<]"sc^Ac)5VSZdkP8a2pL[>s1gP:-iZ(pgU[ujiYckSN!l-E;J$4
%'5/R]">S*03S+edkK$+lK\ZdcpATKYa8l.g)t3t\C'V]!#b\*%WLtiDM"KVFlTico*'e/&)MtQN\022B0fl+d`Jo_*+Xa)"!TKct
%:1ULoEguR!!kB:3e"&>+:*r[Y&/(8@9;6_XcU>GhGp&PRPunYD_HT!C;6*rd>qt2e&3KN;g6rA)%U.eX*K\W/4D1;bU$/q\;?K]Q
%d7T5:WdH:A\%>CiLj[/C#!j7Pel`6>:QFs<QM8nqQjk<a^acW81A\2t_;+%#QZ\NWh6b$(E7GhH@6eEQ\aN<\U=hM"Spm>Bd`^%j
%W<QGFHntm,HHqIc0&udSI(#+a$\oXW"<8D)7iNQ^$b@<shLeFBgdolc+<8=YiFbZ\M9+f*>EbWi]a0)fY:7*(Y[J!#M\#dF?2>E_
%r/1G]AVG,fZ%MVf@nEK00i_fP_B1B[&_TUC.][R-OZYKhlJr'.YFU6X\KWlYQtg*LN[\fPF5Vd.j&Ph(pFJYZeH_Lak*LUsg^+Qq
%Y+3FE6gRu=GQRP.dH+4-0fTVb#*?VgY"Ue\M+k]/2l0l0b"a<@$-5H0#WQfL3sO)N#HJ\e"uPNn(aD*#OWYFjI2*?>@j4YUU?A2"
%XtGHD,_Wt-LeJj(&aiWhUsSEOOYp#g%r<:,`<)GpPL`GU)EqqKes\aFT(-uaV711QSo6lcPn,BSjG^n%E^e=BfTnmg(P"V@('mXb
%dO!G;$YNas,3TqZbf1#Y(FDp2!]ahs'@[q._)/H?'[FZE(b\?H>/\^GI)l(&3klcMhU<sh^U*P$Q>fri,-)=]cpb]5#\?iE!4oB0
%E4s3[lD<"4?Y*4EjomisV)b<GP"*/XaIe9@^a[WC:dN$fE9^P%d%.jo\qoss>0tbWSODhgTncHZBX=XTN(tLlVdI\7&Ag5d,`Q]9
%YL$@icGQt!PAQ+XqflUa0"7'.Cr^'c>%7NcP)cWWUJCPFNuL06g>R']&EjiU%3'`H=W\epnuR/aeOV"0X&L^]+M_c1P1aP&$9"$f
%_X1S%LuM*p?u]Q)4@pa#3M"a6;s1]sf)/jT*jQN!RUT!d=0iA=;eUr`#a,80'R`s3<fc_&\C+V4j;J@Ed9)QHcqoQN2TK)ZI0ci6
%i/Nk3[<J<$)U<8dO$Mpq:6O0c352FlNuTGcA4/GCG[cqWa&cC.JI##9&-ITP4i_*%G?KW.WmX"CjGL;b7`9LBA,-;'<M;nZc^3^Y
%G98,EmgO&R>o"iP>kK7@?m_1rjW@#<pmt#gRTud]&rJ48]>UIMim9Tj_-]a#$NYVV%:RgdaA,A2TPlJ[ojq:/AOYuKRW7q^=0EgW
%gbB`!.X&&(@sRVRK$DX/jsfVD4r6',=[-Ua5a!/4q[_)YF#h_!p5_BTf$!&_/0WK.2$rct$2'n`+U*][-8IQmM^'X_,=ihnd7iTH
%98D%M+"dGu9\qa\1j5E5.CpL.I?EIVN6HT+%cPAO)\Wj_XP$(A`D:"2I\/P,KI"g_0q?lu*?UKkoE:<mU%@ZHD_oS*p;=0]HQQi@
%2Wf5A^jrWP8.tY,dNi<@#n>*GBZ,WN='BdgfjBWC:5<g67#6kif"2]<pmJX;[UeKZ>g=!K=.d10#VUYkWu_G4)5*gl]X>\RWY3:`
%(\F=K8TrrHU1r0XGIbE2=&@H>`M87@([[Z`(o!(+k5HtC(Mu4LaQ@Qb8)"U'ijc.r`oBL=&aZl.B;kKHMN/?$Sk"iQAbU"I:?;Xh
%+ISW_TJ?&1bK=k*3^64867cn[7n"U4a5Smb0*33M9W(U_$+s0K*PkE5EcSoT/G=T16r39ERQ1s4$m:YA!;^@Sc`V3%kJ6W6+gG#R
%n#&@AElZDc?@EN.A6sn;4a:mE\fZ[l:Wh]cPojQpkt]QuBrsB&rAo6o!Y[U=:O_`&9Yl>e.,&-<:-3RAB'4>454UQP\#?stJr8SU
%K/?l`Ul^LqC%LA4_$.ND8#i>G7McV.qBsO!@o^k)rpqGHPr"IV.;Y?:HOa?tck]Saga"?!L<O(^I^o4sWsZ],j3rR;%b$(X8jUr=
%R7:gK/;p7#(aQo5c<aHfAC\0lR<],8%_J$W`Z-BIm'9'L"]XZ$RjY$^PEtC41,QaG/3D4.h*kJ1CP4Oq:!nKGlI%C^D8)7jeD7[9
%'Kp*tmgj;)N:UKE8,:ZV<4Y#dI\]nun*"tJgo6UPI>d0/@a;i<iQ)4U_A.MQ`@kFu?M;Yu=ajb(YNamN2(Z9<eLYF8$O22<DoC@H
%Z^R313C$iK[*J#$OqkWH/SHR:?RUej6dN/CP&ihakiD0QetZh>:ntd)7K@+:eUml7mc^/,2(=o9`a19WFe.!W7qn.]dGZ*`ft375
%1VH?lF3_ej?WYhfckM)j9rQTlY&_h#1UA\7,rK5J8kbW5i0j9aiQDk[S@Z&"\nRP;9:jEm):+J#*fuiG@6hO^qND%>MZ'cU(5D%q
%qLVLO20@b7*"=2\6W`0dq6m['%I;eIm5M,17KA4QHp_RRk]:@aMCSCDhsb]Efg0+gc;.?>OrG#FC\R;mVlDAd;UbjGR<]$1%pTB\
%Ho0O8hRo8:Gh'n%55I9OH5KN&P'S)%[4+5O,bdk#om0:N3b%gL>BmGJL6n5]gs*kHdYX(bZP_=g45QFH9ZC9ag'-F1Rl@!h]>naM
%0.gjc:jD;\]U?[Z%Xjr<k$*b?=^0e`+RT/&OEO/B:s.[,OERLUeoZ@FPNt]ld81=>CK5D?U&Ac"G,Y='f'tLl4&+km4^!Km?"F%[
%L3+J#msce9/g.K[eWGPtnkoSuZ<:9qLmXrSH2o^ma[Ts]7^^r@TiW=rUQcZ.]e]dO2qgt;pJ6+9XBS1RX"`:I)D\m_('jChZXr$!
%Dj*rnXCo4K/'B-;BKc4uWne\qK<Z3^Jd<qS#$M%3%j+XS6:]VRk*M$_g(@TrLZaJfM@8.N2L+[aSlbJrMjc#sL:I%UKrL*NPf9;-
%)W&#m_bB2NU^kN(]OA(/o9WL$G8W0[VR[83@<rgiW"FT\^mq*WH@lWrHTG$MV2P[#-80]dZDZtf"K>ecS?A':8;?h<\3_\%C-.p?
%@Kn7oAJ(W[N<JXbR0/d8\#mXfOF_5l*)I&lk^">N<l7'2pcsM[c-EUH"L%VBO\X6h/-HWc0\^YTZ="btG4ABk?E,W!aP3,_QY2/c
%#\1Wq?H\bumN_Q^L':HE+UilG6pP5RWfcM(6\"l_pn>IT%kk/$/At;Xh]Lj]YiKF<*kejH7.'h:0FHt0RI\RWOV:IX?3#;-jUZ3R
%MaCkLlCn`aO_)5Z@jMD'3'-%FfqbRXm_]92'.\p62j'bbk_Y4ML1Ok\0KW#r:6t>H"^1LqM&fL56!t%%cOEK-q`D(frE'aY(t:d4
%DhT4k8DX@N:0>CL`?[RY`1_K<'QW`ri>;-s<<1JFl$-:iD=faK_amL%:;p&ZE@*C,cd@t*Xb(4+f7mR[-S@bcZ<KTRTuq'LGrj?S
%=ulA5Npo@!:[71@$AZ])`<:rPdNfLYF`k(;Utj;t<S0t32pF;krSJ"F`9)Y"BZS?bgWV4CmgjgKABLq((f@:VLa`E?6ZaKC<.PFs
%N#8QYjr8+h8O55d>aW7]U/>c-&@m\TUEuYLCsasfM7#F*r=\08,gb%n%O_\JEDMtg6bb>ED&5Y,;!S3e(5^S87*0j`]\\H'<Gd48
%9%FK7=`Xr#U2ME+$_o3R>=4<>9T45<i9_sPFKSdfk@ct^Q'4kjW!9d6g^p5O@auc^BZ&f"%RHD=T-7i)!$]gCdj#i"88KMjarNLX
%eX><Vjs[If2NTm*Z%HF!/'T`%!67e&UaD6Ph.%Rd9(3Xq_ZQCF1BgNA!D3VM`0K_.:n-PHbIC9oa/_h_,Vgi!U2O7,WfKBZ_(W.B
%#M-:0EUq^N5mp,?rWYI!\5;c94Cj7)6cN(r*.>V/79d^(dpd7/_-LhCKqXJ1nRa%ij:fD4e[I:q-\/]4Mb,>$6G>";'8]U:_!l.'
%4#&`TBP?\Ld,-N3k!D+phB+A%Yq[:]9P90(o$ZTpVl>RT2CTEHZao(X$P8NkA*C,uH-qE*;.X]2Ypg;+'o(GXoI,h]#b<_1:q.#Z
%$90gen\1bn*dqpTPY"g`.MC:$Qc.1d^$&35RK0Ic4+dQ2(Np(7NqTpl!r<<k*O>ML*6eOG9<X.RI([;-\<E:++AqD\Ur=;$L>Of=
%QGb3,aY:5_R`&(nr;cnuEO3VOV0B!u2=hD3M5'VH;WQA\<sfo&QZb_sf66!S,1Em\DMOk7$n*Sum+XS$$3J<mL]/]QA1UVI+!kW(
%?RY4'I+Wqo>/qaQb8,q<(J&B?IYV)m"d6>e!MJRpeB.9oDNOsZ"5\?rKs"<l-imB4)FN'.m&E@qN"hsgeQCND3I>.hA623_^d=jm
%h+,j3[3CFEN(P+r&2VAV,R//ocYFTP:B2O7IeQ^uSFr-,W0Y:gP;%S7<Fe\XeA4Ub\dDMpL,nP*__b'8P"1Y6SKruBTZlEVFp%!a
%b74Ekl.I4fBVHR?$AG9ERRE>1;'[P\Hn5)eV_1&6'>MBq'9f+.;tj>cMHOL>p'ZK99?;c#_E&MI+bcah7k$T@,B]%lPdp"?663(2
%qk<Sp3"fl'ZXH;C,nSNp+PQ)Vd#T)LSNE,CJ:rTu`CXeM2P.=sGL#',2b/:C#T$NHTb9JqG_N.+O/L[99QHB5V[;=qK?tOl'6jMk
%Xt7*-^>"dIM&5B%kg.i0j(IG@m(]XS&-O\P!,2-;2[S@6:O62F;Mc8gG-7gl!M)l"/RWsZb8DmI;s=$(b+?A>HGc2kP4-qNSi^/!
%d*p]2063&XoSm^-]0]Afa#@\*>-^kh/B?iE[om4LE90oVMi$REe]5;E//6Zl<+eOj3>`B!0`jh+;$;`2I(uFCfH)L8b$GN9*T]&t
%d*sb.aUR*U0NKGF0t#8B-or@!7XAK#(-oM!o]8`4ZscJ0Ob4,RKB5uRa`?s9Tc+A"5`AYS4(FUiF=TJR/;,2d)Dqk9.[U?42\VEp
%YR$0>8$KYHN_sFO3p%iH_l4"p>IYoW_V7q]PI[qS-=rh\8_@5dqLt2:p2O%$^WS9j=W:M`DO=sDLp8gg+?:0T?86bD54@ik)!Ss*
%8"$A)BjEbh$t\XrGO*YP=PP6YC2Er8biR]El(S<q<GsgQ5Z$W,P;6t,b@9aC^i=B8&"0c/GN53L_%sHr,s[jf1l_Id#1Rs3fU32i
%B\.d%,eiBB$`^<WIj)-a85t9i,MM:bD#`_i)`6>\\\C\3J-V?fC'2USWR.c'3)3:M;!H%iH0Hp<csr_o%L-r1WeckjLaQ5Ees0)G
%8\bZNVhGRBVK)=',k'@([^YOM+l_9h.KtTgD!6&gS,5il',$a,^BPTKaIm=^4UhF='':Taad,oe[^(L98d&IN]VE%j;ft0^4%gHU
%@fViD1R'"&Hk2#j*]n@3a#S<71(4XO*aGoNR-MEkDR\!A!GtFo;%QB>&.>nL-E@iMVlj2OMje36iI%>#JFpBL[K;WE8oMO$3f73b
%@b=6tLNKSa&24Yc[iLV+e(b3fgL$8!kYugu9YTa\,b0c\5@4O^jkfHAbgKgoF"k"e`1Bk"<0^W5"&"ihFu#oN@2F2=U%C8XF_jEb
%TiC1p.&\G.[bP_2kWQc*H\,!g\EGJA7A@pY.QN'g8R_b@S=.0Q:O5BMcj/h%X$IqNrUrDEL(/dT0&M<lpJN?6X#qosEF;G*Z+#6]
%2@dEXBuZ'm=LrpFHGZB>Cl:aASBmDT/qsJ4FZhD$e]p*MflflB>4I^*%G9(gYU"B:Dp/P-lNN!*FC/0cKo=5/(",?;i5g/nl.;<o
%"i>X9fJHM[N]:ZjU4SNMOT=$_R4e1>nH2OYmG)U3K/dtIgkUHjna)Ubpp#%C,Fo7,o&&7cOLjJJNp(6C_c3A0\rBmn'$Bp)alZ;B
%Yp`Q\'K];S^=7EiSS5i$_,8'>A^_e[?@FV^A_cYXh6>9"7<b(H2\@1?DL=lR0%Tti;%OKC"Ym<b&Nu1I\VP6mo1$0_2Lo2FK\:Bf
%c3EhtI4b:?qHBh225kUl!,=An[3!m[)Zr1o2pf,@4aOOtWg7t&>sM7gplO(fo'r5O+-A=4*]7%j89beB<E9@-b9FQI[`po8Ci2@B
%jknnb.)WSZHJ6\ciD>3>95SifR_3O2NGVRb%Jt[u&0Wc]\c$"(WLJJ'<G[/Am!@6BZPSXn:VAY9fqW26DG2*gRX4rGF8t=j7"%Gs
%qG1EP;B_1h?rAHWr1-!@'ZpPuQqJIPp;5Q`]DItu"T)Hk),-tqa?/UeA(n/Ik#V9@e`r[RM-YJNLSOo+^*V*Pma+:l:U;#JhQ,+j
%KX.?u#[Gp1M(XaV6T(4!#Bc7[0:-[$D%D-'aB&CgVW\)ZVOI-.fG-<t-&=Ia0iJOV6Wre-:Vp'pHpUPd#jsN1d/<CPLB?jFHYP4A
%$U-:HHM*1Df;mUi7O_,s.&3,^$^pCD4e,i70>p%bQmTVl"k0EsoI,lYX9';Z7\2ZDLh(gZ9,P6!HmV2Ac)%CF*Q^u=5B3ta>r)Oc
%HhOYN]9go&\lP)>#U\rOnR=a`3`bs\O2W0cah5*59U3t!:n(Ta&RZT`_WsmnIdWo@eReN<;OCO,]%E^5I6j4c>XM#d0,D.9n'1QU
%>74`)+;sJ<6=UntWnpqBK"?6$9tLd===7_'S!>m#TZ;Ae<nanjcN74O1kH$ZB;'+)m^'OPaAu[Y`+#EAQJm/A\KJU/`=TT].k:*T
%#DdZ^6b.!kF"4-C_36s?DX2<-!:#ac!(]%VHaq?.gkX+JX2ZfBE+[Ice$J[UQ/nG2R7%/IOY$apq9rrnoOI"e^PADH9R-mlfh*;o
%b?):&#Si%o`=M-*n3Vj2c=Ra'FD9ZabUY+uRl]ND!i(=7fd=U:#\.P5SuZ0&A(jn.#\`Y'@OX5/->2p!l%=2CQU8o(C`/DVgXSMN
%H^.uD@.h2up72)D4,-R\e"N59/1dq2_%Jf2I=$4qZc<Q\%F+DC"^)B,?VdoHX4Q5WkSYc@NieUM`1`k&0IDCM4CYoeS28"Ijm#pK
%#ud_#=&q^E-_Lf/ogkE`A?5fWgDKr&f61,5)UJ^8,BUNo\]m<=?$mm6fr#IB?n6&]Jbp.U,\D)*EU<GD@q;7]j%H+Cg=/A&5m/nO
%@olarK%(`cRLGJ+`_:Jpo<)nU&YqK@^LT#&Pd)X:[T01Y-\VcnXt\<2[AVK/h+3M2K?lF+&Vlc"&$c<RkibBD)F4[8_a\`nD<^Lo
%mnn=We[^>[%(_G1.!P.0af:@s3hrGa&[!"G?Qg'eCm&9ek\(hVbE=A2jmLO3MQl1e7>_ET))3YX7BEPiVmi9N0As`HVkA)r]@WKs
%3mN]Za(fgf]Xn63PLi[EX.j0Qp%pUJp-RQd$m[H5*<t%Ih^<Z%btUr=aEd^h\943<8``IX+sKA'qE6X\OGa`!(iN-WqZ#I0g%FQg
%**;plJH(7>HoV8?Rr"7SM;S@7#&oY7,C:.VAAJa0Z@fPd_>a?(F&$kAmgN:GltGdoj1SW\hBCS0eQ&NmWEZ8MCA-H.Emc9OA'#H#
%TsITs$?ELc$NZ1UpKN<AgKma:")Ie_gsau&8WeA$.\G6WSUiu0/a<XAl=q>OG[sfg;Q2k%$9mRN3[<C<Rg"B5P2QfZAhM"Qc)fEd
%:5+Wb#Rtr@#!;C^X,:>5M'@k^G^;NA0dY*F$=3pDY')/&6+RLAJh*:q=/5Ad<6_%`%6bfHpOE"tHR"T]KE=cPB9Np@[q+GlMa&e_
%J`3=<^]'._HdgJMWiUO3/_iLrg/ONnlrt0HWWO4Gb]"1,c2>q80^3&1&I;FU]^FGUH5JRQ1Gi;j6$mB1?k88S%mfHU77FUlo$$o_
%E7>N2PnMA;"H//EY9QMh=-jXiBJ*@O275#^D_6K.Q&id!@EX8(#N+fF1PL^+ZVLUQ>'4]T4JMClf3/:Gj/[A>%PXW+XC<[oZqGn!
%o.U"8b@[WC\Il:\)u1?a*UGX)nBrO'$-/-h1;^>W9/Yb<\@>]EN\@38>['#'@*@[kk)`qcS^@=0aP%jIR)*`bL%<rfam9RQjsP\*
%j;"ikA3I[S/_d[ONl1WM5'ZW-mJ-4Olr&l6.U)T;eVlc;CR`-2]#;Ta?)6t!'I&r^L8c//<:*eb0R8^.?A#5kfkZ*I=!^6l)38Z3
%#<SiJM;=NVLKgGdn8C=LiW2g[j%#IWC"o!@SX0[7,mQBO"0cpqLtUJOLh^`Yns'$KfWBcEV/m_)$&jHA,T^?jH?hCmC:\G'hu%#T
%gNa7(Ni^Yo^p0G(*-C7)07)Rb+,\D#X*5e\q4MJ0l$\Lk^t3Nb2jKo:6bbmh]"%#FQKTfCXV[mCM/"YZ#g.tW7:NOL:JP#BKWfrH
%ACdrE5tjqAUE8)7IU'#QV*242?J#"7O^PN`kpre6Ke-f59]eA\!N.F=Wtp2"#j17dI_NbCbCY3X`&N*;#P,@<'p'Rq\'Vi.QdC%1
%NAg6pB@DXgO'SS)VLOe#XX$[DK%\>"Rk]&ID??.b7E0a-;eJNt`dQI98"S14)1&IF[^6X;H]\Bq,^!38F2DItc+[Ba9VJK3;R]@a
%pY/(B:og(5>[o0D$*(\LF1LMA2[Yegc6`%]b<@eV\W'5XCeW3NM"NRSYmU&U.sk,^'a8g`[IJs6*\im%'.M>O9KZf_lE0ckD92[+
%kEh$2K-uIF#a;TO<>j,!7U2@8P*MI^8UB-S'eWQ@>2'`D7pL*G`3mh#i)T!n<,>6uCL&L2Out,+dP!slcXq/Oaei@j[\\qdpDh(%
%2:Pm^0"H]&Mpu0PZb4Mj)sO/:K#:=`TFl1TlI&I6n)q5%;pW8>9jkb>S9*GkbW(T`<IW.O*AEktRF_\V7chGA!]:W^]0>-[j3S7^
%M6qF;S</mL\u.(5_U[#Gq([ZE@0PmDK9"5BZfHs8]*7*XW^3940q[(RcWj<i5udYY]3FY4VS=C^3X%`n/go>?G5C[Y&Bs4F%Cf_Z
%8C+_97;\p`pGNDLAKf=(D-T558s1P8nmDL,bMM&kWJc>P`B_W?SK1n>/--^@T8W,76;E>uJrFBO.H!>sYj5":J(i+BFaMl+gO](o
%ZTOSF^o_"aS&g08m7?G>.[tNt<BL$ZP,ggiW=K/j<r3F0Yu6_4:dCj.Xs7OUUAc<g5Hpok6j+Zs10%I%-&/,q=9!4OSg6`p"l,jN
%%P5525'5mQdNAon\JM:hl;F^uhE#<JU3nZ%7SI4%jj&Qql(p#=Wb>k`0slk0I:`2Qn'f@("-NlKU(rgN-6TR(E>j17_8])=$TK1p
%T1]LqG"]#.N[!edDJ`r5AL4%np2@l"`NU;Jdq7@o_N0L^i#31^1B:#X[DEO^89#_U+)J2NcK8$B_tDoii>XH0#D8*>S*9\pe<]$,
%D4O/pL:S@5/(1WXO)sfOnl.?$B[;e2<*Np4W+XK?qQOQ^Xpo^sMc?dUD&,f/pTGpk8)oJpX_Q"Nm1Y!H7@;"L:]kd^2^^i(R)tA'
%UqNL?L%f*691Lm^F0f_S+Yj(Q!A'C2jpmH<J=85BoTV`ICKt[6+.&DNa?BiHA2YZ0#,O)?W1=F'!BhSX_;c^]9[SsqfJs)^RqoJp
%:\L&[QTInuG8T/-mq(\J")#.Q,Y+`#d3(dt,IXIe%`fPP\'GbIm69<r5lpF<`/gh8>dV:O`!/&VJgqJ6g;-.j9u$%&J.lLplod$4
%9+XI\B.@dlA6AWe[3s6ubsFPX:LWAnhcFP9X`LY"pnOG"F*"%C#ZDi4o-A(?M;?iTdtkEj_.'ZA>nBpgBjt'40"e*ms0A`2,Cu2R
%3m3C@9aeN7c7Y;$8`QHXa-:5k*9q.A>IdWtIjOi*%*THTWjo-N4dHePE8j'd/-aL/$,RX?6]Arr0Spat;e+E+.V$u]@MFJo7RNM"
%l(t9S-D#1b0,A_Fp5o>GJqZS"=%;usP<oukUeP3CJ^rD_eR[sFpR[ujO]Wr6-uD1mV"h/Ha7@KA/IQhY+a7^GpkEu3`7h&BZ]t@D
%J4?%_`pP&8CKh4Cc>fg36+fo@],2\I)3Dt69jcOo[F(du^70Hc.WZM$FIM4]SJO())Cd,D^_<["%Hf$^"n41/Y)+T$%2-Q%hj+-t
%E7V#o6RW'r5poYt:pZ2qfpB8[bUeT_)9"ra\6Y8413W.E^u=+3]hI+;-\+TQJ?*:\#[Apf!@Mc[o$ql<J)OS)(K[QJE)QTpHLu2Q
%huE*:oZNRCO^0EXDP2IK.c/5422NI;l&5H>_Oj-F!/]7]%nZDqN5nqp!qUdDQfKEDU+=bC!$1'2P>gUkU.aLaG:F/bTG(X1ag[1N
%E1;Je%lsf&Xsd-[5#B#4k>kiXWi\[80EX6"bQUR>UHJ9,]M0It3UCZnc#Vu+@_K;$_Ubb5"B^r3G.tTVX,d<ASi`MsMrUIH/R5tQ
%>")Za_lU_/45`OWFErs.M9)GL-!<4.\KRFk6WuuRVQ0>DKG)Nf7t#AH"?l4BmW^u[\hd!;7R-".+S#-V<Dp_=M0__mq7N2uCeq=;
%[P#D$NA/_\nojqS^m:!1n<K`BDp;NW5.R*O2T^\j;o&;QXuka?6^F[BBmoV)i0.2Cl^^JThKC`&YA<`Kdm!kR;Mer>9KB,6.k5W\
%%Mip@R<2Sp^>*rI_8UpiaSg1*#<(fLJ#=1>mT?Ffh2rB&j\iG=B]!rhU2CDP3&WM!Y5PSF>XH$S@'.p_RdF>GKQe/<.J4`fMG).]
%<\C84/n$LQYUX&DAC.Bs`,>7ZXH(NJHPQX]L//Bf2$'Aa.O[P@MBq5^@m3oja6*<QEUa"T&ps;D^\R]OC0u/5X']R;k<*IOeic#D
%h_*`cL3K*[aUnf6e0ZUC2WaQI-^_QM'#nSA]Hd>)7KVtXBl]0:p"j.-A(a7/hg-q4CNM'cifrEfPtNkOJ\MO&ZGm()FF_UrM<fYp
%I(]Vt6Rln3N]OB3<g&lOr5QN+hQ9%)[qsMG1$Y%ic^O^2463Orm,<*4Tb+J,]Et<<2VkuGnQ@LW*[EWn&cg-J:#:*#DMG7qm'=fH
%_?6JtmJXA6WRc(FK4NZm[!<CnSHM&9g<rEiR)CsBU6eI.TYq8H0eL@(llHY)U^XN9hGj>?2HQDXS'*)/Hk*DsCneap)h+^<&pUG>
%C]Uu='8Bm%+J)79MY5tp#Tu3be2b%JGn%o2]EiQ[BEOPo4S;g"A@HRlm[BEaO=(/m5j?>D-K6JSKd\_I/g)f\,;2-Fj2_mqXdPCG
%H@3A0=V>EqJm,M1_:VgkJ@/LW7]3$!XUL;+Je=\s.eaGFU_MpiIklolW>u9ll*%YICCaXGH`,3NSg+aG#a^531DL200X?4nZLjd@
%\-J0B?bm:dl4Q3h.^saq6e%G8cap/7oH8n[-;KBZ,oIsQ?UkZp]1Re$W_']p%O<PR0fi&5W>]f/h[pkq1K1;^.#c@8;-_\O_(%mX
%^3l7[fK&S_-.]6"L872*Xi.Fmm]B_L^E\Ks&Gm0n8[:"l6u*6SV9UP5gp2/2)_VBU3r(Ou,4g'b\6D?RDdu0*k#8\FHO#pC#''qc
%U/:V4RpihbbW>d2[lL-+aF#H'+e)*O5_gbRJ$g5E1fXAT4Q2VJ_`tO<>9c>-CK;/RcMauu"9s.4fT!$PF"n8B1ZuIck>9B=[`o/C
%=2XgqV_a:h^+cnD2V^R!e=)V^P,'k[D:R\Qrlm?U,EkB1X)<_k"7b;]i@>&R@YlP\K-NaOfBh;F*#r[\CpM/s.\Hh==[+L/7'5Hm
%_-)sj(ch=:lGO3a:oeV:Ho@U0KFY%r->HgK+Be2JTrG&TOshgl20.9Hej'W,cc*#i"B1XFICSX/:Vk>Me1C2I(>k&+--"$f@dI4N
%&)Tm8KH\jlW<t3jR20_u*N4C_L%$3@Bj=)(/*q&/nRk28.ep#OC0=Sr;$Kdq"0>B-3bqTQ";g<?EAYfEf%=_YVrj1>Y@nG0(J%MA
%&VO?"0EGN,,d5(HSdI>7BlmG_XE$i,P40h^l`a!G&-sF-#UN!2B*B!JZ;IfG#pOp';h8S*c!3ciHJ$)UXc7n(eP]DuL+$(.k6e'&
%jQ4^/$@r-3.e5m6\-.M@cUkAF<bWS,71MId:0"-,Y(l?XW9ZA/gKsOc2uS,&mOnBpPun@)7U\$=<e4-)b?bTTO!(o>3l6:K!50>f
%[K&`sF9R"LJW`A"STGT5`=f6nWQZSP9KJ%U/@$2q5YTJAlGo*66hn73;3:M+-pI^+7hPh2BUW<Yfo4Z1O:g\B*oMa9o&*sXkH^Q>
%'sOF_2dnjCXqAu;PX]o7`+@e5\2I&J&WWffAR=(S=.Q++=fY-\W+fT)or=9'5a;.`>bZPb^8&K?!m%=V8;k'J.DlE9;%b3fR<N.D
%-R4+)`8K0209`&kScjD<2r9d'^Pa\frP!KMKtIUqX5JDgN=pa[EAOG>Jr1\7G*kXe8a.?2/^S?(mp8_]0;&m%f,BLpqI+B8?LtIY
%*lcQ2F1j=NbQHCS3J]+$pS_EB#]'Vg&s+[1rFdl$KM[BCEb5[R2M0RJA!tS2B_+N\M+UrJ>84=FJ`<E(46hR"/%4YAdWIq9<Dfcu
%cF(5)`msn?*rtrI_C=o)Z87=_DI=01A7i$'cP6U/VYQm9T6j$3kFV%.-:udg.)N/`0h2eY(/Cj^6]NW3XME@#jl:htp385^#DZ`F
%l(u'hOG!tAUG*#!ZWr2UW-D')Q]8M!+kI^o=[HfGpuj.6Y;lK'h%&fLVKF_bK>Znm*5<"=rM$Alfah!@kB.::KI`mJ9;0%<,C5pK
%hO!-hiJX\Lj'"mG,r)f(977n*qb58K"]:9elWrbGV]5deDDX_AVpN$'N(Hs7C>dV,S)CB.epb(iAhWpo&H-))P<S4l[Wb9JW]PnM
%1]m&HjBu[8[n.7p!c&Ru*Af>O.pXqF))9!gQYl_$R02["q)Qr30:'@A\M3<qgC/L)l<,@L0bDA@Y,=6-BWAG"%8j570=97a*W/"B
%C1a4OqIt,spJ-\&6A(^c`:`$;;CYdZ.M(,l!?0'a<<()nm@e.<+[CZWGb_l]e;9fZ?(#)q`0/uq2k99hd]f-)dl's3o9j9e`0eXG
%q#SUkD9^oI&)@R\.hKZP$f$Fq;\gi?"m5rcJZH0sJMsE?S)MqKoLSn0OUc(XXRf6I%ddPSLUW]G!a`XoDMb!#d\6R[k:T0Kg/UT(
%D9a$h)6Jok+_2;2\n0b>XP13;#jNW)'ZDqshkI5o/MjQ0$GM]Mem+"XiR9\EE([&BU^<4nS_9>a6Y9oUTqE!qX(4W#au`6jaW-*4
%V7@1+G9bHe>V2-IL7jY?E_8fRfZ!:-\X$Z8OTNq$GWJMG6[C]JKm/+n.T2SO"Aar-8&=hM32pUH(`KqBD3n[\doO'(U#qh@ToM5M
%1Jug256/EsltKC()'rc@V^u)W;uiu>RS!Q";U/-jdDj9I9Nt=lW7G7Wb-1YZr*m6%d/Ce'6B"G)$E\S/$rNVQm2AjeT?[>/X-BVX
%kdlkAju/uo;lb@AS\PR+?bmpD1+::"HCpP0G;A31i*i,.6dSO:L'Udf=#lp6TTZ=D1#481IGIXP>,4f@^F)NFr*/D$REXDYQHrR:
%;TNs84[iQtLq+PdgqaY(.XH,NW@Kp=+(MfY(L7os/JiJ/SQu#^X"E-[.nW8lW$;=U=U=k=5BueorSW%rK/\4(]_k<jU/[pGA0X8N
%]RWmn1CFSWqdhXh9EKJT4U7o22Dkf4-1(\%%5f6,F_JB01bVQl.Yoc,ZNfTdd@(sa\IfqYl-bn7?.<KW.jW0+D*GK-:b0#4W[XNs
%l/\XbDQdZ73dhrDCgpl3Hn*_1QH^Zu+G3&,=B5g`b6jWuM/?P82@UTAJc=hR*.ssc6^9eG28Dukd_ln[<G[!^jE<-^\bNfH@_rQi
%$fA'32)Sg2HdS3gVOJ5a)^%QqZkBTagj#"\_0H5FM@aK=.,*L^=4Iijh*_-WLJ6O58TnUHXfqH2L%#DY;LKMe,Z6FBVlh-/>_`SA
%WbWEi(u&*m5Zl5bZiF8]`i5ZFk8=[l=L%gQ*o[tDKXTr&G4JJ[c;$QVrC!sV\eM#n4C]X%j+r;_8q[nj:-cA1,^L4*GnX,"06<Kq
%2nGOQT.3`PZb-%I5>nHsfT2uEi]ao3FguRfB[t$No;HDs5jW$tl;R?Z.(VfTM`p,Y;B"1TIdH&>BgW0kR^k#-+Y=];N'p3k0Oj<-
%2W+4n6e+U*J=e9@+E.DU*;5JAD<<F+YsifnKqDG!\:'QF4)%g/%@EAV2uC*gF$%hl,@fq@E/h&`>1F;)-fkEVbu\dgTQL,ELf!/3
%=$?K'8u-*+;-jmu:iE5-pLZZdUGj3DW57ZkZo_KuI]]<$g'H"*&O"='jj`H>oNu'$f.j/@hVNY+=*t^i7D,.\k\&ocT"?Td*YABB
%_(&`UeLbV>0+m@,mO?:X@'+5B(^;,R<?HO'Tm0%HE3Lpo@g2J_QG#7".1!5Qp?e4<6-VeK;V?h(NN\:,KUPQpS_Af8U7ArDMa:6:
%d#Ji(%]i8'[Ug0?A`+aVW4Ha77jk=$XgdrU1$(&$jIf=Sn.]jmW1;ps6k+<`;mN]@CUl=:Yskm%J`,2GZY2ej=O,]-(ADl3P,nbW
%,e7T'JeYb&74?;$ilYfiV51,Ab3C++ZMo"@O3(Ll73e/@,go71*AN*3[fc_Y(u&f,.VoouW/XgB&:ApHiTb!q11dWR;lDA=K^-`C
%<TW@m<7WR5nE*P$paQ>4RtW^U224]+,Ie;+Q382pCrToo"cUE/:VCWdiKp&:,k!p?TRlUB.bb]O$)5m"i)Btlnq:s/ppLGeldCrE
%9XL5O:sYRN7YjSiqjbBoj4`2h;W#VMB$!Ql,<mG)o[58LSjSS:k(:+*Dfi8#q0oh&RC/ID/ZsjJf*-MKkM+r"\pr:;1+n@:)V(Y9
%-;tb"OJ`O;4o,dM:.fE<'oG8!UO-&_j%<hp#s_<=-ldK#coh4d]I+JGi2=`0DePE]iu<+ego&!PID-<QXN$qr/qc;:fCV,a5'YIn
%rE_f-9d*o-]U=dek8c2[>^E*JGS7O28dYH$N!i8Q6b<X^K&h^c?2G"W>J<"pbXsh^G+!XsVRTej5&]joEf%3EVl5-O5R1[CL_UX2
%&H/s(GbWk;Xs3>bQ^;Cnc=_r&?$u_GrD`aMi't[&`9='B\'lg=h&NFIPEIHY/KkrTee)eU;1nu9nDq0HIGVR;7d4+<:[VDMmoit6
%PD1G`"TV(`R?'8`f5U;HY$@<jNaQVqlJPBQRsU#[7kSBIcm#?CLSfi?,7>!&4LDa(LE[].C1dr_:YFig?&[j"0:#AC)!CWH*+st*
%QJ0GPE>IXX:M>XJh#1,&LT_m)'@:]sm=Z[pqC]h+IupUMCNsK;*Mer5FV_+NEl01!TQJRhP<OdUEED.O!-:f/%o,T>`UiSC_FuXO
%?I$G5HSGQIq.6;[;:PC5A]+<:[O&i:K.6b(I,#_QJHp4!S?hEu459Uun_fVE2rrq[Gr5BiZD2cLqY4Q<fAD:Qs/LaCb@DaUB*gX5
%Y%[gXT1@NO/@p5fcOtDM`i&chKUnrSo=]1h2o<jTbkaG1k@\nPUJL_M2<_eY@:pQ;?PI-Pm&1kPIqrE"ljB?]8+o*K*/P$^E)\<<
%e7-P(dK:mtfAN=/R^]inKN+W(+s*1mIson0=!Bqpk'#rlanIK0Xo_!GVXq%`Bj$*G\d0AgaT,Ee%ta;*%R_och%)\8UNQOhP-/G?
%,0RnRX@pSTm1gc?AEmHqn*8KOOnWL(&Xa43!hnd^<@V-&I(`IR\rC?oqOj>HUCV-(>L*Cm]]j0Qhjfq%?[RQ_3am68@^k?MoSl\t
%FZtlQMF\p)A/B6&&`%jaU&VKQ5cj#A)e<k"G;c0Jc.#uH;(37DEr-!a.*?h+2jZ4ar(Cah3!rBrbm)BgLmh_@,Akp<JhNS_0YGSP
%.2,@oZrNeQRif*h"YsqqDBipEAY*%56;AW5&J5l3igeL^#Uh-ih9@sh!0sP36PJTMM%Od*MK5YNVTln5!pVLq/Tj$AI8PT262)41
%?0lW./.!<s>nDIDD?/f:-E/Mc^+KdcdaRp7Uo,<o+];j_dqmK]s/IpsSlI+K]8.oE)iR+K8qFj2ATb!(_QJXnSVYbVUQ7`o<QXA/
%cXC-#(QmC!6j+f)a"<F>KUlRq(88r=L;/`1#$W3^d4RscX1d3^T>f#Whd(`L_i:kuie]q^RA5?AZ869P+Qs#EU_J"0r/URY*JAuP
%:Zpr:RCd99!do6':?L]#q\r'g`&j2C9E8P.q(d`QS[Wgc]OBEE8Yd4h0V38j<T@pT`qV;@er(jLE,0*$.Bk+P[Wra]k.JT3:Bn6Y
%`bJYB9f"E0]C&iZ#BMbXiS8@%27BjaPf^R!Zek_(cR_5)K;qk:'<i,OLP`PuUp"2L>*JT/8LbKg,a[mhIuk>d-%68d(s5>_JLRh]
%4_0mu&P9FD0!RY&?pf0T<tn.424Ju';4YZE$M;bqoM-`M=Zp2qeou>\cpCo6)NO3e%R"W!?Xr+1_Pt$ak%X(mYPMQt&<mI/I]^C4
%L9!knbSX9!NbPNbU"_':.+tN/le*g09Is#+L]1bSr;)>&s%\Jr9odqR59+]GX?A;sC[6n[l7<;4OJ4BX/G!"9`L^]B=AH&BTOa@:
%40;")/-G0[fM9Gm;+;HZAlQ->]*`tRfbf3I+<gtT&Y)bOhM"uc4*l(LP,8E+>dq:tCTtA56VWk?J=GNblETTclb84(>3p$rKu,uP
%(U*%^Onn-51\iCu$&eOEFufX`/4MW;pi0pQDolQr4SZPfcI*rodQiHP;X^FDck-BL\i;1=8>+9WDl=CkkT:AtZBR6CSVoA[0:r&<
%MHBA!c.dMu1*mc+Pri.6D=4=L*[`BY6V#4e'[;0?M?CDINOgZHk,b1=IH[SbC"o5eHp40jJMP56iVc<5^.SWr^t:n<8V0mI4a<a\
%p$J/0gr6DL%Ote8U8nNKlJ#IIqe%;J[J?6KkbcDp!BB7lIA(+/;pD(cim`6<g!DdSKiGa9AP\rqnIHF<F8C9@f@s2ck@Iui>j\YQ
%nc=GFOZ;0nG=AUd\hN.;$p4[rMNCX?+BS:I/uDNF-_oT-I>,JO[O=j5m@>S>Q<[u$m/`d"4(TM&%5(@H;#p'T*:LsRIWla&S>D#X
%%Z2ZnP"oT2AT\bMZu(m]$XIDtLWC0%6.:bJfSD?iT^ij%0pb&qp5<KI5R)PH<q5tuqF?qIl=_uZ>"V0brHJ%/ZH'CX]b8(]"D.J&
%G6mt]9)KT8DiI95KIca<=op'RFG?%f<0Ha5+iT35,+]oC:(;1F].^T7"%J'k>a\i)J(:Vfeb2#Po3r':?AUdkoegBf7`+uAkQp95
%M?DF)o>cMA*:u@K5agk7p!L<mnKEsr+&c@-O)4^kUjV5)4Gu&W1mQb"la3u['XJ_uQ+9hkY<RgA1HD4,Kc'N1<GTlca^kV'9iY4&
%bC==5_`n;UVDu,.s#oiL3"c@c48np=qe<>8m<A$5roON%jr(.[%*Br>*,k_liX5RHr_O'p?9Yh_Y+GZg[/8TVe8H#O<fS\.&ak1W
%_h>JD8\H5*(mtOBWHILnQ2=S/ka&h[e$,kpg0PfHJRQlT;PNFa[fu$s:]gaa_^,j.;<>4Oi4-dF<Va!#IL2?V%B7_J"]L1e%AV+J
%;r?PhrB=Co7a][P$IhFt/0:uFBRif@:!VXN]im?=>/>W$GImZbm8]K5U8HTrdF:8"8$YL^1Z@(F-"JsH06>X"F_fP\i4TbY70KXC
%bhF;%CN)dQ:Z5#cTo't&mB;CDRU.hkB&ASi-09bblE&b;U(+BBj!"',q%QT-ZPnVBV9[tQ6q0EP7Q^D4gtrn7^$)]a8sM:=p^S@I
%H&JiDrUr8\Zb*MaLCLR^[W`tE(!1LPoDX',UT//KK&3f6<9?qq7pW%bd)fIIU9!BLOjVr2LXCP'"&Qm_+3cKBpZWR&H<Tlco/9TX
%)Wu,3C"R&s.#qnQi,8DRWkY8U3NGNB?n;_/,o=@cD\e<.ZK>J#H<Q:>[9IePZu.DgRJFrk8n-FHkO"qfQ<V&U2@*>cX5U^Q-q%ff
%<4qP0pIM?1YI>$nJBeDPGSus%H_BZMT7n1N9X^]*GWJ;/T3?ThAURm*bub.kdY4"8q=i9P&Q9P?qrm,A@LkQpr&uXX@hl8K#RRM^
%<nscFW3"<O>kgS&#?E>R\?:/h^mS;q!ck+\:.@rNT\R5&,4,'ON*,)[6ZT*N5/3,A9Xg'QT7q^$`lla6Se0iTUU=0/2L6#o2\FA&
%eZ,ntccu%7@+/P-BBJWI%!rba/r^r'fcaiZ7j9C`Is5P&Y+%laXOt3s>iPjC)=d@!#hKOGS+u!ie/e8[Y_U6PnIU"25h!d.>[$MO
%dJ;7igG[=1W?(n]l*'D)^?W,_Tb)2?'V+.KWI<["P?_KZm-`7Lh*0M'm(o4'4(9TJNQj/,eJ-?Gc@Wa\W3&Wl,h3R&SfORUa^pEm
%j=mT,=+VLBEjjjq>Df-*a$XOP,fn<8_l,]5UMggsa@GUE&<1)1DD_0hhtm?*gk$*6),!D($Ab]7:R7;g_./WLlOtC60"25!fg9?:
%G/4:I?'a61--\=u[@R"'E1TqjF';_7>B$bg^Y+RC!?F<dKR7grC6-t@6gsX?gE6^-$I5UoAEBQ@r+PUh\+N=m8B^-n:7MC7"OZX&
%PBXA1F7(@-h(4_UZ;&"l;;CKjip3r>@F_k:pEt0HX^B%(p3OTA>m5o\,e]pR`<J;\R\AM%6RoLun"V%$KcJFsmMg:_a4mnsW\490
%T8)/\hP1rN+G_73HS9\]o]=l%B;uVSKmIpFI/o%.]if)'U?UgAWX*)gWM5eW@?E:?8seQ4KfYE^S*R=M>KYQ^ESLFk6I_7TR%5Uf
%Dr(18^=^!tL]'CtH)aVbNJCo+s*9&6"Xm7/J,Zf+[j*B/H8Be20JjaY^?W)QT>`));5`4;PgQ*rL[>QJIFr$9%XWqo,Xo99*0iJF
%7C%a66L_\nK:Z`ZVPoHV<k$Zo8q5Z3A@p\5Jka/H*mLR;4k];!/R<:=4G:/0BjP^aLG=2JRr?2^@=qKG0KSNB[.pZUU.55B7egSs
%'(or+,ac'!8oEL/o5hNsU$@"ViB0^7Dq@(8HW,3s3N.DG2.^86agIlO:TLLDE9ZQ5Gorc&Fu'nT498LJ<1P6QYF;uk7%)g*]-_DT
%1$_:RGXD)&Il-o"bPM-iC#,4N8E^=fmG?W)B2eR9qgHh/ojuqGnq;A9&Ua;OhpW"R\L8&([lKG:>*r#2Glq$s\\J_H38>/3c:HN1
%Rq=&&]%bZXpX,'^1lb(:TY676+ih2KY#04gr\3W!9'd"^'bh=_Q;9a!Hdui*5J*YEe?3r3<I^/kS6StJmIt$"VWM=5WcP=o)Qf%n
%a;>?Y5Y4rlWW#S^HV=)%NDaG7@GG+mU3?e5H5PJ59DGR*Hll&h>41Dg)1jF^0ur$&7Wlo!VdYW"oOnKL*,k-P^?W,RTg:M0l8j9J
%h4^&U7%QL,pX'un.2qnRQ!N=eaaZr]<Q8Dl^o4WC41$#"C%78I&<ft^T&g?[R-1g[_lXX#aDQA=hqSTG]DXq[?"ACHK\kU\#(O9\
%]MJEg:D6s"j4$R\Z;S/C]4pe8\"+Mc>,N`@h@'FrU>.;F@cPEkrNQJrU%C-M//F0VLq$Sj&/E.Q*m5*QL.J0^$^Q!Z_NOMb:OqW&
%rqO.k8To2&P%3NC;ih]cGF4V@kjEUU6E8M^]@5U_C?t,-eR/!=]CZ\,p]/d0'ono0JS;)TH:ZdI!O>Y[A`:CFh.:ap2<)`SMi,;h
%Sk+c#NgdQ=l*-(AE1MV%rNJ@E'i?NTE[#j2ps5I)c@#kM5*=>/_&#O#HUN1KHIi)8%LH)("=#iWi;/)mZcfHF'&Y=PU@,3jRrs,6
%<=;#tq"d?&q-u6f-N&8E';?]t:`gn=Vr@`2d$0T:AA<H9_ppmGp4\]de9ajr(e?1$"RdGeM8Q#"6pXEJQKgMa*2rHa@Y,5@3V<_'
%;IF/h(S$?1@?A9(\Ajd/YLH$RUIhk%;*G33Pol)Tl,i`0bLeC4_CD%F9%fr]EZ!^+>I<_ZL]'ChPi`fH4TnrrW.gs_U,BYB7dk#s
%3nl#hZSF?`Z^kr8(00)DhF5r@bTi:L$G@q'+]>fu'O//#95SXE;0SqLWLHq1UQQ7f<d4FhfV=5A1X99/B8=[Uh-T.0d)U"4!XFrf
%!gMJ6#ND+RW[J[)Ve;.H>2Lo23]G*S6t4612\kE@P(ef&=\QdInHs\hNV$>HP2>p9CAfK.s)@jV%:\$4S,6-U/f_h_,m&2RV>$&;
%[o;F-Gq*+m`r2)rlUTN,`G7h'Yg*knDKc*Ge,YBV,fi4ND9l[u"I12f9RZ/g-MNserEJI&Lc:Th:Y#cP,d2h;`)[0D,.CPe50f4*
%ZZQl:o%,71ERj$c,I;*oDr)/l^7-cJ6Qc4!qnrCUHgQC<@F#Y0>52R>ldciDjThFEd>E_"p1X!`gY=Sd4o>8l''ru_4ad4+p>LN"
%Q!dfoNc+g0qP;k<Yenq<HX7lJF8K^"fj7\Uqg!m'chOg:6bhtVF^Xu7-40Zn+kSRhPFhe%rJO_*Ist-)fQ2E)M\L`5O,<a`Cpnig
%kN0I-q>9()J,S38Dsm%^i>;Obol&adq_qm^GM>!(rj1M]n`p_S?@DeLhZNh(pHS&;?N'SeGCTP>+23$plAr^W_uF3)O2`:>iYTB-
%eNa$1BE&4&eL%6~>
%AI9_PrivateDataEnd
